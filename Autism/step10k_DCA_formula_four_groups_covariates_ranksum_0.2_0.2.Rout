
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # This code is modified from
> # step3e_DCA_formula_pmf_three_groups_covariates_ranksum.R
> # to separate DESeq2 q value and dca_direct q value 
> # at two pairs of cutoffs:
> # (1) DESeq2 q value 0.2, dca_direct q value 0.2
> # (2) DESeq2 q value 0.2, dca_direct q value 0.1
> # these two are taken as inputs to this file
> 
> 
> ## current version handles L2_3 only
> 
> 
> args = commandArgs(trailingOnly=TRUE)
> args
[1] "deseq2_qcut=0.2"     "dca_direct_qcut=0.2"
> 
> if (length(args) != 2) {
+   message("two arguments are expected, use 0.2 and 0.1 as default.\n")
+   deseq2_qcut = 0.2
+   dca_direct_qcut = 0.1
+ }else{
+   for(i in 1:length(args)){
+     eval(parse(text=args[[i]]))
+   }
+ }
> 
> deseq2_qcut = as.numeric(deseq2_qcut)
> deseq2_qcut
[1] 0.2
> 
> dca_direct_qcut = as.numeric(dca_direct_qcut)
> dca_direct_qcut
[1] 0.2
> 
> 
> 
> library(MASS)
> library(Matrix)
> library(data.table)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:data.table’:

    between, first, last

The following object is masked from ‘package:MASS’:

    select

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> #library(doParallel)
> #library(doRNG)
> #library(svd)
> #library(ideas)
> #library(MiRKAT)
> library(transport)
> library(ggplot2)
> library(ggpubr)
> library(ggpointdensity)
> 
> library(grid)
> library(gridExtra)

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> #big_font <- theme_grey(base_size =  16)
> 
> theme_set(theme_classic())
> 
> 
> 
> 
> 
> #setwd("~/Documents/Fred_Hutch/core_code")
> data.dir  = "./data"
> data.dca.dir = "../../ideas_data/Autism/dca_PFC_all"
> 
> grp = "PFC_L2_3"
> grp1 = "L2_3"
> 
> 
> 
> ## data processing
> 
> # ------------------------------------------------------------------------
> # read in cell information
> # ------------------------------------------------------------------------
> 
> cell_info = fread(file.path(data.dir, "meta.tsv"), 
+                   stringsAsFactors=TRUE)
> dim(cell_info)
[1] 104559     16
> cell_info[1:2,]
                           cell     cluster    sample individual region age sex
1: AAACCTGGTACGCACC-1_1823_BA24 Neu-NRGN-II 1823_BA24       1823    ACC  15   M
2: AAACGGGCACCAGATT-1_1823_BA24        L5/6 1823_BA24       1823    ACC  15   M
   diagnosis Capbatch Seqbatch post-mortem interval (hours)
1:   Control      CB8      SB3                           18
2:   Control      CB8      SB3                           18
   RNA Integrity Number genes  UMIs RNA mitochondr. percent
1:                    7   622   774               2.4547804
2:                    7  6926 24042               0.4450545
   RNA ribosomal percent
1:             1.4211886
2:             0.4284169
> 
> # ------------------------------------------------------------------------
> # read in count data of one region and one cluster
> # ------------------------------------------------------------------------
> 
> 
> dat1 = readRDS(file.path(data.dir, sprintf("ct_mtx/%s.rds", grp)))
> full_genes = rownames(dat1)  
> 
> 
> 
> dim(dat1)
[1] 18041  8626
> dat1[1:5,1:4]
5 x 4 sparse Matrix of class "dgCMatrix"
         AAACCTGCACCCATTC-1_4341_BA46 AAACGGGGTCGGCATC-1_4341_BA46
DNAJC11                             1                            3
NADK                                .                            .
MASP2                               .                            .
CLCN6                               .                            .
TNFRSF1B                            .                            .
         AAAGATGCAGCGTCCA-1_4341_BA46 AAAGATGGTCCGAATT-1_4341_BA46
DNAJC11                             .                            .
NADK                                .                            .
MASP2                               .                            .
CLCN6                               .                            .
TNFRSF1B                            .                            .
> 
> 
> # ------------------------------------------------------------------------
> # filter out genes with too many zero's
> # ------------------------------------------------------------------------
> 
> n.zeros = rowSums(dat1 == 0)
> summary(n.zeros)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    5334    7141    6380    8037    8619 
> 
> 0.6*ncol(dat1)
[1] 5175.6
> 0.8*ncol(dat1)
[1] 6900.8
> 
> table(n.zeros < 0.6*ncol(dat1))

FALSE  TRUE 
13781  4260 
> table(n.zeros < 0.8*ncol(dat1))

FALSE  TRUE 
 9781  8260 
> table(n.zeros < 0.9*ncol(dat1))

FALSE  TRUE 
 6335 11706 
> 
> w2kp = which(n.zeros < 0.8*ncol(dat1))
> dat1 = dat1[w2kp,]
> 
> dim(dat1)
[1] 8260 8626
> dat1[1:5,1:4]
5 x 4 sparse Matrix of class "dgCMatrix"
        AAACCTGCACCCATTC-1_4341_BA46 AAACGGGGTCGGCATC-1_4341_BA46
DNAJC11                            1                            3
VPS13D                             2                            3
PER3                               1                            .
KIF1B                              2                            5
PRKCZ                              1                            7
        AAAGATGCAGCGTCCA-1_4341_BA46 AAAGATGGTCCGAATT-1_4341_BA46
DNAJC11                            .                            .
VPS13D                             1                            1
PER3                               .                            .
KIF1B                              6                            2
PRKCZ                              1                            .
> 
> 
> 
> # -------------------------------------------------------------------
> # load means and variances pvalues from log transformation
> # and linear regression on covariates
> # from formula and pmf based approach
> # -------------------------------------------------------------------
> 
> dca_pvalues = read.csv(
+   "res/step3b_formula_covariates_pvals_all.csv", 
+   header = TRUE)
> dim(dca_pvalues)
[1] 8260    5
> dca_pvalues[1:2, ]
     gene mean_formula var_formula    mean_pmf     var_pmf
1 DNAJC11  0.024853584 0.026261006 0.023630226 0.023901143
2  VPS13D  0.005169749 0.006230165 0.004976338 0.005838741
> 
> theta_pvalues = read.csv(
+   "res/step10b_formula_pmf_covariates_pvals_all.csv", 
+   header = TRUE)
> dim(theta_pvalues)
[1] 8260    2
> theta_pvalues[1:2, ]
     gene theta_formula
1 DNAJC11   0.008188921
2  VPS13D   0.002598113
> 
> dca_pvalues$theta_formula = theta_pvalues$theta_formula
> dim(dca_pvalues)
[1] 8260    6
> dca_pvalues[1:2, ]
     gene mean_formula var_formula    mean_pmf     var_pmf theta_formula
1 DNAJC11  0.024853584 0.026261006 0.023630226 0.023901143   0.008188921
2  VPS13D  0.005169749 0.006230165 0.004976338 0.005838741   0.002598113
> 
> # -------------------------------------------------------------------
> # read in q value information
> # prepare for comparing gene groups
> # -------------------------------------------------------------------
> 
> cell_types = scan("cell_types.txt", what=character())
Read 17 items
> cell_types = sort(cell_types)
> cell_types
 [1] "PFC_AST-FB"           "PFC_AST-PP"           "PFC_Endothelial"     
 [4] "PFC_IN-PV"            "PFC_IN-SST"           "PFC_IN-SV2C"         
 [7] "PFC_IN-VIP"           "PFC_L2_3"             "PFC_L4"              
[10] "PFC_L5_6"             "PFC_L5_6-CC"          "PFC_Microglia"       
[13] "PFC_Neu-mat"          "PFC_Neu-NRGN-I"       "PFC_Neu-NRGN-II"     
[16] "PFC_Oligodendrocytes" "PFC_OPC"             
> 
> i = 8
> ct1 = cell_types[i]
> 
> methods = c("DESeq2", "rank_sum", "MAST_glm", "MAST_glmer", 
+             "PS_nb_Was", "PS_dca_direct_Was", "PS_saver_direct_Was")
> 
> q1  =  fread(sprintf("res/step1l_qvals_%s.tsv", ct1))
> dim(q1)
[1] 8260   17
> table(q1$gene == rownames(dat1))

TRUE 
8260 
> 
> threshold_1 = 0.1
> threshold_2 = 0.2
> threshold_3 = 0.3 
> 
> check_length_1 <- function(v){
+   length(which(v < threshold_1))
+ }
> 
> check_length_2 <- function(v){
+   length(which(v < threshold_2))
+ }
> 
> check_length_3 <- function(v){
+   length(which(v < threshold_3))
+ }
> 
> apply(q1[, -1], 2, check_length_1)
             DESeq2           KR_nb_Was           KR_nb_JSD           PS_nb_Was 
                 15                   0                   0                   0 
          PS_nb_JSD   KR_dca_direct_Was   KR_dca_direct_JSD   PS_dca_direct_Was 
                  0                   0                   0                 260 
  PS_dca_direct_JSD            MAST_glm          MAST_glmer            rank_sum 
                  0                7893                2296                6933 
KR_saver_direct_Was KR_saver_direct_JSD PS_saver_direct_Was PS_saver_direct_JSD 
                  0                   0                   0                   0 
> 
> apply(q1[, -1], 2, check_length_2)
             DESeq2           KR_nb_Was           KR_nb_JSD           PS_nb_Was 
                131                   4                   0                   0 
          PS_nb_JSD   KR_dca_direct_Was   KR_dca_direct_JSD   PS_dca_direct_Was 
                  0                   0                   0                1784 
  PS_dca_direct_JSD            MAST_glm          MAST_glmer            rank_sum 
               1041                8083                4891                7389 
KR_saver_direct_Was KR_saver_direct_JSD PS_saver_direct_Was PS_saver_direct_JSD 
                  0                   0                   0                   0 
> 
> apply(q1[, -1], 2, check_length_3)
             DESeq2           KR_nb_Was           KR_nb_JSD           PS_nb_Was 
                626                   4                   0                  21 
          PS_nb_JSD   KR_dca_direct_Was   KR_dca_direct_JSD   PS_dca_direct_Was 
                  0                 357                 222                3512 
  PS_dca_direct_JSD            MAST_glm          MAST_glmer            rank_sum 
               2447                8173                6313                7698 
KR_saver_direct_Was KR_saver_direct_JSD PS_saver_direct_Was PS_saver_direct_JSD 
                  0                   0                   0                   0 
> 
> 
> 
> # ------------------------------------------------------------
> # pvalues on log(mean) and log(variance) from dca formula 
> # ------------------------------------------------------------
> 
>   
> deseq2_index = q1$DESeq2 < deseq2_qcut
> 
> dca_direct_index = q1$PS_dca_direct_Was < dca_direct_qcut
> 
> 
> group1_index = deseq2_index & dca_direct_index
> group2_index = (!deseq2_index) & dca_direct_index
> group3_index = deseq2_index & (!dca_direct_index)
> group4_index = (!deseq2_index) & (!dca_direct_index)
> 
> sum(group1_index)
[1] 100
> sum(group2_index)
[1] 1684
> sum(group3_index)
[1] 31
> sum(group4_index)
[1] 6445
> 
> sum(sum(group1_index) + sum(group2_index) +
+     sum(group3_index) + sum(group4_index))
[1] 8260
> 
> group1_genes = q1$gene[group1_index]
> group1_genes[1:10]
 [1] "RPL22"   "CDK11B"  "HP1BP3"  "TRAPPC3" "COL16A1" "ERICH3"  "TTF2"   
 [8] "CEPT1"   "KDM5B"   "ZBTB41" 
> 
> group2_genes = q1$gene[group2_index]
> group2_genes[1:10]
 [1] "DNAJC11"  "VPS13D"   "PRKCZ"    "CEP104"   "UBE4B"    "CFAP74"  
 [7] "PEX14"    "ATAD3B"   "SLC45A1"  "SLC25A33"
> 
> group3_genes = q1$gene[group3_index]
> group3_genes[1:10]
 [1] "NFIA"    "SH3YL1"  "RPL37A"  "TENM3"   "RPL37"   "ELMO1"   "BEX1"   
 [8] "PLEKHA2" "RHPN1"   "C9orf16"
> 
> group4_genes = q1$gene[group4_index]
> group4_genes[1:10]
 [1] "PER3"   "KIF1B"  "KCNAB2" "ENO1"   "GNB1"   "SDF4"   "ACOT7"  "CHD5"  
 [9] "ERRFI1" "PARK7" 
> 
> rows1 = match(group1_genes, row.names(dat1))
> rows2 = match(group2_genes, row.names(dat1))
> rows3 = match(group3_genes, row.names(dat1))  
> rows4 = match(group4_genes, row.names(dat1))  
> 
> table(which(group1_index==TRUE) == rows1)

TRUE 
 100 
> table(which(group2_index==TRUE) == rows2)

TRUE 
1684 
> table(which(group3_index==TRUE) == rows3)

TRUE 
  31 
> table(which(group4_index==TRUE) == rows4)

TRUE 
6445 
> 
>   
> # for each gene in interest
> # get log(mean) and log(theta) pvalue for 
> # each individual in each group
> # test the difference in mean between case and control
> #                     '''theta '''
> 
> group1_mean_pval = dca_pvalues$mean_formula[rows1]
> group1_theta_pval = dca_pvalues$theta_formula[rows1]
> 
> group2_mean_pval = dca_pvalues$mean_formula[rows2]
> group2_theta_pval = dca_pvalues$theta_formula[rows2] 
> 
> group3_mean_pval = dca_pvalues$mean_formula[rows3]
> group3_theta_pval = dca_pvalues$theta_formula[rows3] 
> 
> group4_mean_pval = dca_pvalues$mean_formula[rows4]
> group4_theta_pval = dca_pvalues$theta_formula[rows4] 
> 
> char1 = as.character(round(deseq2_qcut, digits = 1))
> char2 = as.character(round(dca_direct_qcut, digits = 1))
>   
> 
> figure_filename = paste0("figures/step10k_DCA_log_formula_four_groups_pvalue_hist_", 
+                          char1, "_", char2, ".pdf")
> pdf(figure_filename, width=12, height=6)
> par(mfrow=c(2,4), bty="n", mar=c(5,4,3,1))
> 
> hist(log10(group1_mean_pval), 
+      main="DESeq2 sign, dca_direct sign\nmean", 
+      xlab="log10(p-value)", seq(-6.5, 0, by=0.5))
> hist(log10(group2_mean_pval), 
+      main="DESeq2 nosign, dca_direct sign\nmean", 
+      xlab="log10(p-value)", seq(-6.5, 0, by=0.5))
> hist(log10(group3_mean_pval), 
+      main="DESeq2 sign, dca_direct nosign\nmean", 
+      xlab="log10(p-value)", seq(-6.5, 0, by=0.5))
> hist(group4_mean_pval, 
+      main="DESeq2 nosign, dca_direct nosign\nmean", 
+      xlab="p-value", breaks = 20)  
> 
> hist(log10(group1_theta_pval), 
+      main="DESeq2 sign, dca_direct sign\npseudo theta", 
+      xlab="log10(p-value)", seq(-6.5, 0, by=0.5))
> hist(log10(group2_theta_pval), 
+      main="DESeq2 nosign, dca_direct sign\npseudo theta", 
+      xlab="log10(p-value)", seq(-6.5, 0, by=0.5))
> hist(log10(group3_theta_pval), 
+      main="DESeq2 sign, dca_direct nosign\npseudo theta", 
+      xlab="log10(p-value)", seq(-6.5, 0, by=0.5))
> hist(group4_theta_pval, 
+      main="DESeq2 nosign, dca_direct nosign\npseudo theta", 
+      xlab="p-value", breaks = 20)  
> 
> dev.off()
null device 
          1 
> 
>   
>   
> 
> settings = c("DESeq2 sign, dca sign", 
+              "DESeq2 nosign, dca sign", 
+              "DESeq2 sign, dca nosign", 
+              "DESeq2 nosign, dca nosign")
> 
> mean_pvalue_list = list()
> 
> mean_pvalue_list[[1]] = group1_mean_pval
> mean_pvalue_list[[2]] = group2_mean_pval
> mean_pvalue_list[[3]] = group3_mean_pval
> mean_pvalue_list[[4]] = group4_mean_pval
> 
> 
> theta_pvalue_list = list()
> 
> theta_pvalue_list[[1]] = group1_theta_pval
> theta_pvalue_list[[2]] = group2_theta_pval
> theta_pvalue_list[[3]] = group3_theta_pval
> theta_pvalue_list[[4]] = group4_theta_pval
>   
> get_prop_001 <- function(vec){
+   proportion = round(sum(vec < 0.001)/length(vec), digits = 3)
+   return(format(proportion, nsmall = 3))
+ }
> 
> get_prop_01 <- function(vec){
+   proportion = round(sum(vec < 0.01)/length(vec), digits = 3)
+   return(format(proportion, nsmall = 3))
+ }
> 
> props_mean_001 = sapply(mean_pvalue_list, get_prop_001)
> props_theta_001  = sapply(theta_pvalue_list, get_prop_001)
> 
> props_mean_01 = sapply(mean_pvalue_list, get_prop_01)
> props_theta_01  = sapply(theta_pvalue_list, get_prop_01)
> 
> ranksum_mean_mat = matrix(NA, ncol = 4, nrow = 4)
> ranksum_theta_mat = matrix(NA, ncol = 4, nrow = 4)
>   
> for (i in 1:3){
+   for (j in (i+1):4){
+     temp_pvalue = wilcox.test(mean_pvalue_list[[i]],
+                         mean_pvalue_list[[j]])$p.value
+     if (temp_pvalue >= 0.001){
+       temp_pvalue = 
+         format(round(temp_pvalue, digits = 3), nsmall = 3)
+     }else{
+       temp_pvalue = 
+         formatC(temp_pvalue, format = "e", digits = 1)
+     }
+     ranksum_mean_mat[i,j] = temp_pvalue
+     ranksum_mean_mat[j,i] = ranksum_mean_mat[i,j]
+   }
+ }
> 
> for (i in 1:3){
+   for (j in (i+1):4){
+     temp_pvalue = wilcox.test(theta_pvalue_list[[i]],
+                         theta_pvalue_list[[j]])$p.value
+     if (temp_pvalue >= 0.001){
+       temp_pvalue = 
+         format(round(temp_pvalue, digits = 3), nsmall = 3)
+     }else{
+       temp_pvalue = 
+         formatC(temp_pvalue, format = "e", digits = 1)
+     }
+     ranksum_theta_mat[i,j] = temp_pvalue
+     ranksum_theta_mat[j,i] = ranksum_theta_mat[i,j]
+   }
+ } 
> 
>   
> # keep the ngene part just for verification
> ngenes_vec = c(length(group1_mean_pval), 
+                length(group2_mean_pval), 
+                length(group3_mean_pval), 
+                length(group4_mean_pval))
> 
> df_four_groups = data.frame("setting" = settings, 
+                             "prop_less_than0.001_mean" = props_mean_001,
+                             "prop_less_than0.001_theta" = props_theta_001,
+                             "prop_less_than0.01_mean" = props_mean_01,
+                             "prop_less_than0.01_theta" = props_theta_01,
+                             "ngenes_in_group" = ngenes_vec)
> 
> write.csv(df_four_groups, 
+           file = paste0("res/step10k_log_formula_four_groups_", 
+                         char1, "_", char2, 
+                         "_proportion.csv"),
+           row.names = FALSE)
> 
>   
> #group_names = c("pp", "np", "pn", "nn")
> 
> df_ranksum_mean = cbind(settings, ranksum_mean_mat)
> colnames(df_ranksum_mean) = c("names", settings)
> 
> df_ranksum_theta = cbind(settings, ranksum_theta_mat)
> colnames(df_ranksum_theta) = c("names", settings)
> 
> write.csv(df_ranksum_mean, 
+           file = paste0("res/step10k_log_formula_four_groups_", 
+                         char1, "_", char2, 
+                         "_ranksum_pvalues_mean.csv"),
+           row.names = FALSE)
> 
> write.csv(df_ranksum_theta, 
+           file = paste0("res/step10k_log_formula_four_groups_", 
+                         char1, "_", char2, 
+                         "_ranksum_pvalues_theta.csv"),
+           row.names = FALSE)
> 
> 
> 
> # further split each group into four groups
> #   -- both mean and theta pvalue < 0.001
> #   -- mean pvalue < 0.001, theta pvalue >= 0.001
> #   -- mean pvalue >= 0.001, theta pvalue < 0.001
> #   -- mean pvalue >= 0.001, theta pvalue >= 0.001
> 
> further_four_groups_mat = matrix(NA, ncol = 4, nrow = 4)
> 
> for (i in 1:4){
+   further_four_groups_mat[i, 1] = 
+     sum((mean_pvalue_list[[i]]<0.001) & (theta_pvalue_list[[i]]<0.001))/length(mean_pvalue_list[[i]])
+   further_four_groups_mat[i, 2] = 
+     sum((mean_pvalue_list[[i]]<0.001) & (!(theta_pvalue_list[[i]]<0.001)))/length(mean_pvalue_list[[i]])
+   further_four_groups_mat[i, 3] = 
+     sum((!(mean_pvalue_list[[i]]<0.001)) & (theta_pvalue_list[[i]]<0.001))/length(mean_pvalue_list[[i]])
+   further_four_groups_mat[i, 4] = 
+     sum((!(mean_pvalue_list[[i]]<0.001)) & (!(theta_pvalue_list[[i]]<0.001)))/length(mean_pvalue_list[[i]])
+   }
> 
> df_further = cbind(paste0(settings, 
+                           rep(" (", 4), 
+                           sapply(mean_pvalue_list, length),
+                           rep(")", 4)),
+                    round(further_four_groups_mat, digits = 3))
> 
> colnames(df_further)[2:5] = c("mean sign, theta sign", 
+                               "mean sign, theta nosign",
+                               "mean nosign, theta sign",
+                               "mean nosign, theta nosign")
> 
> write.csv(df_further, 
+           file = paste0("res/step10k_further_four_groups_", char1, "_", char2, ".csv"), 
+           row.names = FALSE)
>   
>   
> gc()
           used  (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells  2119876 113.3    4132222  220.7         NA   2775354  148.3
Vcells 55573950 424.0  289314284 2207.3      65536 356084538 2716.8
> 
> sessionInfo()
R version 4.1.0 (2021-05-18)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] grid      stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] gridExtra_2.3        ggpointdensity_0.1.0 ggpubr_0.4.0        
[4] ggplot2_3.3.5        transport_0.12-2     dplyr_1.0.7         
[7] data.table_1.14.0    Matrix_1.3-3         MASS_7.3-54         

loaded via a namespace (and not attached):
 [1] tidyselect_1.1.1 purrr_0.3.4      haven_2.4.1      lattice_0.20-44 
 [5] carData_3.0-4    colorspace_2.0-2 vctrs_0.3.8      generics_0.1.0  
 [9] utf8_1.2.1       rlang_0.4.11     pillar_1.6.1     foreign_0.8-81  
[13] glue_1.4.2       withr_2.4.2      DBI_1.1.1        readxl_1.3.1    
[17] lifecycle_1.0.0  munsell_0.5.0    ggsignif_0.6.2   gtable_0.3.0    
[21] cellranger_1.1.0 zip_2.2.0        rio_0.5.27       forcats_0.5.1   
[25] curl_4.3.2       fansi_0.5.0      broom_0.7.8      Rcpp_1.0.7      
[29] scales_1.1.1     backports_1.2.1  abind_1.4-5      hms_1.1.0       
[33] stringi_1.6.2    openxlsx_4.2.4   rstatix_0.7.0    tools_4.1.0     
[37] magrittr_2.0.1   tibble_3.1.2     crayon_1.4.1     tidyr_1.1.3     
[41] car_3.0-11       pkgconfig_2.0.3  ellipsis_0.3.2   assertthat_0.2.1
[45] R6_2.5.0         compiler_4.1.0  
> q(save="no")
> proc.time()
   user  system elapsed 
  4.622   0.734   5.348 
