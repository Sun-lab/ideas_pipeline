
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # compared to step1b_MAST.R, this version runs it on a subset to 
> # get the computing time
> # artificial way of doing subset
> 
> library(Matrix)
> library(data.table)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:data.table’:

    between, first, last

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(MAST)
Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: MatrixGenerics
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following object is masked from ‘package:dplyr’:

    count


Attaching package: ‘MatrixGenerics’

The following objects are masked from ‘package:matrixStats’:

    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,
    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,
    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,
    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,
    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,
    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,
    colWeightedMeans, colWeightedMedians, colWeightedSds,
    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,
    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,
    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,
    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,
    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,
    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,
    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,
    rowWeightedSds, rowWeightedVars

Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:dplyr’:

    combine, intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:dplyr’:

    first, rename

The following objects are masked from ‘package:data.table’:

    first, second

The following objects are masked from ‘package:Matrix’:

    expand, unname

The following objects are masked from ‘package:base’:

    expand.grid, I, unname

Loading required package: IRanges

Attaching package: ‘IRanges’

The following objects are masked from ‘package:dplyr’:

    collapse, desc, slice

The following object is masked from ‘package:data.table’:

    shift

Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘Biobase’

The following object is masked from ‘package:MatrixGenerics’:

    rowMedians

The following objects are masked from ‘package:matrixStats’:

    anyMissing, rowMedians

Warning messages:
1: package ‘MatrixGenerics’ was built under R version 4.1.1 
2: package ‘GenomeInfoDb’ was built under R version 4.1.1 
> library(lme4)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> library(foreach)
> library(doRNG)
Loading required package: rngtools
> 
> data.dir = "data"
> nCore    = 4
> 
> args=(commandArgs(TRUE))
> args
character(0)
> 
> if (length(args) != 1) {
+   message("one argument is expected, use 'PFC_L2_3' as default.\n")
+   grp = "PFC_L2_3"
+ }else{
+   eval(parse(text=args[[1]]))
+ }
one argument is expected, use 'PFC_L2_3' as default.

> 
> grp
[1] "PFC_L2_3"
> 
> # ------------------------------------------------------------------------
> # read in cell information
> # ------------------------------------------------------------------------
> 
> cell_info = fread(file.path(data.dir, "meta.tsv"))
> dim(cell_info)
[1] 104559     16
> cell_info[1:2,]
                           cell     cluster    sample individual region age sex
1: AAACCTGGTACGCACC-1_1823_BA24 Neu-NRGN-II 1823_BA24       1823    ACC  15   M
2: AAACGGGCACCAGATT-1_1823_BA24        L5/6 1823_BA24       1823    ACC  15   M
   diagnosis Capbatch Seqbatch post-mortem interval (hours)
1:   Control      CB8      SB3                           18
2:   Control      CB8      SB3                           18
   RNA Integrity Number genes  UMIs RNA mitochondr. percent
1:                    7   622   774               2.4547804
2:                    7  6926 24042               0.4450545
   RNA ribosomal percent
1:             1.4211886
2:             0.4284169
> 
> table(cell_info$region)

  ACC   PFC 
42393 62166 
> 
> cell_info = cell_info[which(cell_info$region=="PFC"),]
> 
> sort(table(paste(cell_info$diagnosis, cell_info$sample, sep=":")))

         ASD:5978_BA9      Control:5976_BA9          ASD:5403_PFC 
                  926                  1054                  1112 
Control:5879_PFC_Nova          ASD:6033_BA9          ASD:5419_PFC 
                 1850                  1970                  1972 
Control:5936_PFC_Nova          ASD:5144_PFC      Control:5958_BA9 
                 2033                  2047                  2083 
         ASD:5864_BA9 Control:5408_PFC_Nova          ASD:5565_BA9 
                 2148                  2255                  2319 
         ASD:5945_PFC          ASD:5294_BA9          ASD:5278_PFC 
                 2522                  2568                  2819 
Control:5538_PFC_Nova          ASD:5531_BA9          ASD:5939_BA9 
                 3034                  3054                  3085 
     Control:5893_PFC     Control:4341_BA46      Control:5577_BA9 
                 3317                  3849                  4131 
         ASD:5841_BA9      Control:5387_BA9 
                 5477                  6541 
> 
> # ------------------------------------------------------------------------
> # read in count data of one region and one cluster
> # ------------------------------------------------------------------------
> 
> dat1 = readRDS(file.path(data.dir, sprintf("ct_mtx/%s.rds", grp)))
> dim(dat1)
[1] 18041  8626
> class(dat1)
[1] "dgCMatrix"
attr(,"package")
[1] "Matrix"
> 
> # get full gene
> full_gene = row.names(dat1)
> 
> # ------------------------------------------------------------------------
> # subset cell information
> # ------------------------------------------------------------------------
> 
> table(colnames(dat1) %in% cell_info$cell)

TRUE 
8626 
> meta = cell_info[match(colnames(dat1), cell_info$cell),]
> dim(meta)
[1] 8626   16
> meta[1:2,]
                           cell cluster    sample individual region age sex
1: AAACCTGCACCCATTC-1_4341_BA46    L2/3 4341_BA46       4341    PFC  13   M
2: AAACGGGGTCGGCATC-1_4341_BA46    L2/3 4341_BA46       4341    PFC  13   M
   diagnosis Capbatch Seqbatch post-mortem interval (hours)
1:   Control      CB6      SB2                           16
2:   Control      CB6      SB2                           16
   RNA Integrity Number genes  UMIs RNA mitochondr. percent
1:                  7.2  3967  8526               0.4691532
2:                  7.2  6891 23815               0.3023305
   RNA ribosomal percent
1:             0.5160685
2:             0.4870880
> 
> summary(meta$UMIs/meta$genes)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.469   2.230   2.622   2.748   3.121   9.318 
> 
> # check each individual has a unique sample
> table(tapply(meta$sample, meta$individual, function(v){length(unique(v))}))

 1 
23 
> 
> # check each individual has a unique Capbatch
> table(tapply(meta$Capbatch, meta$individual, function(v){length(unique(v))}))

 1 
23 
> 
> table(meta$cluster)

L2/3 
8626 
> table(meta$region)

 PFC 
8626 
> 
> sort(table(paste(meta$diagnosis, meta$sample, sep=":")))

         ASD:5978_BA9          ASD:5403_PFC      Control:5976_BA9 
                   65                    69                   106 
Control:5408_PFC_Nova Control:5936_PFC_Nova          ASD:5144_PFC 
                  162                   193                   202 
     Control:5577_BA9          ASD:5864_BA9 Control:5879_PFC_Nova 
                  215                   275                   278 
     Control:5893_PFC          ASD:5419_PFC          ASD:6033_BA9 
                  284                   327                   362 
    Control:4341_BA46 Control:5538_PFC_Nova          ASD:5565_BA9 
                  388                   391                   414 
         ASD:5294_BA9          ASD:5945_PFC          ASD:5531_BA9 
                  415                   422                   431 
         ASD:5841_BA9      Control:5958_BA9          ASD:5939_BA9 
                  451                   542                   733 
         ASD:5278_PFC      Control:5387_BA9 
                  759                  1142 
> 
> # ------------------------------------------------------------------------
> # run MAST
> # ------------------------------------------------------------------------
> 
> rds = colSums(dat1)
> med_rds = median(rds)
> summary(rds)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2579    7746   12090   14177   18168  113632 
> med_rds
[1] 12090
> 
> dim(dat1)
[1] 18041  8626
> dat1[1:3,1:6]
3 x 6 sparse Matrix of class "dgCMatrix"
        AAACCTGCACCCATTC-1_4341_BA46 AAACGGGGTCGGCATC-1_4341_BA46
DNAJC11                            1                            3
NADK                               .                            .
MASP2                              .                            .
        AAAGATGCAGCGTCCA-1_4341_BA46 AAAGATGGTCCGAATT-1_4341_BA46
DNAJC11                            .                            .
NADK                               .                            .
MASP2                              .                            .
        AAAGTAGAGCTGTTCA-1_4341_BA46 AAATGCCCAGCTATTG-1_4341_BA46
DNAJC11                            .                            .
NADK                               .                            .
MASP2                              .                            .
> dat1 = t(t(dat1)/rds)*med_rds
> dim(dat1)
[1] 18041  8626
> dat1[1:3,1:6]
3 x 6 sparse Matrix of class "dgCMatrix"
        AAACCTGCACCCATTC-1_4341_BA46 AAACGGGGTCGGCATC-1_4341_BA46
DNAJC11                     1.436379                     1.545048
NADK                        .                            .       
MASP2                       .                            .       
        AAAGATGCAGCGTCCA-1_4341_BA46 AAAGATGGTCCGAATT-1_4341_BA46
DNAJC11                            .                            .
NADK                               .                            .
MASP2                              .                            .
        AAAGTAGAGCTGTTCA-1_4341_BA46 AAATGCCCAGCTATTG-1_4341_BA46
DNAJC11                            .                            .
NADK                               .                            .
MASP2                              .                            .
> summary(colSums(dat1))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  12090   12090   12090   12090   12090   12090 
> 
> dat1_log = as.matrix(log2(1 + dat1)) #log transformed data
> 
> dim(dat1_log)
[1] 18041  8626
> dat1_log[1:3, 1:4]
        AAACCTGCACCCATTC-1_4341_BA46 AAACGGGGTCGGCATC-1_4341_BA46
DNAJC11                     1.284738                     1.347693
NADK                        0.000000                     0.000000
MASP2                       0.000000                     0.000000
        AAAGATGCAGCGTCCA-1_4341_BA46 AAAGATGGTCCGAATT-1_4341_BA46
DNAJC11                            0                            0
NADK                               0                            0
MASP2                              0                            0
> cell_id = colnames(dat1_log)   # get the cell id from the data
> gene_id = rownames(dat1_log)   # get the gene id from the data
> 
> 
> 
> # do subset
> df_load = fread("res/step1e_pvals_PFC_L2_3.tsv")
> w2kp = match(df_load$gene, full_gene)
> 
> 
> #fData = data.frame(primerid = gene_id)
> fData = data.frame(primerid = gene_id[w2kp])
> cData = data.frame(wellKey  = cell_id)
> 
> # Cell info for meta
> cell_rd = colSums(dat1)
> CDR     = colSums(dat1 > 0) / nrow(dat1)
> 
> meta_ind = meta[, c("individual", "diagnosis")]
> meta_ind = unique(meta_ind)
> rownames(meta_ind) = meta_ind$individual
> 
> dim(meta)
[1] 8626   16
> meta[1:2,]
                           cell cluster    sample individual region age sex
1: AAACCTGCACCCATTC-1_4341_BA46    L2/3 4341_BA46       4341    PFC  13   M
2: AAACGGGGTCGGCATC-1_4341_BA46    L2/3 4341_BA46       4341    PFC  13   M
   diagnosis Capbatch Seqbatch post-mortem interval (hours)
1:   Control      CB6      SB2                           16
2:   Control      CB6      SB2                           16
   RNA Integrity Number genes  UMIs RNA mitochondr. percent
1:                  7.2  3967  8526               0.4691532
2:                  7.2  6891 23815               0.3023305
   RNA ribosomal percent
1:             0.5160685
2:             0.4870880
> dim(meta_ind)
[1] 23  2
> meta_ind[1:2,]
   individual diagnosis
1:       4341   Control
2:       5144       ASD
> 
> 
> 
> 
> 
> 
> 
> 
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   6108494  326.3   10218798  545.8         NA   7759313  414.4
Vcells 228599785 1744.1  555580659 4238.8      65536 539876346 4119.0
> #sca = FromMatrix(dat1_log, cData, fData)
> sca = FromMatrix(dat1_log[w2kp,], cData, fData)
Assuming data assay in position 1, with name et is log-transformed.
> colData(sca)$cngeneson = as.numeric(CDR)
> colData(sca)$diagnosis = as.factor(meta$diagnosis)
> colData(sca)$ind = as.factor(meta$individual)
> colData(sca)$RIN = meta$'RNA Integrity Number'
> colData(sca)
DataFrame with 8626 rows and 5 columns
                                            wellKey cngeneson diagnosis
                                        <character> <numeric>  <factor>
AAACCTGCACCCATTC-1_4341_BA46 AAACCTGCACCCATTC-1_4..  0.215786   Control
AAACGGGGTCGGCATC-1_4341_BA46 AAACGGGGTCGGCATC-1_4..  0.370988   Control
AAAGATGCAGCGTCCA-1_4341_BA46 AAAGATGCAGCGTCCA-1_4..  0.264564   Control
AAAGATGGTCCGAATT-1_4341_BA46 AAAGATGGTCCGAATT-1_4..  0.188127   Control
AAAGTAGAGCTGTTCA-1_4341_BA46 AAAGTAGAGCTGTTCA-1_4..  0.104817   Control
...                                             ...       ...       ...
TTGACTTAGTGTACGG-1_6033_BA9  TTGACTTAGTGTACGG-1_6..  0.250928       ASD
TTGTAGGGTCTCCCTA-1_6033_BA9  TTGTAGGGTCTCCCTA-1_6..  0.191952       ASD
TTTATGCTCGTTACAG-1_6033_BA9  TTTATGCTCGTTACAG-1_6..  0.301646       ASD
TTTCCTCTCTCGCTTG-1_6033_BA9  TTTCCTCTCTCGCTTG-1_6..  0.311568       ASD
TTTGGTTCACTTAAGC-1_6033_BA9  TTTGGTTCACTTAAGC-1_6..  0.153872       ASD
                                  ind       RIN
                             <factor> <numeric>
AAACCTGCACCCATTC-1_4341_BA46     4341       7.2
AAACGGGGTCGGCATC-1_4341_BA46     4341       7.2
AAAGATGCAGCGTCCA-1_4341_BA46     4341       7.2
AAAGATGGTCCGAATT-1_4341_BA46     4341       7.2
AAAGTAGAGCTGTTCA-1_4341_BA46     4341       7.2
...                               ...       ...
TTGACTTAGTGTACGG-1_6033_BA9      6033         8
TTGTAGGGTCTCCCTA-1_6033_BA9      6033         8
TTTATGCTCGTTACAG-1_6033_BA9      6033         8
TTTCCTCTCTCGCTTG-1_6033_BA9      6033         8
TTTGGTTCACTTAAGC-1_6033_BA9      6033         8
> 
> #sca=sca[1:10,]
> 
> rm(dat1_log)
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   6138256  327.9   10218798  545.8         NA   8557859  457.1
Vcells 144320302 1101.1  444464528 3391.0      65536 539876346 4119.0
> 
> registerDoParallel(cores=nCore)
> options(mc.cores=nCore)
> getOption("mc.cores")
[1] 4
> 
> date()
[1] "Mon Nov  1 11:11:40 2021"
> b0 = zlm(formula = ~ diagnosis + cngeneson + RIN, sca = sca, 
+          parallel = TRUE)

Done!
> date()
[1] "Mon Nov  1 11:12:54 2021"
> b1 = zlm(formula = ~ diagnosis + (1 | ind) + cngeneson + RIN, sca = sca, 
+          method = 'glmer', ebayes = FALSE, parallel = TRUE)

Done!
> date()
[1] "Mon Nov  1 11:58:52 2021"
> 
> b0
Fitted zlm on 8260 genes and 8626 cells.
 Using BayesGLMlike ~ diagnosis + cngeneson + RIN 
> b1
Fitted zlm on 8260 genes and 8626 cells.
 Using LMERlike ~ diagnosis + (1 | ind) + cngeneson + RIN 
> 
> date()
[1] "Mon Nov  1 11:58:52 2021"
> lrt0 = lrTest(b0, "diagnosis")
Refitting on reduced model...

Done!
> date()
[1] "Mon Nov  1 11:59:49 2021"
> lrt1 = lrTest(b1, "diagnosis")
Refitting on reduced model...

Done!
> date()
[1] "Mon Nov  1 19:28:10 2021"
> 
> dim(lrt0)
[1] 8260    3    3
> lrt0[1,,]
         metric
test.type   lambda df   Pr(>Chisq)
   cont   35.55727  1 2.476607e-09
   disc   10.71474  1 1.062854e-03
   hurdle 46.27201  2 8.956947e-11
> 
> dim(lrt1)
[1] 8260    3    3
> lrt1[1,,]
         metric
test.type    lambda df  Pr(>Chisq)
   cont    8.232055  1 0.004115689
   disc    4.343105  1 0.037159092
   hurdle 12.575161  2 0.001859253
> 
> mast_pval_glm = apply(lrt0, 1, function(x){x[3,3]})
> length(mast_pval_glm)
[1] 8260
> mast_pval_glm[1:4]
     DNAJC11       VPS13D         PER3        KIF1B 
8.956947e-11 8.383240e-05 7.431071e-07 3.305621e-03 
> 
> mast_pval_glmer = apply(lrt1, 1, function(x){x[3,3]})
> length(mast_pval_glmer)
[1] 8260
> mast_pval_glmer[1:4]
    DNAJC11      VPS13D        PER3       KIF1B 
0.001859253 0.019459708 0.029678972 0.502813504 
> 
> # ------------------------------------------------------------------------
> # summarize p-value distribution
> # ------------------------------------------------------------------------
> 
> pdf(sprintf("figures/step1b_subset_MAST_%s_compare_pval_Seq.pdf", grp), 
+     width=9, height=3)
> par(mfrow=c(1,3), bty="n", mar=c(5,4,1,1))
> hist(mast_pval_glm, main="MAST glm", xlab="p-value")
> hist(mast_pval_glmer, main="MAST glmer", xlab="p-value")
> plot(-log10(mast_pval_glm), -log10(mast_pval_glmer), main="-log10(p-value)", 
+      xlab="MAST glm", ylab="MAST glmer", 
+      pch=20, cex=0.2, col=rgb(0.8, 0.1, 0.1, 0.5))
> abline(0, 1, col="darkblue")
> dev.off()
null device 
          1 
> # ------------------------------------------------------------------------
> # save the results
> # ------------------------------------------------------------------------
> 
> 
> fwrite(data.frame(mast_pval_glm), 
+        file=sprintf("res/step1b_subset_MAST_%s_glm.tsv", grp), 
+        sep = "\t", row.names=TRUE, col.names=FALSE)
> 
> fwrite(data.frame(mast_pval_glmer), 
+        file=sprintf("res/step1b_subset_MAST_%s_glmer.tsv", grp), 
+             sep = "\t", row.names=TRUE, col.names=FALSE)
> 
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   6299114  336.5   10218798  545.8         NA  10218798  545.8
Vcells 147066528 1122.1  444464528 3391.0      65536 539876346 4119.0
> 
> sessionInfo()
R version 4.1.0 (2021-05-18)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] doRNG_1.8.2                 rngtools_1.5               
 [3] doParallel_1.0.16           iterators_1.0.13           
 [5] foreach_1.5.1               lme4_1.1-27.1              
 [7] MAST_1.18.0                 SingleCellExperiment_1.14.1
 [9] SummarizedExperiment_1.22.0 Biobase_2.52.0             
[11] GenomicRanges_1.44.0        GenomeInfoDb_1.28.4        
[13] IRanges_2.26.0              S4Vectors_0.30.0           
[15] BiocGenerics_0.38.0         MatrixGenerics_1.4.3       
[17] matrixStats_0.61.0          dplyr_1.0.7                
[19] data.table_1.14.0           Matrix_1.3-3               

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.7             lattice_0.20-44        prettyunits_1.1.1     
 [4] assertthat_0.2.1       digest_0.6.27          utf8_1.2.1            
 [7] R6_2.5.0               plyr_1.8.6             ggplot2_3.3.5         
[10] pillar_1.6.1           progress_1.2.2         zlibbioc_1.38.0       
[13] rlang_0.4.11           minqa_1.2.4            nloptr_1.2.2.2        
[16] splines_4.1.0          stringr_1.4.0          RCurl_1.98-1.5        
[19] munsell_0.5.0          DelayedArray_0.18.0    compiler_4.1.0        
[22] pkgconfig_2.0.3        tidyselect_1.1.1       tibble_3.1.2          
[25] GenomeInfoDbData_1.2.6 codetools_0.2-18       fansi_0.5.0           
[28] crayon_1.4.1           MASS_7.3-54            bitops_1.0-7          
[31] grid_4.1.0             nlme_3.1-152           gtable_0.3.0          
[34] lifecycle_1.0.0        DBI_1.1.1              magrittr_2.0.1        
[37] scales_1.1.1           stringi_1.6.2          XVector_0.32.0        
[40] reshape2_1.4.4         ellipsis_0.3.2         generics_0.1.0        
[43] vctrs_0.3.8            boot_1.3-28            tools_4.1.0           
[46] glue_1.4.2             purrr_0.3.4            hms_1.1.0             
[49] abind_1.4-5            colorspace_2.0-2      
> q(save="no")
> proc.time()
     user    system   elapsed 
13849.497  5459.688 29807.712 
