
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(Matrix)
> library(data.table)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:data.table’:

    between, first, last

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(DESeq2)
Loading required package: S4Vectors
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:dplyr’:

    combine, intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min


Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:dplyr’:

    first, rename

The following objects are masked from ‘package:data.table’:

    first, second

The following objects are masked from ‘package:Matrix’:

    expand, unname

The following objects are masked from ‘package:base’:

    expand.grid, I, unname

Loading required package: IRanges

Attaching package: ‘IRanges’

The following objects are masked from ‘package:dplyr’:

    collapse, desc, slice

The following object is masked from ‘package:data.table’:

    shift

Loading required package: GenomicRanges
Loading required package: GenomeInfoDb
Loading required package: SummarizedExperiment
Loading required package: MatrixGenerics
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following object is masked from ‘package:dplyr’:

    count


Attaching package: ‘MatrixGenerics’

The following objects are masked from ‘package:matrixStats’:

    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,
    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,
    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,
    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,
    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,
    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,
    colWeightedMeans, colWeightedMedians, colWeightedSds,
    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,
    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,
    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,
    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,
    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,
    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,
    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,
    rowWeightedSds, rowWeightedVars

Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘Biobase’

The following object is masked from ‘package:MatrixGenerics’:

    rowMedians

The following objects are masked from ‘package:matrixStats’:

    anyMissing, rowMedians

Warning messages:
1: package ‘GenomeInfoDb’ was built under R version 4.1.1 
2: package ‘MatrixGenerics’ was built under R version 4.1.1 
> 
> 
> data.dir = "data"
> 
> args=(commandArgs(TRUE))
> args
[1] "grp='PFC_L4'"
> 
> if (length(args) != 1) {
+   message("one argument is expected, use 'PFC_L2_3' as default.\n")
+   grp = "PFC_L2_3"
+ }else{
+   eval(parse(text=args[[1]]))
+ }
> 
> grp
[1] "PFC_L4"
> 
> # ------------------------------------------------------------------------
> # read in cell information
> # ------------------------------------------------------------------------
> 
> cell_info = fread(file.path(data.dir, "meta.tsv"))
> dim(cell_info)
[1] 104559     16
> cell_info[1:2,]
                           cell     cluster    sample individual region age sex
1: AAACCTGGTACGCACC-1_1823_BA24 Neu-NRGN-II 1823_BA24       1823    ACC  15   M
2: AAACGGGCACCAGATT-1_1823_BA24        L5/6 1823_BA24       1823    ACC  15   M
   diagnosis Capbatch Seqbatch post-mortem interval (hours)
1:   Control      CB8      SB3                           18
2:   Control      CB8      SB3                           18
   RNA Integrity Number genes  UMIs RNA mitochondr. percent
1:                    7   622   774               2.4547804
2:                    7  6926 24042               0.4450545
   RNA ribosomal percent
1:             1.4211886
2:             0.4284169
> 
> table(cell_info$region)

  ACC   PFC 
42393 62166 
> 
> cell_info = cell_info[which(cell_info$region=="PFC"),]
> 
> sort(table(paste(cell_info$diagnosis, cell_info$sample, sep=":")))

         ASD:5978_BA9      Control:5976_BA9          ASD:5403_PFC 
                  926                  1054                  1112 
Control:5879_PFC_Nova          ASD:6033_BA9          ASD:5419_PFC 
                 1850                  1970                  1972 
Control:5936_PFC_Nova          ASD:5144_PFC      Control:5958_BA9 
                 2033                  2047                  2083 
         ASD:5864_BA9 Control:5408_PFC_Nova          ASD:5565_BA9 
                 2148                  2255                  2319 
         ASD:5945_PFC          ASD:5294_BA9          ASD:5278_PFC 
                 2522                  2568                  2819 
Control:5538_PFC_Nova          ASD:5531_BA9          ASD:5939_BA9 
                 3034                  3054                  3085 
     Control:5893_PFC     Control:4341_BA46      Control:5577_BA9 
                 3317                  3849                  4131 
         ASD:5841_BA9      Control:5387_BA9 
                 5477                  6541 
> 
> # ------------------------------------------------------------------------
> # read in count data of one region and one cluster
> # ------------------------------------------------------------------------
> 
> dat1 = readRDS(file.path(data.dir, sprintf("ct_mtx/%s.rds", grp)))
> dim(dat1)
[1] 18041  5109
> class(dat1)
[1] "dgCMatrix"
attr(,"package")
[1] "Matrix"
> dat1[1:5,1:4]
5 x 4 sparse Matrix of class "dgCMatrix"
         AAAGCAATCTGCTTGC-1_4341_BA46 AACGTTGTCCCACTTG-1_4341_BA46
DNAJC11                             1                            .
NADK                                .                            .
MASP2                               .                            .
CLCN6                               .                            .
TNFRSF1B                            .                            .
         AACTCAGAGCACCGTC-1_4341_BA46 AACTCCCCACCAGTTA-1_4341_BA46
DNAJC11                             .                            1
NADK                                .                            .
MASP2                               .                            .
CLCN6                               .                            .
TNFRSF1B                            .                            .
> 
> # ------------------------------------------------------------------------
> # subset cell information
> # ------------------------------------------------------------------------
> 
> table(colnames(dat1) %in% cell_info$cell)

TRUE 
5109 
> meta = cell_info[match(colnames(dat1), cell_info$cell),]
> dim(meta)
[1] 5109   16
> meta[1:2,]
                           cell cluster    sample individual region age sex
1: AAAGCAATCTGCTTGC-1_4341_BA46      L4 4341_BA46       4341    PFC  13   M
2: AACGTTGTCCCACTTG-1_4341_BA46      L4 4341_BA46       4341    PFC  13   M
   diagnosis Capbatch Seqbatch post-mortem interval (hours)
1:   Control      CB6      SB2                           16
2:   Control      CB6      SB2                           16
   RNA Integrity Number genes UMIs RNA mitochondr. percent
1:                  7.2  3730 9318               1.0409959
2:                  7.2  4097 9606               0.5309182
   RNA ribosomal percent
1:             0.4614724
2:             1.0410160
> 
> summary(meta$UMIs/meta$genes)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.252   1.968   2.278   2.296   2.578   5.318 
> 
> # check each individual has a unique sample
> table(tapply(meta$sample, meta$individual, function(v){length(unique(v))}))

 1 
23 
> 
> # check each individual has a unique Capbatch
> table(tapply(meta$Capbatch, meta$individual, function(v){length(unique(v))}))

 1 
23 
> 
> table(meta$cluster)

  L4 
5109 
> table(meta$region)

 PFC 
5109 
> 
> sort(table(paste(meta$diagnosis, meta$sample, sep=":")))

     Control:5976_BA9          ASD:5403_PFC          ASD:5144_PFC 
                   75                    77                    86 
         ASD:5294_BA9          ASD:5978_BA9 Control:5936_PFC_Nova 
                  103                   104                   104 
Control:5879_PFC_Nova      Control:5958_BA9 Control:5538_PFC_Nova 
                  158                   162                   170 
Control:5408_PFC_Nova          ASD:5864_BA9          ASD:5419_PFC 
                  172                   177                   181 
         ASD:5531_BA9          ASD:5565_BA9          ASD:5278_PFC 
                  191                   192                   210 
     Control:5893_PFC          ASD:5945_PFC     Control:4341_BA46 
                  226                   233                   297 
     Control:5577_BA9          ASD:6033_BA9          ASD:5841_BA9 
                  310                   385                   460 
         ASD:5939_BA9      Control:5387_BA9 
                  465                   571 
> 
> # ------------------------------------------------------------------------
> # generate individual level information
> # ------------------------------------------------------------------------
> 
> meta_ind = distinct(meta[,3:12])
> dim(meta_ind)
[1] 23 10
> meta_ind[1:2,]
      sample individual region age sex diagnosis Capbatch Seqbatch
1: 4341_BA46       4341    PFC  13   M   Control      CB6      SB2
2:  5144_PFC       5144    PFC   7   M       ASD      CB1      SB1
   post-mortem interval (hours) RNA Integrity Number
1:                           16                  7.2
2:                            3                  8.0
> names(meta_ind)[9:10] = c("PMI", "RIN")
> 
> length(unique(meta$individual))
[1] 23
> 
> if(nrow(meta_ind) != length(unique(meta$individual))){
+   stop("there is non-unique information\n")
+ }
> 
> table(meta_ind$Seqbatch, meta_ind$Capbatch)
     
      CB1 CB2 CB6 CB7
  SB1   6   4   0   0
  SB2   0   0   7   6
> 
> # ------------------------------------------------------------------------
> # collect count data
> # ------------------------------------------------------------------------
> 
> trec1 = matrix(NA, nrow=nrow(dat1), ncol=nrow(meta_ind))
> colnames(trec1) = meta_ind$sample
> rownames(trec1) = rownames(dat1)
> dim(trec1)
[1] 18041    23
> trec1[1:2,1:3]
        4341_BA46 5144_PFC 5278_PFC
DNAJC11        NA       NA       NA
NADK           NA       NA       NA
> 
> for(i in 1:ncol(trec1)){
+   wi = which(meta$sample == meta_ind$sample[i])
+   trec1[,i] = rowSums(dat1[,wi])
+ }
> 
> dim(trec1)
[1] 18041    23
> trec1[1:2,1:3]
        4341_BA46 5144_PFC 5278_PFC
DNAJC11       101       15       67
NADK           23        5        2
> 
> # ------------------------------------------------------------------------
> # run DESeq2
> # ------------------------------------------------------------------------
> 
> colData = meta_ind
> for(i in 1:ncol(colData)){
+   if(is.character(colData[[i]])){
+     colData[[i]] = as.factor(colData[[i]])
+   }
+ }
> dim(colData)
[1] 23 10
> colData[1:2,]
      sample individual region age sex diagnosis Capbatch Seqbatch PMI RIN
1: 4341_BA46       4341    PFC  13   M   Control      CB6      SB2  16 7.2
2:  5144_PFC       5144    PFC   7   M       ASD      CB1      SB1   3 8.0
> summary(colData)
       sample     individual   region        age        sex      diagnosis 
 4341_BA46: 1   Min.   :4341   PFC:23   Min.   : 4.00   F: 6   ASD    :13  
 5144_PFC : 1   1st Qu.:5406            1st Qu.:12.00   M:17   Control:10  
 5278_PFC : 1   Median :5577            Median :15.00                      
 5294_BA9 : 1   Mean   :5614            Mean   :15.04                      
 5387_BA9 : 1   3rd Qu.:5938            3rd Qu.:19.00                      
 5403_PFC : 1   Max.   :6033            Max.   :22.00                      
 (Other)  :17                                                              
 Capbatch Seqbatch      PMI             RIN       
 CB1:6    SB1:10   Min.   : 3.00   Min.   :6.500  
 CB2:4    SB2:13   1st Qu.:16.00   1st Qu.:7.350  
 CB6:7             Median :21.00   Median :7.600  
 CB7:6             Mean   :20.74   Mean   :7.713  
                   3rd Qu.:24.00   3rd Qu.:8.150  
                   Max.   :42.00   Max.   :9.000  
                                                  
> 
> colData$diagnosis = factor(colData$diagnosis, levels=c("Control", "ASD"))
> 
> dd0 = DESeqDataSetFromMatrix(countData = trec1, 
+                              colData = colData,
+                              design = ~ diagnosis)
converting counts to integer mode
> dd0  = DESeq(dd0)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
final dispersion estimates
fitting model and testing
-- replacing outliers and refitting for 12 genes
-- DESeq argument 'minReplicatesForReplace' = 7 
-- original counts are preserved in counts(dds)
estimating dispersions
fitting model and testing
> res0 = results(dd0)
> dim(res0)
[1] 18041     6
> head(res0)
log2 fold change (MLE): diagnosis ASD vs Control 
Wald test p-value: diagnosis ASD vs Control 
DataFrame with 6 rows and 6 columns
          baseMean log2FoldChange     lfcSE      stat    pvalue      padj
         <numeric>      <numeric> <numeric> <numeric> <numeric> <numeric>
DNAJC11   60.17714     -0.2581363  0.149003 -1.732427 0.0831975  0.781335
NADK       8.31071     -0.3810449  0.298363 -1.277118 0.2015606  0.840675
MASP2     11.20322      0.0649684  0.355872  0.182561 0.8551424  0.987580
CLCN6     19.96098     -0.1974267  0.224270 -0.880308 0.3786924  0.901314
TNFRSF1B   2.14877     -0.3881398  0.490276 -0.791676 0.4285499  0.912663
THAP3     12.13242     -0.2191873  0.269164 -0.814326 0.4154579  0.908849
> summary(res0)

out of 18041 with nonzero total read count
adjusted p-value < 0.1
LFC > 0 (up)       : 0, 0%
LFC < 0 (down)     : 0, 0%
outliers [1]       : 0, 0%
low counts [2]     : 0, 0%
(mean count < 0)
[1] see 'cooksCutoff' argument of ?results
[2] see 'independentFiltering' argument of ?results

> 
> 
> table(meta_ind$Seqbatch, meta_ind$Capbatch)
     
      CB1 CB2 CB6 CB7
  SB1   6   4   0   0
  SB2   0   0   7   6
> table(meta_ind$Seqbatch, meta_ind$diagnosis)
     
      ASD Control
  SB1   5       5
  SB2   8       5
> 
> date()
[1] "Fri Nov  5 14:09:41 2021"
> dds = DESeqDataSetFromMatrix(countData = trec1, 
+                              colData = colData,
+                              design = ~ age + sex + Seqbatch + RIN + diagnosis)
converting counts to integer mode
  the design formula contains one or more numeric variables with integer values,
  specifying a model with increasing fold change for higher values.
  did you mean for this to be a factor? if so, first convert
  this variable to a factor using the factor() function
  the design formula contains one or more numeric variables that have mean or
  standard deviation larger than 5 (an arbitrary threshold to trigger this message).
  Including numeric variables with large mean can induce collinearity with the intercept.
  Users should center and scale numeric variables in the design to improve GLM convergence.
> dds = DESeq(dds)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
final dispersion estimates
fitting model and testing
3 rows did not converge in beta, labelled in mcols(object)$betaConv. Use larger maxit argument with nbinomWaldTest
> 
> date()
[1] "Fri Nov  5 14:09:51 2021"
> res = results(dds)
> dim(res)
[1] 18041     6
> head(res)
log2 fold change (MLE): diagnosis ASD vs Control 
Wald test p-value: diagnosis ASD vs Control 
DataFrame with 6 rows and 6 columns
          baseMean log2FoldChange     lfcSE       stat    pvalue      padj
         <numeric>      <numeric> <numeric>  <numeric> <numeric> <numeric>
DNAJC11   60.17714     -0.2411653  0.142673 -1.6903350 0.0909639  0.687273
NADK       8.31071     -0.4057900  0.301767 -1.3447139 0.1787177  0.756764
MASP2     11.20322      0.0291955  0.363873  0.0802356 0.9360498  0.991578
CLCN6     19.96098     -0.1400712  0.193628 -0.7234043 0.4694315  0.912199
TNFRSF1B   2.14877     -0.1651682  0.488630 -0.3380231 0.7353458  0.965381
THAP3     12.13242     -0.3848498  0.248505 -1.5486628 0.1214628  0.718779
> summary(res)

out of 18041 with nonzero total read count
adjusted p-value < 0.1
LFC > 0 (up)       : 4, 0.022%
LFC < 0 (down)     : 5, 0.028%
outliers [1]       : 0, 0%
low counts [2]     : 0, 0%
(mean count < 0)
[1] see 'cooksCutoff' argument of ?results
[2] see 'independentFiltering' argument of ?results

> 
> date()
[1] "Fri Nov  5 14:09:51 2021"
> nms = resultsNames(dds)
> nms
[1] "Intercept"                "age"                     
[3] "sex_M_vs_F"               "Seqbatch_SB2_vs_SB1"     
[5] "RIN"                      "diagnosis_ASD_vs_Control"
> nms = nms[-1]
> 
> pvals2 = matrix(NA, nrow=nrow(trec1), ncol=length(nms))
> 
> for(k in 1:length(nms)){
+   rk = results(dds, name=nms[k])
+   pvals2[,k] = rk$pvalue
+ }
> 
> date()
[1] "Fri Nov  5 14:09:52 2021"
> 
> colnames(pvals2) = nms
> dim(pvals2)
[1] 18041     5
> head(pvals2)
           age sex_M_vs_F Seqbatch_SB2_vs_SB1        RIN
[1,] 0.5499855 0.21907379         0.299010606 0.52083945
[2,] 0.2764253 0.91861008         0.389287917 0.78914927
[3,] 0.4521016 0.97817119         0.309679766 0.32458829
[4,] 0.8363525 0.88087165         0.005473254 0.06486862
[5,] 0.3362988 0.29052492         0.259549882 0.80754952
[6,] 0.2203984 0.06509889         0.034137716 0.21071359
     diagnosis_ASD_vs_Control
[1,]               0.09096387
[2,]               0.17871765
[3,]               0.93604984
[4,]               0.46943150
[5,]               0.73534579
[6,]               0.12146281
> summary(pvals2)
      age           sex_M_vs_F     Seqbatch_SB2_vs_SB1      RIN         
 Min.   :0.0000   Min.   :0.0000   Min.   :0.000000    Min.   :0.00000  
 1st Qu.:0.2290   1st Qu.:0.1244   1st Qu.:0.003584    1st Qu.:0.09788  
 Median :0.4912   Median :0.3628   Median :0.073527    Median :0.35129  
 Mean   :0.4894   Mean   :0.4065   Mean   :0.227176    Mean   :0.39643  
 3rd Qu.:0.7477   3rd Qu.:0.6630   3rd Qu.:0.385839    3rd Qu.:0.66333  
 Max.   :1.0000   Max.   :0.9999   Max.   :0.999916    Max.   :0.99992  
 diagnosis_ASD_vs_Control
 Min.   :0.0000001       
 1st Qu.:0.1938288       
 Median :0.4524510       
 Mean   :0.4642811       
 3rd Qu.:0.7226564       
 Max.   :0.9999199       
> 
> pdf(sprintf("figures/step1b_DESeq2_%s_pval_hist_final.pdf", grp), 
+     width=9, height=6)
> par(mfrow=c(2,3), bty="n", mar=c(5,4,2,1))
> for(k in 1:length(nms)){
+   hist(pvals2[,k], main=nms[k], xlab="p-value", breaks=50)
+ }
> 
> dev.off()
null device 
          1 
> 
> 
> 
> # ------------------------------------------------------------------------
> # summarize p-value distribution
> # ------------------------------------------------------------------------
> 
> pdf(sprintf("figures/step1b_DESeq2_%s_compare_pval_Seq.pdf", grp), 
+     width=9, height=3)
> par(mfrow=c(1,3), bty="n", mar=c(5,4,1,1))
> hist(res0$pvalue, main="without covariates", xlab="p-value")
> hist(res$pvalue, main="with covariates (Seq)", xlab="p-value")
> plot(-log10(res0$pvalue), -log10(res$pvalue), main="-log10(p-value)", 
+      xlab="without covariates", ylab="with covariates (Seq)", 
+      pch=20, cex=0.2, col=rgb(0.8, 0.1, 0.1, 0.5))
> abline(0, 1, col="darkblue")
> dev.off()
null device 
          1 
> 
> 
> 
> # ------------------------------------------------------------------------
> # save the results
> # ------------------------------------------------------------------------
> 
> dim(res0)
[1] 18041     6
> res0[1:2,]
log2 fold change (MLE): diagnosis ASD vs Control 
Wald test p-value: diagnosis ASD vs Control 
DataFrame with 2 rows and 6 columns
         baseMean log2FoldChange     lfcSE      stat    pvalue      padj
        <numeric>      <numeric> <numeric> <numeric> <numeric> <numeric>
DNAJC11  60.17714      -0.258136  0.149003  -1.73243 0.0831975  0.781335
NADK      8.31071      -0.381045  0.298363  -1.27712 0.2015606  0.840675
> 
> dim(res)
[1] 18041     6
> res[1:2,]
log2 fold change (MLE): diagnosis ASD vs Control 
Wald test p-value: diagnosis ASD vs Control 
DataFrame with 2 rows and 6 columns
         baseMean log2FoldChange     lfcSE      stat    pvalue      padj
        <numeric>      <numeric> <numeric> <numeric> <numeric> <numeric>
DNAJC11  60.17714      -0.241165  0.142673  -1.69034 0.0909639  0.687273
NADK      8.31071      -0.405790  0.301767  -1.34471 0.1787177  0.756764
> 
> res0 = as.data.frame(res0)
> res  = as.data.frame(res)
> 
> 
> fwrite(res0, file=sprintf("res/step1b_DESeq2_%s_no_covariates.tsv", grp), 
+        sep = "\t")
> 
> fwrite(res, file=sprintf("res/step1b_DESeq2_%s_adj_covariates.tsv", grp), 
+             sep = "\t")
> 
> gc()
           used  (Mb) gc trigger  (Mb) limit (Mb) max used  (Mb)
Ncells  6805850 363.5   10196408 544.6         NA 10196408 544.6
Vcells 46343099 353.6   73314825 559.4      65536 73309205 559.4
> 
> 
> sessionInfo()
R version 4.1.0 (2021-05-18)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] DESeq2_1.32.0               SummarizedExperiment_1.22.0
 [3] Biobase_2.52.0              MatrixGenerics_1.4.3       
 [5] matrixStats_0.61.0          GenomicRanges_1.44.0       
 [7] GenomeInfoDb_1.28.4         IRanges_2.26.0             
 [9] S4Vectors_0.30.0            BiocGenerics_0.38.0        
[11] dplyr_1.0.7                 data.table_1.14.0          
[13] Matrix_1.3-3               

loaded via a namespace (and not attached):
 [1] locfit_1.5-9.4         Rcpp_1.0.7             lattice_0.20-44       
 [4] png_0.1-7              Biostrings_2.60.2      assertthat_0.2.1      
 [7] utf8_1.2.1             R6_2.5.0               RSQLite_2.2.8         
[10] httr_1.4.2             ggplot2_3.3.5          pillar_1.6.1          
[13] zlibbioc_1.38.0        rlang_0.4.11           rstudioapi_0.13       
[16] annotate_1.70.0        blob_1.2.2             splines_4.1.0         
[19] BiocParallel_1.26.2    geneplotter_1.70.0     RCurl_1.98-1.5        
[22] bit_4.0.4              munsell_0.5.0          DelayedArray_0.18.0   
[25] compiler_4.1.0         pkgconfig_2.0.3        tidyselect_1.1.1      
[28] KEGGREST_1.32.0        tibble_3.1.2           GenomeInfoDbData_1.2.6
[31] XML_3.99-0.8           fansi_0.5.0            crayon_1.4.1          
[34] bitops_1.0-7           grid_4.1.0             xtable_1.8-4          
[37] gtable_0.3.0           lifecycle_1.0.0        DBI_1.1.1             
[40] magrittr_2.0.1         scales_1.1.1           cachem_1.0.5          
[43] XVector_0.32.0         genefilter_1.74.0      ellipsis_0.3.2        
[46] generics_0.1.0         vctrs_0.3.8            RColorBrewer_1.1-2    
[49] tools_4.1.0            bit64_4.0.5            glue_1.4.2            
[52] purrr_0.3.4            fastmap_1.1.0          survival_3.2-11       
[55] colorspace_2.0-2       AnnotationDbi_1.54.1   memoise_2.0.0         
> q(save="no")
> proc.time()
   user  system elapsed 
 27.162   0.562  27.719 
