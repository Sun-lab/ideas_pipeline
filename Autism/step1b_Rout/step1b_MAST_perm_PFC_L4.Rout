
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(Matrix)
> library(data.table)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:data.table’:

    between, first, last

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(MAST)
Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: MatrixGenerics
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following object is masked from ‘package:dplyr’:

    count


Attaching package: ‘MatrixGenerics’

The following objects are masked from ‘package:matrixStats’:

    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,
    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,
    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,
    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,
    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,
    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,
    colWeightedMeans, colWeightedMedians, colWeightedSds,
    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,
    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,
    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,
    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,
    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,
    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,
    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,
    rowWeightedSds, rowWeightedVars

Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:dplyr’:

    combine, intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:dplyr’:

    first, rename

The following objects are masked from ‘package:data.table’:

    first, second

The following object is masked from ‘package:Matrix’:

    expand

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges

Attaching package: ‘IRanges’

The following objects are masked from ‘package:dplyr’:

    collapse, desc, slice

The following object is masked from ‘package:data.table’:

    shift

Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘Biobase’

The following object is masked from ‘package:MatrixGenerics’:

    rowMedians

The following objects are masked from ‘package:matrixStats’:

    anyMissing, rowMedians

> library(lme4)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> library(foreach)
> library(doRNG)
Loading required package: rngtools
> 
> 
> data.dir = "data"
> nCore = 4
> 
> args=(commandArgs(TRUE))
> args
[1] "grp='PFC_L4'"
> 
> if (length(args) != 1) {
+   message("one argument is expected, use 'PFC_L2_3' as default.\n")
+   grp = "PFC_L2_3"
+ }else{
+   eval(parse(text=args[[1]]))
+ }
> 
> grp
[1] "PFC_L4"
> 
> # ------------------------------------------------------------------------
> # read in cell information
> # ------------------------------------------------------------------------
> 
> cell_info = fread(file.path(data.dir, "meta.tsv"))
> dim(cell_info)
[1] 104559     16
> cell_info[1:2,]
                           cell     cluster    sample individual region age sex
1: AAACCTGGTACGCACC-1_1823_BA24 Neu-NRGN-II 1823_BA24       1823    ACC  15   M
2: AAACGGGCACCAGATT-1_1823_BA24        L5/6 1823_BA24       1823    ACC  15   M
   diagnosis Capbatch Seqbatch post-mortem interval (hours)
1:   Control      CB8      SB3                           18
2:   Control      CB8      SB3                           18
   RNA Integrity Number genes  UMIs RNA mitochondr. percent
1:                    7   622   774               2.4547804
2:                    7  6926 24042               0.4450545
   RNA ribosomal percent
1:             1.4211886
2:             0.4284169
> 
> table(cell_info$region)

  ACC   PFC 
42393 62166 
> 
> cell_info = cell_info[which(cell_info$region=="PFC"),]
> 
> sort(table(paste(cell_info$diagnosis, cell_info$sample, sep=":")))

         ASD:5978_BA9      Control:5976_BA9          ASD:5403_PFC 
                  926                  1054                  1112 
Control:5879_PFC_Nova          ASD:6033_BA9          ASD:5419_PFC 
                 1850                  1970                  1972 
Control:5936_PFC_Nova          ASD:5144_PFC      Control:5958_BA9 
                 2033                  2047                  2083 
         ASD:5864_BA9 Control:5408_PFC_Nova          ASD:5565_BA9 
                 2148                  2255                  2319 
         ASD:5945_PFC          ASD:5294_BA9          ASD:5278_PFC 
                 2522                  2568                  2819 
Control:5538_PFC_Nova          ASD:5531_BA9          ASD:5939_BA9 
                 3034                  3054                  3085 
     Control:5893_PFC     Control:4341_BA46      Control:5577_BA9 
                 3317                  3849                  4131 
         ASD:5841_BA9      Control:5387_BA9 
                 5477                  6541 
> 
> dim(cell_info)
[1] 62166    16
> cell_info[1:2,]
                           cell          cluster    sample individual region
1: AAACCTGAGATGGCGT-1_4341_BA46           AST-PP 4341_BA46       4341    PFC
2: AAACCTGAGCTAACTC-1_4341_BA46 Oligodendrocytes 4341_BA46       4341    PFC
   age sex diagnosis Capbatch Seqbatch post-mortem interval (hours)
1:  13   M   Control      CB6      SB2                           16
2:  13   M   Control      CB6      SB2                           16
   RNA Integrity Number genes UMIs RNA mitochondr. percent
1:                  7.2   792 1121               0.0892061
2:                  7.2   658  928               0.4310345
   RNA ribosomal percent
1:              1.338091
2:              0.862069
> 
> # ------------------------------------------------------------------------
> # read in and attach perm information
> # ------------------------------------------------------------------------
> 
> perm_table = fread(file.path(data.dir, "step1b_permlabel.tsv"),header=TRUE)
> dim(perm_table)
[1] 62166   100
> perm_table[1:2,1:3]
    p1      p2      p3
1: ASD Control Control
2: ASD Control Control
> 
> # check that each individual has one label
> table(tapply(perm_table$p1, cell_info$individual, 
+              function(v){length(unique(v))}))

 1 
23 
> 
> # ------------------------------------------------------------------------
> # read in count data of one region and one cluster
> # ------------------------------------------------------------------------
> 
> dat1 = readRDS(file.path(data.dir, sprintf("ct_mtx/%s.rds", grp)))
> dim(dat1)
[1] 18041  5109
> class(dat1)
[1] "dgCMatrix"
attr(,"package")
[1] "Matrix"
> 
> # ------------------------------------------------------------------------
> # subset cell information
> # ------------------------------------------------------------------------
> 
> table(colnames(dat1) %in% cell_info$cell)

TRUE 
5109 
> meta = cell_info[match(colnames(dat1), cell_info$cell),]
> dim(meta)
[1] 5109   16
> meta[1:2,]
                           cell cluster    sample individual region age sex
1: AAAGCAATCTGCTTGC-1_4341_BA46      L4 4341_BA46       4341    PFC  13   M
2: AACGTTGTCCCACTTG-1_4341_BA46      L4 4341_BA46       4341    PFC  13   M
   diagnosis Capbatch Seqbatch post-mortem interval (hours)
1:   Control      CB6      SB2                           16
2:   Control      CB6      SB2                           16
   RNA Integrity Number genes UMIs RNA mitochondr. percent
1:                  7.2  3730 9318               1.0409959
2:                  7.2  4097 9606               0.5309182
   RNA ribosomal percent
1:             0.4614724
2:             1.0410160
> 
> summary(meta$UMIs/meta$genes)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.252   1.968   2.278   2.296   2.578   5.318 
> 
> perm_table=perm_table[match(colnames(dat1), cell_info$cell),]
> dim(perm_table)
[1] 5109  100
> perm_table[1:2,1:3]
    p1      p2      p3
1: ASD Control Control
2: ASD Control Control
> 
> # check each individual has a unique sample
> table(tapply(meta$sample, meta$individual, function(v){length(unique(v))}))

 1 
23 
> 
> # check each individual has a unique Capbatch
> table(tapply(meta$Capbatch, meta$individual, function(v){length(unique(v))}))

 1 
23 
> 
> table(meta$cluster)

  L4 
5109 
> table(meta$region)

 PFC 
5109 
> 
> sort(table(paste(meta$diagnosis, meta$sample, sep=":")))

     Control:5976_BA9          ASD:5403_PFC          ASD:5144_PFC 
                   75                    77                    86 
         ASD:5294_BA9          ASD:5978_BA9 Control:5936_PFC_Nova 
                  103                   104                   104 
Control:5879_PFC_Nova      Control:5958_BA9 Control:5538_PFC_Nova 
                  158                   162                   170 
Control:5408_PFC_Nova          ASD:5864_BA9          ASD:5419_PFC 
                  172                   177                   181 
         ASD:5531_BA9          ASD:5565_BA9          ASD:5278_PFC 
                  191                   192                   210 
     Control:5893_PFC          ASD:5945_PFC     Control:4341_BA46 
                  226                   233                   297 
     Control:5577_BA9          ASD:6033_BA9          ASD:5841_BA9 
                  310                   385                   460 
         ASD:5939_BA9      Control:5387_BA9 
                  465                   571 
> 
> # ------------------------------------------------------------------------
> # run MAST
> # ------------------------------------------------------------------------
> 
> rds = colSums(dat1)
> med_rds = median(rds)
> summary(rds)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    792    5269    8468    9073   11935   48863 
> med_rds
[1] 8468
> 
> dim(dat1)
[1] 18041  5109
> dat1[1:3,1:6]
3 x 6 sparse Matrix of class "dgCMatrix"
        AAAGCAATCTGCTTGC-1_4341_BA46 AACGTTGTCCCACTTG-1_4341_BA46
DNAJC11                            1                            .
NADK                               .                            .
MASP2                              .                            .
        AACTCAGAGCACCGTC-1_4341_BA46 AACTCCCCACCAGTTA-1_4341_BA46
DNAJC11                            .                            1
NADK                               .                            .
MASP2                              .                            .
        AACTCTTGTAGATTAG-1_4341_BA46 AACTGGTTCCTTCAAT-1_4341_BA46
DNAJC11                            .                            2
NADK                               1                            .
MASP2                              1                            .
> dat1 = t(t(dat1)/rds)*med_rds
> dim(dat1)
[1] 18041  5109
> dat1[1:3,1:6]
3 x 6 sparse Matrix of class "dgCMatrix"
        AAAGCAATCTGCTTGC-1_4341_BA46 AACGTTGTCCCACTTG-1_4341_BA46
DNAJC11                    0.9164502                            .
NADK                       .                                    .
MASP2                      .                                    .
        AACTCAGAGCACCGTC-1_4341_BA46 AACTCCCCACCAGTTA-1_4341_BA46
DNAJC11                            .                    0.4192287
NADK                               .                    .        
MASP2                              .                    .        
        AACTCTTGTAGATTAG-1_4341_BA46 AACTGGTTCCTTCAAT-1_4341_BA46
DNAJC11                     .                           0.6616917
NADK                        0.953711                    .        
MASP2                       0.953711                    .        
> summary(colSums(dat1))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   8468    8468    8468    8468    8468    8468 
> 
> dat1_log = as.matrix(log2(1 + dat1)) #log transformed data
> 
> dim(dat1_log)
[1] 18041  5109
> dat1_log[1:3, 1:4]
        AAAGCAATCTGCTTGC-1_4341_BA46 AACGTTGTCCCACTTG-1_4341_BA46
DNAJC11                    0.9384365                            0
NADK                       0.0000000                            0
MASP2                      0.0000000                            0
        AACTCAGAGCACCGTC-1_4341_BA46 AACTCCCCACCAGTTA-1_4341_BA46
DNAJC11                            0                    0.5051071
NADK                               0                    0.0000000
MASP2                              0                    0.0000000
> cell_id = colnames(dat1_log)   # get the cell id from the data
> gene_id = rownames(dat1_log)   # get the gene id from the data
> 
> fData = data.frame(primerid = gene_id)
> cData = data.frame(wellKey  = cell_id)
> 
> # Cell info for meta
> cell_rd = colSums(dat1)
> CDR     = colSums(dat1 > 0) / nrow(dat1)
> 
> meta_ind = meta[, c("individual", "diagnosis")]
> meta_ind = unique(meta_ind)
> rownames(meta_ind) = meta_ind$individual
> 
> dim(meta)
[1] 5109   16
> meta[1:2,]
                           cell cluster    sample individual region age sex
1: AAAGCAATCTGCTTGC-1_4341_BA46      L4 4341_BA46       4341    PFC  13   M
2: AACGTTGTCCCACTTG-1_4341_BA46      L4 4341_BA46       4341    PFC  13   M
   diagnosis Capbatch Seqbatch post-mortem interval (hours)
1:   Control      CB6      SB2                           16
2:   Control      CB6      SB2                           16
   RNA Integrity Number genes UMIs RNA mitochondr. percent
1:                  7.2  3730 9318               1.0409959
2:                  7.2  4097 9606               0.5309182
   RNA ribosomal percent
1:             0.4614724
2:             1.0410160
> dim(meta_ind)
[1] 23  2
> meta_ind[1:2,]
   individual diagnosis
1:       4341   Control
2:       5144       ASD
> 
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   6013829  321.2    8757747  467.8         NA   7303241  390.1
Vcells 133750592 1020.5  327888623 2501.6      32768 327396912 2497.9
> sca = FromMatrix(dat1_log, cData, fData)
Assuming data assay in position 1, with name et is log-transformed.
> colData(sca)$cngeneson = as.numeric(CDR)
> colData(sca)$diagnosis = as.factor(meta$diagnosis)
> colData(sca)$ind = as.factor(meta$individual)
> colData(sca)$RIN = meta$'RNA Integrity Number'
> colData(sca)
DataFrame with 5109 rows and 5 columns
                                            wellKey cngeneson diagnosis
                                        <character> <numeric>  <factor>
AAAGCAATCTGCTTGC-1_4341_BA46 AAAGCAATCTGCTTGC-1_4..  0.203370   Control
AACGTTGTCCCACTTG-1_4341_BA46 AACGTTGTCCCACTTG-1_4..  0.222937   Control
AACTCAGAGCACCGTC-1_4341_BA46 AACTCAGAGCACCGTC-1_4..  0.239510   Control
AACTCCCCACCAGTTA-1_4341_BA46 AACTCCCCACCAGTTA-1_4..  0.338562   Control
AACTCTTGTAGATTAG-1_4341_BA46 AACTCTTGTAGATTAG-1_4..  0.221218   Control
...                                             ...       ...       ...
TTTATGCCACAAGACG-1_6033_BA9  TTTATGCCACAAGACG-1_6.. 0.0931212       ASD
TTTGCGCAGAGTGACC-1_6033_BA9  TTTGCGCAGAGTGACC-1_6.. 0.2082479       ASD
TTTGCGCTCACTGGGC-1_6033_BA9  TTTGCGCTCACTGGGC-1_6.. 0.2236018       ASD
TTTGCGCTCTACTTAC-1_6033_BA9  TTTGCGCTCTACTTAC-1_6.. 0.1460562       ASD
TTTGGTTCACATTAGC-1_6033_BA9  TTTGGTTCACATTAGC-1_6.. 0.1054265       ASD
                                  ind       RIN
                             <factor> <numeric>
AAAGCAATCTGCTTGC-1_4341_BA46     4341       7.2
AACGTTGTCCCACTTG-1_4341_BA46     4341       7.2
AACTCAGAGCACCGTC-1_4341_BA46     4341       7.2
AACTCCCCACCAGTTA-1_4341_BA46     4341       7.2
AACTCTTGTAGATTAG-1_4341_BA46     4341       7.2
...                               ...       ...
TTTATGCCACAAGACG-1_6033_BA9      6033         8
TTTGCGCAGAGTGACC-1_6033_BA9      6033         8
TTTGCGCTCACTGGGC-1_6033_BA9      6033         8
TTTGCGCTCTACTTAC-1_6033_BA9      6033         8
TTTGGTTCACATTAGC-1_6033_BA9      6033         8
> 
> #sca=sca[1:10,]
> 
> rm(dat1_log)
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   6045337  322.9    8757747  467.8         NA   7303241  390.1
Vcells 133824784 1021.1  439177884 3350.7      32768 365043945 2785.1
> 
> registerDoParallel(cores=nCore)
> options(mc.cores=nCore)
> getOption("mc.cores")
[1] 4
> 
> #start permutation
> iperm=1
> #for(iperm in 1){
>   scap=sca
>   diagnosis=as.factor(data.frame(perm_table)[,iperm])
>   table(diagnosis)
diagnosis
            ASD Control 
    446    2450    2213 
>   scap=scap[,diagnosis!=""]
>   diagnosis=as.character(diagnosis[diagnosis!=""])
>   colData(scap)$diagnosis = as.factor(diagnosis)
>   
>   date()
[1] "Sat Jun 26 21:15:54 2021"
>   b0 = zlm(formula = ~ diagnosis + cngeneson + RIN, sca = scap, 
+            parallel = TRUE)

Done!
>   date()
[1] "Sat Jun 26 21:18:10 2021"
>   b1 = zlm(formula = ~ diagnosis + (1 | ind) + cngeneson + RIN, sca = scap, 
+            method = 'glmer', ebayes = FALSE, parallel = TRUE)
Error : number of levels of each grouping factor must be < number of observations (problems: ind)
In addition: Warning messages:
1: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge with max|grad| = 0.00201551 (tol = 0.002, component 1)
2: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge with max|grad| = 0.00630351 (tol = 0.002, component 1)
3: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge with max|grad| = 0.00205831 (tol = 0.002, component 1)
4: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge with max|grad| = 0.0432041 (tol = 0.002, component 1)
5: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge with max|grad| = 0.00347699 (tol = 0.002, component 1)
6: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge with max|grad| = 0.0024246 (tol = 0.002, component 1)
7: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge with max|grad| = 0.00307946 (tol = 0.002, component 1)
8: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge with max|grad| = 0.00234956 (tol = 0.002, component 1)
9: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge with max|grad| = 0.00200993 (tol = 0.002, component 1)
fixed-effect model matrix is rank deficient so dropping 1 column / coefficient
Error : Dropping columns failed to produce full column rank design matrix
In addition: There were 50 or more warnings (use warnings() to see the first 50)
Error : number of levels of each grouping factor must be < number of observations (problems: ind)
In addition: There were 50 or more warnings (use warnings() to see the first 50)
Error : number of levels of each grouping factor must be < number of observations (problems: ind)
In addition: There were 50 or more warnings (use warnings() to see the first 50)

Done!
>   date()
[1] "Sat Jun 26 22:20:51 2021"
>   
>   b0
Fitted zlm on 18041 genes and 4663 cells.
 Using BayesGLMlike ~ diagnosis + cngeneson + RIN 
>   b1
Fitted zlm on 18041 genes and 4663 cells.
 Using LMERlike ~ diagnosis + (1 | ind) + cngeneson + RIN 
>   
>   date()
[1] "Sat Jun 26 22:20:52 2021"
>   lrt0 = lrTest(b0, "diagnosis")
Refitting on reduced model...

Done!
>   date()
[1] "Sat Jun 26 22:22:57 2021"
>   lrt1 = lrTest(b1, "diagnosis")
Refitting on reduced model...
Error : number of levels of each grouping factor must be < number of observations (problems: ind)
In addition: There were 14 warnings (use warnings() to see them)
Error in (function (cl, name, valueClass)  : 
  assignment of an object of class “list” is not valid for @‘optimMsg’ in an object of class “LMERlike”; is(value, "character") is not TRUE
In addition: There were 50 or more warnings (use warnings() to see the first 50)
Error : number of levels of each grouping factor must be < number of observations (problems: ind)
In addition: There were 50 or more warnings (use warnings() to see the first 50)
Error : number of levels of each grouping factor must be < number of observations (problems: ind)
In addition: There were 50 or more warnings (use warnings() to see the first 50)

Done!
>   date()
[1] "Sat Jun 26 23:11:15 2021"
>   
>   dim(lrt0)
[1] 18041     3     3
>   lrt0[1,,]
         metric
test.type   lambda df Pr(>Chisq)
   cont   0.758411  1 0.38382625
   disc   3.307066  1 0.06898254
   hurdle 4.065477  2 0.13097633
>   
>   dim(lrt1)
[1] 18041     3     3
>   lrt1[1,,]
         metric
test.type      lambda df Pr(>Chisq)
   cont   0.006996349  1  0.9333393
   disc   0.882802903  1  0.3474351
   hurdle 0.889799252  2  0.6408886
>   
>   mast_pval_glm = apply(lrt0, 1, function(x){x[3,3]})
>   length(mast_pval_glm)
[1] 18041
>   mast_pval_glm[1:4]
  DNAJC11      NADK     MASP2     CLCN6 
0.1309763 0.1664484 0.8697377 0.6350862 
>   
>   mast_pval_glmer = apply(lrt1, 1, function(x){x[3,3]})
>   length(mast_pval_glmer)
[1] 18041
>   mast_pval_glmer[1:4]
  DNAJC11      NADK     MASP2     CLCN6 
0.6408886 0.2841624 0.8545870 0.7475923 
>   
> #}
> 
> 
> pdf(sprintf("figures/step1b_MAST_perm_glmer_%s_pval_hist_final.pdf",grp), 
+     width=6, height=3)
> par(mfrow=c(1,2), bty="n", mar=c(5,4,2,1))
>   hist(mast_pval_glm, main="MAST_glm", xlab="p-value", breaks=50)
>   hist(mast_pval_glmer, main="MAST_glmer", xlab="p-value", breaks=50)
> dev.off()
null device 
          1 
> 
> # ------------------------------------------------------------------------
> # summarize p-value distribution
> # ------------------------------------------------------------------------
> 
> pdf(sprintf("figures/step1b_MAST_perm_%s_compare_pval_Seq.pdf", grp), 
+     width=9, height=3)
> par(mfrow=c(1,3), bty="n", mar=c(5,4,1,1))
> hist(mast_pval_glm, main="MAST glm", xlab="p-value")
> hist(mast_pval_glmer, main="MAST glmer", xlab="p-value")
> plot(-log10(mast_pval_glm), -log10(mast_pval_glmer), main="-log10(p-value)", 
+      xlab="MAST glm", ylab="MAST glmer", 
+      pch=20, cex=0.2, col=rgb(0.8, 0.1, 0.1, 0.5))
> abline(0, 1, col="darkblue")
> dev.off()
null device 
          1 
> # ------------------------------------------------------------------------
> # save the results
> # ------------------------------------------------------------------------
> 
> 
> fwrite(data.frame(mast_pval_glm), 
+        file=sprintf("res/step1b_MAST_perm_%s_glm.tsv", grp), 
+        sep = "\t", row.names=TRUE, col.names=FALSE)
> 
> fwrite(data.frame(mast_pval_glmer), 
+        file=sprintf("res/step1b_MAST_perm_%s_glmer.tsv", grp), 
+             sep = "\t", row.names=TRUE, col.names=FALSE)
> 
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   6224441  332.5   11244325  600.6         NA  11244325  600.6
Vcells 221583984 1690.6  680054064 5188.5      32768 680053673 5188.4
> 
> sessionInfo()
R version 4.0.3 (2020-10-10)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] doRNG_1.8.2                 rngtools_1.5               
 [3] doParallel_1.0.16           iterators_1.0.13           
 [5] foreach_1.5.1               lme4_1.1-26                
 [7] MAST_1.16.0                 SingleCellExperiment_1.12.0
 [9] SummarizedExperiment_1.20.0 Biobase_2.50.0             
[11] GenomicRanges_1.42.0        GenomeInfoDb_1.26.2        
[13] IRanges_2.24.1              S4Vectors_0.28.1           
[15] BiocGenerics_0.36.0         MatrixGenerics_1.2.0       
[17] matrixStats_0.57.0          dplyr_1.0.2                
[19] data.table_1.13.6           Matrix_1.3-0               

loaded via a namespace (and not attached):
 [1] progress_1.2.2         statmod_1.4.35         tidyselect_1.1.0      
 [4] purrr_0.3.4            reshape2_1.4.4         splines_4.0.3         
 [7] lattice_0.20-41        colorspace_2.0-0       vctrs_0.3.6           
[10] generics_0.1.0         rlang_0.4.10           pillar_1.4.7          
[13] nloptr_1.2.2.2         glue_1.4.2             GenomeInfoDbData_1.2.4
[16] lifecycle_0.2.0        plyr_1.8.6             stringr_1.4.0         
[19] zlibbioc_1.36.0        munsell_0.5.0          gtable_0.3.0          
[22] codetools_0.2-18       Rcpp_1.0.5             scales_1.1.1          
[25] DelayedArray_0.16.0    XVector_0.30.0         abind_1.4-5           
[28] hms_0.5.3              digest_0.6.27          ggplot2_3.3.3         
[31] stringi_1.5.3          grid_4.0.3             tools_4.0.3           
[34] bitops_1.0-6           magrittr_2.0.1         RCurl_1.98-1.2        
[37] tibble_3.0.4           crayon_1.3.4           pkgconfig_2.0.3       
[40] ellipsis_0.3.1         MASS_7.3-53            prettyunits_1.1.1     
[43] minqa_1.2.4            R6_2.5.0               boot_1.3-25           
[46] nlme_3.1-151           compiler_4.0.3        
> q(save="no")
> proc.time()
    user   system  elapsed 
27049.00   336.25  6942.42 
