
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #########################################################################
> #                                                                       #
> #                                                                       #
> #             Part II: Defferential Expression Analysis                 #
> #                                                                       #
> #                                                                       #
> #########################################################################
> # once simulated genes, we will do the Differential Expression Analysis
> # Here we will implement our method, plus the DESeq2 and the MAST analysis.
> 
> args = commandArgs(trailingOnly=TRUE)
> args
[1] "ncase=20"   "nctrl=20"   "ncell=360"  "r_mean=1.2" "r_var=1.5" 
> 
> if (length(args) < 5) {
+   message("no enough arguments, using default values")
+   r_mean   = 1.2     # The expected fold-changes in mean
+   r_var    = 1.5     # The expected fold-changes in variances
+   ncase    = 13      # case individuals
+   nctrl    = 10      # control individuals
+   ncell    = 360    # numbers of cells collected from each individuals.
+ } else{
+   for(i in 1:length(args)){
+     eval(parse(text=args[[i]]))
+   }
+ }
> 
> if(ncell == 0){
+   UNEQ_N_CELL = TRUE
+ }else{
+   UNEQ_N_CELL = FALSE
+ }
> 
> if(UNEQ_N_CELL){
+   config = sprintf("ncase_%d_nctrl_%d_unequal_n_cell", ncase, nctrl)
+ }else{
+   config = sprintf("ncase_%d_nctrl_%d_ncell_%d", ncase, nctrl, ncell)
+ }
> 
> config = sprintf("%s_fold_mean_%.1f_var_%.1f", config, r_mean, r_var)
> config
[1] "ncase_20_nctrl_20_ncell_360_fold_mean_1.2_var_1.5"
> 
> # ---------------------------------------------------------------
> # additional parameters
> # ---------------------------------------------------------------
> 
> nCore = 6      # number of cores for multi-core computation
> nall  = ncase + nctrl
> 
> # ---------------------------------------------------------------
> # initial setup
> # ---------------------------------------------------------------
> 
> library(MASS)
> library(emdbook)
> library(moments)
> library(MAST)
Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

Loading required package: BiocParallel

Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from ‘package:base’:

    aperm, apply, rowsum


Attaching package: ‘MAST’

The following object is masked from ‘package:stats’:

    filter

> library(lme4)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:S4Vectors’:

    expand

> library(DESeq2)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> library(foreach)
> library(doRNG)
Loading required package: rngtools
> library(MiRKAT)
> library(reticulate)
> library(transport)
> 
> library(data.table)

Attaching package: ‘data.table’

The following object is masked from ‘package:SummarizedExperiment’:

    shift

The following object is masked from ‘package:GenomicRanges’:

    shift

The following object is masked from ‘package:IRanges’:

    shift

The following objects are masked from ‘package:S4Vectors’:

    first, second

> library(pryr)
Registered S3 method overwritten by 'pryr':
  method      from
  print.bytes Rcpp

Attaching package: ‘pryr’

The following object is masked from ‘package:data.table’:

    address

> library(ggplot2)
> library(ggpubr)
Loading required package: magrittr
> theme_set(theme_bw())
> 
> library(ideas)
> 
> registerDoParallel(cores=nCore)
> options(mc.cores=nCore)
> 
> # ---------------------------------------------------------------
> # load data
> # ---------------------------------------------------------------
> 
> sim_data     = readRDS(sprintf("data/sim_data_%s.rds", config))
> count_matrix = sim_data$count_matrix
> meta_cell    = sim_data$meta_cell
> meta_ind     = sim_data$meta_ind
> gene_index   = sim_data$gene_index
> 
> ls()
 [1] "args"         "config"       "count_matrix" "gene_index"   "i"           
 [6] "meta_cell"    "meta_ind"     "nall"         "ncase"        "ncell"       
[11] "nCore"        "nctrl"        "r_mean"       "r_var"        "sim_data"    
[16] "UNEQ_N_CELL" 
> EE_index   = gene_index$EE_index
> mean_index = gene_index$mean_index
> var_index  = gene_index$var_index
> 
> dim(count_matrix)
[1]  8000 14400
> count_matrix[1:3,1:6]
      cell1 cell2 cell3 cell4 cell5 cell6
gene1     1     1     0     1     0     0
gene2     0     1     0     0     2     0
gene3     0     0     0     2     0     1
> 
> dim(meta_cell)
[1] 14400     5
> meta_cell[1:2,]
      cell_id individual phenotype cell_rd      CDR
cell1   cell1       ind1         1    9451 0.442875
cell2   cell2       ind1         1    9471 0.443500
> 
> dim(meta_ind)
[1] 40  3
> meta_ind[1:2,]
     individual phenotype        RIN
ind1       ind1         1 -0.7018300
ind2       ind2         1  0.3460781
> 
> rm(sim_data)
> gc()
            used  (Mb) gc trigger   (Mb) limit (Mb)  max used  (Mb)
Ncells   6940346 370.7   12437792  664.3         NA   9014139 481.5
Vcells 126824916 967.6  184931849 1411.0      32768 126884715 968.1
> 
> # ---------------------------------------------------------------
> # 1. DESeq2 analysis 
> # ---------------------------------------------------------------
> # We calculate count_matrix_bulk by adding up raw counts of
> # all cells of an individual within a gene
> # ---------------------------------------------------------------
> 
> # individual level info
> u_ind = unique(meta_cell$individual)
> length(u_ind)
[1] 40
> u_ind[1:2]
[1] "ind1" "ind2"
> 
> count_matrix_bulk = matrix(nrow = nrow(count_matrix),
+                          ncol = length(u_ind))
> rownames(count_matrix_bulk) = rownames(count_matrix)
> colnames(count_matrix_bulk) = u_ind
> 
> for (i_ind in 1:length(u_ind)) {
+   cur_ind   = u_ind[i_ind]
+   cur_ind_m = count_matrix[, meta_cell$individual == cur_ind]
+   count_matrix_bulk[, i_ind] = rowSums(cur_ind_m, na.rm = TRUE)
+ }
> 
> dim(count_matrix_bulk)
[1] 8000   40
> count_matrix_bulk[1:3,1:5]
      ind1 ind2 ind3 ind4 ind5
gene1  138   54   93   89  133
gene2   64   97   73   65   93
gene3  112   80   80  118   61
> 
> meta_ind$phenotype = as.factor(meta_ind$phenotype)
> dim(meta_ind)
[1] 40  3
> meta_ind[1:2,]
     individual phenotype        RIN
ind1       ind1         1 -0.7018300
ind2       ind2         1  0.3460781
> 
> # DESeq2 for all the genes
> dds = DESeqDataSetFromMatrix(countData = count_matrix_bulk,
+                              colData = meta_ind,
+                              design = ~ RIN + phenotype)
converting counts to integer mode
> 
> dds = DESeq(dds)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
final dispersion estimates
fitting model and testing
> nms = resultsNames(dds)
> nms
[1] "Intercept"        "RIN"              "phenotype_1_vs_0"
> 
> deseq2_pval = results(dds)$pvalue
> 
> rk = results(dds, name="RIN")
> deseq2_pval_RIN = rk$pvalue
> 
> summary(deseq2_pval)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.1646  0.4313  0.4481  0.7175  0.9998 
> summary(deseq2_pval_RIN)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0512  0.2529  0.3384  0.5883  0.9997 
> table(deseq2_pval[EE_index] < 0.05)

FALSE  TRUE 
 5641   359 
> table(deseq2_pval[EE_index] < 0.05)/length(EE_index)

     FALSE       TRUE 
0.94016667 0.05983333 
> 
> # ---------------------------------------------------------------
> # 2. IDEAS 
> # ---------------------------------------------------------------
> 
> var2test      = "phenotype"
> var2adjust    = "RIN"
> var2test_type = "binary"
> var_per_cell  = "cell_rd"
> 
> dist_list = list()
> 
> for(fit_method in c("zinb", "kde")){
+   for(d_metric in c("Was", "JSD")){
+     message(sprintf("fit_method: %s, d_metric: %s\n", fit_method, d_metric))
+     message(date())
+     
+     label = paste(fit_method, d_metric, sep="_")
+     fnm = sprintf("data/dist_%s_%s.rds", label, config)
+     if(file.exists(fnm)){
+       dist_list[[label]] = readRDS(fnm)
+     }else{
+       dist1 = ideas_dist(count_matrix, meta_cell, meta_ind, 
+                          var_per_cell, var2test, var2adjust, 
+                          var2test_type, d_metric = d_metric, 
+                          fit_method = fit_method)
+       dist_list[[label]] = dist1
+       saveRDS(dist1, fnm)
+     }
+   }
+ }
fit_method: zinb, d_metric: Was

Sat Sep 12 00:47:14 2020
the count_matrix includes 8000 genes in 14400 cells

estimating distribution for each gene and each individaul by zinb

fit_method: zinb, d_metric: JSD

Sat Sep 12 03:42:02 2020
the count_matrix includes 8000 genes in 14400 cells

estimating distribution for each gene and each individaul by zinb

fit_method: kde, d_metric: Was

Sat Sep 12 05:58:08 2020
the count_matrix includes 8000 genes in 14400 cells

estimating distribution for each gene and each individaul by kde

fit_method: kde, d_metric: JSD

Sat Sep 12 06:01:38 2020
the count_matrix includes 8000 genes in 14400 cells

estimating distribution for each gene and each individaul by kde

> 
> date()
[1] "Sat Sep 12 06:25:13 2020"
> 
> lapply(dist_list, dim)
$zinb_Was
[1] 8000   40   40

$zinb_JSD
[1] 8000   40   40

$kde_Was
[1] 8000   40   40

$kde_JSD
[1] 8000   40   40

> 
> dist_list$zinb_Was[1,1:3,1:3]
           ind1      ind2       ind3
ind1 0.00000000 0.1715720 0.06893371
ind2 0.17157202 0.0000000 0.10263831
ind3 0.06893371 0.1026383 0.00000000
> dist_list$zinb_JSD[1,1:3,1:3]
            ind1        ind2        ind3
ind1 0.000000000 0.014436942 0.002170273
ind2 0.014436942 0.000000000 0.005564138
ind3 0.002170273 0.005564138 0.000000000
> 
> # ---------------------------------------------------------------
> # STEP 2: pval calculation 
> # ---------------------------------------------------------------
> 
> n_gene = nrow(count_matrix)
> y = as.numeric(meta_ind$phenotype==1)
> 
> pval_KR = matrix(NA, nrow=n_gene, ncol=length(dist_list))
> rownames(pval_KR) = rownames(count_matrix)
> colnames(pval_KR) = paste("KR", names(dist_list), sep="_")
> 
> for(k in 1:length(dist_list)){
+   message(names(dist_list)[k])
+   message(date())
+   dist_k  = dist_list[[k]]
+   pval_KR[,k] = foreach(i_g = 1:dim(dist_k)[1], .combine = "c") %dopar% {
+     Di = dist_k[i_g,,]
+     if(any(is.na(Di))){
+       pval = NA 
+     }else{
+       Ki = D2K(Di)
+       m1 = MiRKAT(y = y, X = meta_ind$RIN, Ks = Ki, out_type = "D", 
+                   method = "permutation")
+       pval = m1$indivP
+     }
+     pval
+   }
+ }
zinb_Was
Sat Sep 12 06:25:13 2020
zinb_JSD
Sat Sep 12 06:25:58 2020
kde_Was
Sat Sep 12 06:26:45 2020
kde_JSD
Sat Sep 12 06:27:32 2020
> date()
[1] "Sat Sep 12 06:28:19 2020"
> 
> dim(pval_KR)
[1] 8000    4
> pval_KR[1:2,]
      KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD
gene1       0.987       0.739      0.898      0.543
gene2       0.427       0.215      0.544      0.637
> 
> 
> n_perm = 999
> r.seed = 903
> 
> pval_PS = matrix(NA, nrow=n_gene, ncol=length(dist_list))
> rownames(pval_PS) = rownames(count_matrix)
> colnames(pval_PS) = names(dist_list)
> colnames(pval_PS) = paste("PS", names(dist_list), sep="_")
> 
> for(k in 1:length(dist_list)){
+   message(names(dist_list)[k])
+   message(date())
+   dist_k  = dist_list[[k]]
+   pval_PS[,k] = permanova(dist_k, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, 
+                           r.seed=r.seed, residulize.x = FALSE)
+ }
zinb_Was
Sat Sep 12 06:28:19 2020
skip 64 gene(s) with NA in the dist_array

testing for 'phenotype', a binary variable

zinb_JSD
Sat Sep 12 06:34:45 2020
skip 64 gene(s) with NA in the dist_array

testing for 'phenotype', a binary variable

kde_Was
Sat Sep 12 06:41:08 2020
testing for 'phenotype', a binary variable

kde_JSD
Sat Sep 12 06:47:33 2020
testing for 'phenotype', a binary variable

> date()
[1] "Sat Sep 12 06:54:06 2020"
> 
> summary(pval_KR)
  KR_zinb_Was      KR_zinb_JSD       KR_kde_Was       KR_kde_JSD    
 Min.   :0.0010   Min.   :0.0010   Min.   :0.0010   Min.   :0.0010  
 1st Qu.:0.1410   1st Qu.:0.1197   1st Qu.:0.1250   1st Qu.:0.1580  
 Median :0.3870   Median :0.3815   Median :0.3660   Median :0.4090  
 Mean   :0.4231   Mean   :0.4160   Mean   :0.4039   Mean   :0.4329  
 3rd Qu.:0.6870   3rd Qu.:0.6810   3rd Qu.:0.6623   3rd Qu.:0.6860  
 Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  
 NA's   :64       NA's   :64                                        
> summary(pval_PS)
  PS_zinb_Was     PS_zinb_JSD       PS_kde_Was       PS_kde_JSD    
 Min.   :0.001   Min.   :0.0010   Min.   :0.0010   Min.   :0.0010  
 1st Qu.:0.134   1st Qu.:0.1120   1st Qu.:0.1180   1st Qu.:0.1540  
 Median :0.380   Median :0.3690   Median :0.3550   Median :0.4000  
 Mean   :0.418   Mean   :0.4102   Mean   :0.3974   Mean   :0.4282  
 3rd Qu.:0.683   3rd Qu.:0.6790   3rd Qu.:0.6530   3rd Qu.:0.6830  
 Max.   :1.000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  
 NA's   :64      NA's   :64                                        
> 
> round(cor(-log10(pval_KR), use="pair"),2)
            KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD
KR_zinb_Was        1.00        0.92       0.91       0.59
KR_zinb_JSD        0.92        1.00       0.89       0.59
KR_kde_Was         0.91        0.89       1.00       0.63
KR_kde_JSD         0.59        0.59       0.63       1.00
> round(cor(-log10(pval_PS), use="pair"),2)
            PS_zinb_Was PS_zinb_JSD PS_kde_Was PS_kde_JSD
PS_zinb_Was        1.00        0.92       0.91       0.59
PS_zinb_JSD        0.92        1.00       0.89       0.59
PS_kde_Was         0.91        0.89       1.00       0.63
PS_kde_JSD         0.59        0.59       0.63       1.00
> 
> round(cor(-log10(pval_KR), -log10(pval_PS), use="pair"),2)
            PS_zinb_Was PS_zinb_JSD PS_kde_Was PS_kde_JSD
KR_zinb_Was        0.99        0.91       0.91       0.59
KR_zinb_JSD        0.92        0.99       0.89       0.59
KR_kde_Was         0.91        0.88       0.99       0.63
KR_kde_JSD         0.59        0.59       0.63       0.99
> 
> # ---------------------------------------------------------------
> # 3. MAST analysis 
> # ---------------------------------------------------------------
> #
> # the input of MAST analysis can be matrix or SingleCellAssay.
> #
> # input:
> # (1) the log-transformed expression count matrix,
> #     with each column represents a cell and each row represents a gene.
> # (2) the meta data, including cell and individual information.
> 
> # we get the p-values based on the Hurdle model ("H" model)
> # ---------------------------------------------------------------
> 
> rds = colSums(count_matrix)
> med_rds = median(rds)
> summary(rds)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   8811    9671   10017   10478   10895   20085 
> med_rds
[1] 10017
> 
> dim(count_matrix)
[1]  8000 14400
> count_matrix[1:3,1:6]
      cell1 cell2 cell3 cell4 cell5 cell6
gene1     1     1     0     1     0     0
gene2     0     1     0     0     2     0
gene3     0     0     0     2     0     1
> count_matrix = t(t(count_matrix)/rds)*med_rds
> dim(count_matrix)
[1]  8000 14400
> count_matrix[1:3,1:6]
         cell1   cell2 cell3    cell4    cell5    cell6
gene1 1.059888 1.05765     0 1.058432 0.000000 0.000000
gene2 0.000000 1.05765     0 0.000000 2.064722 0.000000
gene3 0.000000 0.00000     0 2.116864 0.000000 1.051654
> summary(colSums(count_matrix))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  10017   10017   10017   10017   10017   10017 
> 
> count_matrix_log = log2(1 + count_matrix) #log transformed data
> 
> dim(count_matrix_log)
[1]  8000 14400
> count_matrix_log[1:3, 1:4]
         cell1    cell2 cell3    cell4
gene1 1.042566 1.040997     0 1.041546
gene2 0.000000 1.040997     0 0.000000
gene3 0.000000 0.000000     0 1.640095
> cell_id = colnames(count_matrix_log)   # get the cell id from the data
> gene_id = rownames(count_matrix_log)   # get the gene id from the data
> 
> diagnosis = as.character(meta_cell$phenotype) #
> diagnosis[diagnosis == 1] = "Case"
> diagnosis[diagnosis == 0] = "Control"
> 
> fData = data.frame(primerid = gene_id)
> cData = data.frame(wellKey  = cell_id)
> 
> sca = FromMatrix(count_matrix_log, cData, fData)
Assuming data assay in position 1, with name et is log-transformed.
> colData(sca)$cngeneson = as.numeric(meta_cell$CDR)
> colData(sca)$diagnosis = as.factor(diagnosis)
> colData(sca)$ind = as.factor(meta_cell$individual)
> colData(sca)$RIN = meta_ind$RIN[match(meta_cell$individual, 
+                                       meta_ind$individual)]
> 
> colData(sca)
DataFrame with 14400 rows and 5 columns
              wellKey cngeneson diagnosis      ind                RIN
          <character> <numeric>  <factor> <factor>          <numeric>
cell1           cell1  0.442875      Case     ind1 -0.701830004143882
cell2           cell2    0.4435      Case     ind1 -0.701830004143882
cell3           cell3  0.446375      Case     ind1 -0.701830004143882
cell4           cell4  0.441375      Case     ind1 -0.701830004143882
cell5           cell5  0.439375      Case     ind1 -0.701830004143882
...               ...       ...       ...      ...                ...
cell14396   cell14396  0.436125   Control    ind40 -0.182522788414853
cell14397   cell14397  0.446375   Control    ind40 -0.182522788414853
cell14398   cell14398  0.440125   Control    ind40 -0.182522788414853
cell14399   cell14399  0.442625   Control    ind40 -0.182522788414853
cell14400   cell14400  0.438125   Control    ind40 -0.182522788414853
> 
> rm(count_matrix)
> rm(count_matrix_log)
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   7078564  378.1   19562834 1044.8         NA  19562834 1044.8
Vcells 183212487 1397.9  675193857 5151.4      32768 701784787 5354.2
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   7078569  378.1   19562834 1044.8         NA  19562834 1044.8
Vcells 183212506 1397.9  540155086 4121.1      32768 701784787 5354.2
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   7078569  378.1   19562834 1044.8         NA  19562834 1044.8
Vcells 183212506 1397.9  540155086 4121.1      32768 701784787 5354.2
> 
> getOption("mc.cores")
[1] 6
> 
> date()
[1] "Sat Sep 12 06:54:21 2020"
> b0 = zlm(formula = ~ diagnosis + cngeneson + RIN, sca = sca, 
+          parallel = TRUE)

Done!
> date()
[1] "Sat Sep 12 06:56:47 2020"
> b1 = zlm(formula = ~ diagnosis + (1 | ind) + cngeneson + RIN, sca = sca, 
+          method = 'glmer', ebayes = FALSE, parallel = TRUE)
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular

Done!
> date()
[1] "Sat Sep 12 07:58:35 2020"
> 
> b0
Fitted zlm on 8000 genes and 14400 cells.
 Using BayesGLMlike ~ diagnosis + cngeneson + RIN 
> b1
Fitted zlm on 8000 genes and 14400 cells.
 Using LMERlike ~ diagnosis + (1 | ind) + cngeneson + RIN 
> 
> date()
[1] "Sat Sep 12 07:58:35 2020"
> lrt0 = lrTest(b0, "diagnosis")
Refitting on reduced model...

Done!
> date()
[1] "Sat Sep 12 08:01:31 2020"
> lrt1 = lrTest(b1, "diagnosis")
Refitting on reduced model...
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular

Done!
> date()
[1] "Sat Sep 12 08:46:47 2020"
> 
> dim(lrt0)
[1] 8000    3    3
> lrt0[1,,]
         metric
test.type      lambda df Pr(>Chisq)
   cont   0.824705986  1  0.3638078
   disc   0.002094811  1  0.9634943
   hurdle 0.826800797  2  0.6613974
> 
> dim(lrt1)
[1] 8000    3    3
> lrt1[1,,]
         metric
test.type     lambda df Pr(>Chisq)
   cont   0.05564739  1  0.8135126
   disc   0.02484521  1  0.8747534
   hurdle 0.08049259  2  0.9605528
> 
> mast_pval_glm = apply(lrt0, 1, function(x){x[3,3]})
> length(mast_pval_glm)
[1] 8000
> mast_pval_glm[1:4]
       gene1        gene2        gene3        gene4 
6.613974e-01 1.296843e-02 2.527492e-01 1.927169e-19 
> 
> mast_pval_glmer = apply(lrt1, 1, function(x){x[3,3]})
> length(mast_pval_glmer)
[1] 8000
> mast_pval_glmer[1:4]
     gene1      gene2      gene3      gene4 
0.96055283 0.48054646 0.68640762 0.05028094 
> 
> # ---------------------------------------------------------------
> # check p-value
> # ---------------------------------------------------------------
> 
> idx_grp = list(meanDE=mean_index, varDE=var_index, EE=EE_index)
> 
> plot.hist <- function(pvals, idx_grp, label){
+   for(k in 1:length(idx_grp)){
+     idx  = idx_grp[[k]]
+     main = paste(label, names(idx_grp)[k], sep=", ")
+     hist(pvals[idx], main=main, xlab="p-value", breaks=50)
+   }
+ }
> 
> geneType = rep("EE", n_gene)
> geneType[mean_index] = "meanDE"
> geneType[var_index]  = "varDE"
> 
> df1 = data.frame(geneType, pval_KR, pval_PS, deseq2_pval, 
+                  mast_pval_glm, mast_pval_glmer)
> dim(df1)
[1] 8000   12
> df1[1:2,]
      geneType KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD PS_zinb_Was
gene1       EE       0.987       0.739      0.898      0.543       0.968
gene2       EE       0.427       0.215      0.544      0.637       0.418
      PS_zinb_JSD PS_kde_Was PS_kde_JSD deseq2_pval mast_pval_glm
gene1       0.725      0.892      0.537   0.9386693    0.66139741
gene2       0.186      0.517      0.626   0.3054993    0.01296843
      mast_pval_glmer
gene1       0.9605528
gene2       0.4805465
> 
> 
> pdf(sprintf("figures/pvalue_hist_%s.pdf", config), 
+     width = 9, height = 9)
> par(mfrow = c(3, 3), mar=c(5,4,2,1), pty = "s", bty="n")
> for(k in 2:ncol(df1)){
+   plot.hist(df1[,k], idx_grp, names(df1)[k])
+ }
> dev.off()
null device 
          1 
> 
> # ---------------------------------------------------------------
> # save results
> # ---------------------------------------------------------------
> 
> 
> fun1 <- function(x, alpha){table(x<=alpha)/length(x)}
> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.05)})
$KR_zinb_Was
$KR_zinb_Was$EE

     FALSE       TRUE 
0.94650000 0.04566667 

$KR_zinb_Was$meanDE

FALSE  TRUE 
0.576 0.416 

$KR_zinb_Was$varDE

FALSE  TRUE 
0.651 0.340 


$KR_zinb_JSD
$KR_zinb_JSD$EE

     FALSE       TRUE 
0.94500000 0.04716667 

$KR_zinb_JSD$meanDE

FALSE  TRUE 
0.595 0.397 

$KR_zinb_JSD$varDE

FALSE  TRUE 
0.382 0.609 


$KR_kde_Was
$KR_kde_Was$EE

     FALSE       TRUE 
0.95333333 0.04666667 

$KR_kde_Was$meanDE

FALSE  TRUE 
0.501 0.499 

$KR_kde_Was$varDE

FALSE  TRUE 
0.513 0.487 


$KR_kde_JSD
$KR_kde_JSD$EE

     FALSE       TRUE 
0.94616667 0.05383333 

$KR_kde_JSD$meanDE

FALSE  TRUE 
0.716 0.284 

$KR_kde_JSD$varDE

FALSE  TRUE 
0.698 0.302 


$PS_zinb_Was
$PS_zinb_Was$EE

     FALSE       TRUE 
0.93900000 0.05316667 

$PS_zinb_Was$meanDE

FALSE  TRUE 
0.567 0.425 

$PS_zinb_Was$varDE

FALSE  TRUE 
0.636 0.355 


$PS_zinb_JSD
$PS_zinb_JSD$EE

     FALSE       TRUE 
0.94033333 0.05183333 

$PS_zinb_JSD$meanDE

FALSE  TRUE 
0.579 0.413 

$PS_zinb_JSD$varDE

FALSE  TRUE 
0.372 0.619 


$PS_kde_Was
$PS_kde_Was$EE

 FALSE   TRUE 
0.9485 0.0515 

$PS_kde_Was$meanDE

FALSE  TRUE 
  0.5   0.5 

$PS_kde_Was$varDE

FALSE  TRUE 
0.498 0.502 


$PS_kde_JSD
$PS_kde_JSD$EE

FALSE  TRUE 
0.943 0.057 

$PS_kde_JSD$meanDE

FALSE  TRUE 
0.713 0.287 

$PS_kde_JSD$varDE

FALSE  TRUE 
0.681 0.319 


$deseq2_pval
$deseq2_pval$EE

     FALSE       TRUE 
0.94016667 0.05983333 

$deseq2_pval$meanDE

FALSE  TRUE 
0.424 0.576 

$deseq2_pval$varDE

FALSE  TRUE 
0.944 0.056 


$mast_pval_glm
$mast_pval_glm$EE

FALSE  TRUE 
0.324 0.676 

$mast_pval_glm$meanDE

FALSE  TRUE 
0.056 0.944 

$mast_pval_glm$varDE

TRUE 
   1 


$mast_pval_glmer
$mast_pval_glmer$EE

     FALSE       TRUE 
0.96050000 0.03933333 

$mast_pval_glmer$meanDE

FALSE  TRUE 
 0.64  0.36 

$mast_pval_glmer$varDE

FALSE  TRUE 
0.167 0.833 


> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.01)})
$KR_zinb_Was
$KR_zinb_Was$EE

    FALSE      TRUE 
0.9826667 0.0095000 

$KR_zinb_Was$meanDE

FALSE  TRUE 
0.733 0.259 

$KR_zinb_Was$varDE

FALSE  TRUE 
0.861 0.130 


$KR_zinb_JSD
$KR_zinb_JSD$EE

    FALSE      TRUE 
0.9831667 0.0090000 

$KR_zinb_JSD$meanDE

FALSE  TRUE 
0.757 0.235 

$KR_zinb_JSD$varDE

FALSE  TRUE 
0.626 0.365 


$KR_kde_Was
$KR_kde_Was$EE

 FALSE   TRUE 
0.9915 0.0085 

$KR_kde_Was$meanDE

FALSE  TRUE 
  0.7   0.3 

$KR_kde_Was$varDE

FALSE  TRUE 
0.742 0.258 


$KR_kde_JSD
$KR_kde_JSD$EE

     FALSE       TRUE 
0.98966667 0.01033333 

$KR_kde_JSD$meanDE

FALSE  TRUE 
0.868 0.132 

$KR_kde_JSD$varDE

FALSE  TRUE 
0.851 0.149 


$PS_zinb_Was
$PS_zinb_Was$EE

    FALSE      TRUE 
0.9821667 0.0100000 

$PS_zinb_Was$meanDE

FALSE  TRUE 
0.732 0.260 

$PS_zinb_Was$varDE

FALSE  TRUE 
0.861 0.130 


$PS_zinb_JSD
$PS_zinb_JSD$EE

      FALSE        TRUE 
0.982500000 0.009666667 

$PS_zinb_JSD$meanDE

FALSE  TRUE 
0.740 0.252 

$PS_zinb_JSD$varDE

FALSE  TRUE 
0.601 0.390 


$PS_kde_Was
$PS_kde_Was$EE

      FALSE        TRUE 
0.990833333 0.009166667 

$PS_kde_Was$meanDE

FALSE  TRUE 
0.689 0.311 

$PS_kde_Was$varDE

FALSE  TRUE 
0.734 0.266 


$PS_kde_JSD
$PS_kde_JSD$EE

     FALSE       TRUE 
0.98766667 0.01233333 

$PS_kde_JSD$meanDE

FALSE  TRUE 
0.866 0.134 

$PS_kde_JSD$varDE

FALSE  TRUE 
0.847 0.153 


$deseq2_pval
$deseq2_pval$EE

     FALSE       TRUE 
0.98616667 0.01383333 

$deseq2_pval$meanDE

FALSE  TRUE 
0.612 0.388 

$deseq2_pval$varDE

FALSE  TRUE 
0.984 0.016 


$mast_pval_glm
$mast_pval_glm$EE

    FALSE      TRUE 
0.4383333 0.5616667 

$mast_pval_glm$meanDE

FALSE  TRUE 
0.093 0.907 

$mast_pval_glm$varDE

TRUE 
   1 


$mast_pval_glmer
$mast_pval_glmer$EE

     FALSE       TRUE 
0.98950000 0.01033333 

$mast_pval_glmer$meanDE

FALSE  TRUE 
0.767 0.233 

$mast_pval_glmer$varDE

FALSE  TRUE 
0.266 0.734 


> 
> write.table(df1, file=sprintf("results/pval_%s.txt", config), append=FALSE, 
+             quote=FALSE, sep="\t", row.names = FALSE, col.names = TRUE)
> 
> sessionInfo()
R version 3.6.2 (2019-12-12)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Catalina 10.15.6

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] ideas_0.991                 ggpubr_0.2.5               
 [3] magrittr_1.5                ggplot2_3.3.1              
 [5] pryr_0.1.4                  data.table_1.12.8          
 [7] transport_0.12-2            reticulate_1.15            
 [9] MiRKAT_1.1.0                doRNG_1.8.2                
[11] rngtools_1.5                doParallel_1.0.15          
[13] iterators_1.0.12            foreach_1.4.7              
[15] DESeq2_1.24.0               lme4_1.1-21                
[17] Matrix_1.2-18               MAST_1.10.0                
[19] SingleCellExperiment_1.6.0  SummarizedExperiment_1.14.1
[21] DelayedArray_0.10.0         BiocParallel_1.18.1        
[23] matrixStats_0.55.0          Biobase_2.44.0             
[25] GenomicRanges_1.36.1        GenomeInfoDb_1.20.0        
[27] IRanges_2.18.3              S4Vectors_0.22.1           
[29] BiocGenerics_0.30.0         moments_0.14               
[31] emdbook_1.3.11              MASS_7.3-51.5              

loaded via a namespace (and not attached):
  [1] minqa_1.2.4            colorspace_1.4-1       ggsignif_0.6.0        
  [4] ellipsis_0.3.0         htmlTable_1.13.3       XVector_0.24.0        
  [7] base64enc_0.1-3        rstudioapi_0.11        MatrixModels_0.4-1    
 [10] bit64_0.9-7            AnnotationDbi_1.46.1   mvtnorm_1.0-12        
 [13] codetools_0.2-16       splines_3.6.2          pscl_1.5.5            
 [16] geneplotter_1.62.0     knitr_1.28             jsonlite_1.6.1        
 [19] Formula_1.2-3          nloptr_1.2.1           annotate_1.62.0       
 [22] kernlab_0.9-29         cluster_2.1.0          png_0.1-7             
 [25] compiler_3.6.2         backports_1.1.5        assertthat_0.2.1      
 [28] prettyunits_1.1.1      quantreg_5.55          acepack_1.4.1         
 [31] htmltools_0.4.0        tools_3.6.2            coda_0.19-3           
 [34] gtable_0.3.0           glue_1.3.1             GenomeInfoDbData_1.2.1
 [37] reshape2_1.4.3         dplyr_0.8.4            Rcpp_1.0.3            
 [40] bbmle_1.0.23.1         vctrs_0.3.0            ape_5.3               
 [43] nlme_3.1-144           xfun_0.12              stringr_1.4.0         
 [46] CompQuadForm_1.4.3     lifecycle_0.2.0        GUniFrac_1.1          
 [49] XML_3.99-0.3           PearsonDS_1.1          zlibbioc_1.30.0       
 [52] scales_1.1.0           hms_0.5.3              SparseM_1.78          
 [55] RColorBrewer_1.1-2     memoise_1.1.0          gridExtra_2.3         
 [58] segmented_1.2-0        bdsmatrix_1.3-4        rpart_4.1-15          
 [61] latticeExtra_0.6-29    stringi_1.4.5          RSQLite_2.2.0         
 [64] genefilter_1.66.0      blme_1.0-4             checkmate_2.0.0       
 [67] permute_0.9-5          boot_1.3-24            rlang_0.4.6           
 [70] pkgconfig_2.0.3        bitops_1.0-6           lattice_0.20-38       
 [73] purrr_0.3.3            htmlwidgets_1.5.1      bit_1.1-15.2          
 [76] tidyselect_1.0.0       plyr_1.8.5             R6_2.4.1              
 [79] Hmisc_4.4-0            DBI_1.1.0              withr_2.1.2           
 [82] pillar_1.4.3           foreign_0.8-75         mgcv_1.8-31           
 [85] mixtools_1.2.0         survival_3.1-8         abind_1.4-5           
 [88] RCurl_1.98-1.1         nnet_7.3-12            tibble_3.0.1          
 [91] crayon_1.3.4           progress_1.2.2         jpeg_0.1-8.1          
 [94] locfit_1.5-9.4         grid_3.6.2             blob_1.2.1            
 [97] vegan_2.5-6            digest_0.6.23          xtable_1.8-4          
[100] numDeriv_2016.8-1.1    munsell_0.5.0         
> 
> mem_used()
1.9 GB
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   7234959  386.4   19562834 1044.8         NA  19562834 1044.8
Vcells 187069841 1427.3  536980023 4096.9      32768 839031284 6401.4
> 
> q(save = "no")
> proc.time()
      user     system    elapsed 
155545.543   9343.713  28807.322 
