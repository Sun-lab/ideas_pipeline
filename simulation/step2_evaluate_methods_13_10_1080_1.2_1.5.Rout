
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #########################################################################
> #                                                                       #
> #                                                                       #
> #             Part II: Defferential Expression Analysis                 #
> #                                                                       #
> #                                                                       #
> #########################################################################
> # once simulated genes, we will do the Differential Expression Analysis
> # Here we will implement our method, plus the DESeq2 and the MAST analysis.
> 
> args = commandArgs(trailingOnly=TRUE)
> args
[1] "ncase=13"   "nctrl=10"   "ncell=1080" "r_mean=1.2" "r_var=1.5" 
> 
> if (length(args) < 5) {
+   message("no enough arguments, using default values")
+   r_mean   = 1.2     # The expected fold-changes in mean
+   r_var    = 1.5     # The expected fold-changes in variances
+   ncase    = 13      # case individuals
+   nctrl    = 10      # control individuals
+   ncell    = 360    # numbers of cells collected from each individuals.
+ } else{
+   for(i in 1:length(args)){
+     eval(parse(text=args[[i]]))
+   }
+ }
> 
> if(ncell == 0){
+   UNEQ_N_CELL = TRUE
+ }else{
+   UNEQ_N_CELL = FALSE
+ }
> 
> if(UNEQ_N_CELL){
+   config = sprintf("ncase_%d_nctrl_%d_unequal_n_cell", ncase, nctrl)
+ }else{
+   config = sprintf("ncase_%d_nctrl_%d_ncell_%d", ncase, nctrl, ncell)
+ }
> 
> config = sprintf("%s_fold_mean_%.1f_var_%.1f", config, r_mean, r_var)
> config
[1] "ncase_13_nctrl_10_ncell_1080_fold_mean_1.2_var_1.5"
> 
> # ---------------------------------------------------------------
> # additional parameters
> # ---------------------------------------------------------------
> 
> nCore = 6      # number of cores for multi-core computation
> nall  = ncase + nctrl
> 
> # ---------------------------------------------------------------
> # initial setup
> # ---------------------------------------------------------------
> 
> library(MASS)
> library(emdbook)
> library(moments)
> library(MAST)
Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

Loading required package: BiocParallel

Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from ‘package:base’:

    aperm, apply, rowsum


Attaching package: ‘MAST’

The following object is masked from ‘package:stats’:

    filter

> library(lme4)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:S4Vectors’:

    expand

> library(DESeq2)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> library(foreach)
> library(doRNG)
Loading required package: rngtools
> library(MiRKAT)
> library(reticulate)
> library(transport)
> 
> library(data.table)

Attaching package: ‘data.table’

The following object is masked from ‘package:SummarizedExperiment’:

    shift

The following object is masked from ‘package:GenomicRanges’:

    shift

The following object is masked from ‘package:IRanges’:

    shift

The following objects are masked from ‘package:S4Vectors’:

    first, second

> library(pryr)
Registered S3 method overwritten by 'pryr':
  method      from
  print.bytes Rcpp

Attaching package: ‘pryr’

The following object is masked from ‘package:data.table’:

    address

> library(ggplot2)
> library(ggpubr)
Loading required package: magrittr
> theme_set(theme_bw())
> 
> library(ideas)
> 
> registerDoParallel(cores=nCore)
> options(mc.cores=nCore)
> 
> # ---------------------------------------------------------------
> # load data
> # ---------------------------------------------------------------
> 
> sim_data     = readRDS(sprintf("data/sim_data_%s.rds", config))
> count_matrix = sim_data$count_matrix
> meta_cell    = sim_data$meta_cell
> meta_ind     = sim_data$meta_ind
> gene_index   = sim_data$gene_index
> 
> ls()
 [1] "args"         "config"       "count_matrix" "gene_index"   "i"           
 [6] "meta_cell"    "meta_ind"     "nall"         "ncase"        "ncell"       
[11] "nCore"        "nctrl"        "r_mean"       "r_var"        "sim_data"    
[16] "UNEQ_N_CELL" 
> EE_index   = gene_index$EE_index
> mean_index = gene_index$mean_index
> var_index  = gene_index$var_index
> 
> dim(count_matrix)
[1]  8000 24840
> count_matrix[1:3,1:6]
      cell1 cell2 cell3 cell4 cell5 cell6
gene1     1     1     0     0     0     0
gene2     1     1     0     0     2     0
gene3     0     0     0     2     0     1
> 
> dim(meta_cell)
[1] 24840     5
> meta_cell[1:2,]
      cell_id individual phenotype cell_rd      CDR
cell1   cell1       ind1         1    9738 0.439125
cell2   cell2       ind1         1    9605 0.444000
> 
> dim(meta_ind)
[1] 23  3
> meta_ind[1:2,]
     individual phenotype        RIN
ind1       ind1         1 -0.2784552
ind2       ind2         1 -0.7018300
> 
> rm(sim_data)
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   6950769  371.3   12437792  664.3         NA   9014139  481.5
Vcells 210459671 1605.7  305200649 2328.5      32768 210519470 1606.2
> 
> # ---------------------------------------------------------------
> # 1. DESeq2 analysis 
> # ---------------------------------------------------------------
> # We calculate count_matrix_bulk by adding up raw counts of
> # all cells of an individual within a gene
> # ---------------------------------------------------------------
> 
> # individual level info
> u_ind = unique(meta_cell$individual)
> length(u_ind)
[1] 23
> u_ind[1:2]
[1] "ind1" "ind2"
> 
> count_matrix_bulk = matrix(nrow = nrow(count_matrix),
+                          ncol = length(u_ind))
> rownames(count_matrix_bulk) = rownames(count_matrix)
> colnames(count_matrix_bulk) = u_ind
> 
> for (i_ind in 1:length(u_ind)) {
+   cur_ind   = u_ind[i_ind]
+   cur_ind_m = count_matrix[, meta_cell$individual == cur_ind]
+   count_matrix_bulk[, i_ind] = rowSums(cur_ind_m, na.rm = TRUE)
+ }
> 
> dim(count_matrix_bulk)
[1] 8000   23
> count_matrix_bulk[1:3,1:5]
      ind1 ind2 ind3 ind4 ind5
gene1  389  399  483  566  517
gene2  283  250  715  428  886
gene3  265  296  180  314  212
> 
> meta_ind$phenotype = as.factor(meta_ind$phenotype)
> dim(meta_ind)
[1] 23  3
> meta_ind[1:2,]
     individual phenotype        RIN
ind1       ind1         1 -0.2784552
ind2       ind2         1 -0.7018300
> 
> # DESeq2 for all the genes
> dds = DESeqDataSetFromMatrix(countData = count_matrix_bulk,
+                              colData = meta_ind,
+                              design = ~ RIN + phenotype)
converting counts to integer mode
> 
> dds = DESeq(dds)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
final dispersion estimates
fitting model and testing
> nms = resultsNames(dds)
> nms
[1] "Intercept"        "RIN"              "phenotype_1_vs_0"
> 
> deseq2_pval = results(dds)$pvalue
> 
> rk = results(dds, name="RIN")
> deseq2_pval_RIN = rk$pvalue
> 
> summary(deseq2_pval)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.1751  0.4477  0.4564  0.7289  0.9999 
> summary(deseq2_pval_RIN)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.09917 0.32754 0.38725 0.65360 0.99847 
> table(deseq2_pval[EE_index] < 0.05)

FALSE  TRUE 
 5605   395 
> table(deseq2_pval[EE_index] < 0.05)/length(EE_index)

     FALSE       TRUE 
0.93416667 0.06583333 
> 
> # ---------------------------------------------------------------
> # 2. IDEAS 
> # ---------------------------------------------------------------
> 
> var2test      = "phenotype"
> var2adjust    = "RIN"
> var2test_type = "binary"
> var_per_cell  = "cell_rd"
> 
> dist_list = list()
> 
> for(fit_method in c("zinb", "kde")){
+   for(d_metric in c("Was", "JSD")){
+     message(sprintf("fit_method: %s, d_metric: %s\n", fit_method, d_metric))
+     message(date())
+     
+     label = paste(fit_method, d_metric, sep="_")
+     fnm = sprintf("data/dist_%s_%s.rds", label, config)
+     if(file.exists(fnm)){
+       dist_list[[label]] = readRDS(fnm)
+     }else{
+       dist1 = ideas_dist(count_matrix, meta_cell, meta_ind, 
+                          var_per_cell, var2test, var2adjust, 
+                          var2test_type, d_metric = d_metric, 
+                          fit_method = fit_method)
+       dist_list[[label]] = dist1
+       saveRDS(dist1, fnm)
+     }
+   }
+ }
fit_method: zinb, d_metric: Was

Fri Sep 11 11:18:40 2020
the count_matrix includes 8000 genes in 24840 cells

estimating distribution for each gene and each individaul by zinb

fit_method: zinb, d_metric: JSD

Fri Sep 11 13:46:08 2020
the count_matrix includes 8000 genes in 24840 cells

estimating distribution for each gene and each individaul by zinb

fit_method: kde, d_metric: Was

Fri Sep 11 16:04:37 2020
the count_matrix includes 8000 genes in 24840 cells

estimating distribution for each gene and each individaul by kde

fit_method: kde, d_metric: JSD

Fri Sep 11 16:07:14 2020
the count_matrix includes 8000 genes in 24840 cells

estimating distribution for each gene and each individaul by kde

> 
> date()
[1] "Fri Sep 11 16:17:02 2020"
> 
> lapply(dist_list, dim)
$zinb_Was
[1] 8000   23   23

$zinb_JSD
[1] 8000   23   23

$kde_Was
[1] 8000   23   23

$kde_JSD
[1] 8000   23   23

> 
> dist_list$zinb_Was[1,1:3,1:3]
           ind1       ind2       ind3
ind1 0.00000000 0.01839264 0.08223348
ind2 0.01839264 0.00000000 0.06384084
ind3 0.08223348 0.06384084 0.00000000
> dist_list$zinb_JSD[1,1:3,1:3]
             ind1         ind2        ind3
ind1 0.0000000000 0.0001559078 0.002445000
ind2 0.0001559078 0.0000000000 0.001482014
ind3 0.0024449996 0.0014820140 0.000000000
> 
> # ---------------------------------------------------------------
> # STEP 2: pval calculation 
> # ---------------------------------------------------------------
> 
> n_gene = nrow(count_matrix)
> y = as.numeric(meta_ind$phenotype==1)
> 
> pval_KR = matrix(NA, nrow=n_gene, ncol=length(dist_list))
> rownames(pval_KR) = rownames(count_matrix)
> colnames(pval_KR) = paste("KR", names(dist_list), sep="_")
> 
> for(k in 1:length(dist_list)){
+   message(names(dist_list)[k])
+   message(date())
+   dist_k  = dist_list[[k]]
+   pval_KR[,k] = foreach(i_g = 1:dim(dist_k)[1], .combine = "c") %dopar% {
+     Di = dist_k[i_g,,]
+     if(any(is.na(Di))){
+       pval = NA 
+     }else{
+       Ki = D2K(Di)
+       m1 = MiRKAT(y = y, X = meta_ind$RIN, Ks = Ki, out_type = "D", 
+                   method = "permutation")
+       pval = m1$indivP
+     }
+     pval
+   }
+ }
zinb_Was
Fri Sep 11 16:17:03 2020
zinb_JSD
Fri Sep 11 16:17:41 2020
kde_Was
Fri Sep 11 16:18:21 2020
kde_JSD
Fri Sep 11 16:18:59 2020
> date()
[1] "Fri Sep 11 16:19:38 2020"
> 
> dim(pval_KR)
[1] 8000    4
> pval_KR[1:2,]
      KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD
gene1       0.856       0.735      0.903      0.522
gene2       0.751       0.944      0.832      0.610
> 
> 
> n_perm = 999
> r.seed = 903
> 
> pval_PS = matrix(NA, nrow=n_gene, ncol=length(dist_list))
> rownames(pval_PS) = rownames(count_matrix)
> colnames(pval_PS) = names(dist_list)
> colnames(pval_PS) = paste("PS", names(dist_list), sep="_")
> 
> for(k in 1:length(dist_list)){
+   message(names(dist_list)[k])
+   message(date())
+   dist_k  = dist_list[[k]]
+   pval_PS[,k] = permanova(dist_k, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, 
+                           r.seed=r.seed, residulize.x = FALSE)
+ }
zinb_Was
Fri Sep 11 16:19:39 2020
skip 39 gene(s) with NA in the dist_array

testing for 'phenotype', a binary variable

zinb_JSD
Fri Sep 11 16:21:44 2020
skip 39 gene(s) with NA in the dist_array

testing for 'phenotype', a binary variable

kde_Was
Fri Sep 11 16:23:52 2020
testing for 'phenotype', a binary variable

kde_JSD
Fri Sep 11 16:26:06 2020
testing for 'phenotype', a binary variable

> date()
[1] "Fri Sep 11 16:28:09 2020"
> 
> summary(pval_KR)
  KR_zinb_Was     KR_zinb_JSD       KR_kde_Was       KR_kde_JSD    
 Min.   :0.001   Min.   :0.0010   Min.   :0.0010   Min.   :0.0010  
 1st Qu.:0.155   1st Qu.:0.1400   1st Qu.:0.1480   1st Qu.:0.1690  
 Median :0.418   Median :0.4020   Median :0.4180   Median :0.4340  
 Mean   :0.437   Mean   :0.4255   Mean   :0.4354   Mean   :0.4478  
 3rd Qu.:0.700   3rd Qu.:0.6880   3rd Qu.:0.7030   3rd Qu.:0.7160  
 Max.   :1.000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  
 NA's   :39      NA's   :39                                        
> summary(pval_PS)
  PS_zinb_Was      PS_zinb_JSD       PS_kde_Was       PS_kde_JSD    
 Min.   :0.0010   Min.   :0.0010   Min.   :0.0010   Min.   :0.0010  
 1st Qu.:0.1470   1st Qu.:0.1340   1st Qu.:0.1410   1st Qu.:0.1660  
 Median :0.4100   Median :0.3920   Median :0.4070   Median :0.4260  
 Mean   :0.4307   Mean   :0.4194   Mean   :0.4295   Mean   :0.4435  
 3rd Qu.:0.6930   3rd Qu.:0.6820   3rd Qu.:0.6960   3rd Qu.:0.7070  
 Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  
 NA's   :39       NA's   :39                                        
> 
> round(cor(-log10(pval_KR), use="pair"),2)
            KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD
KR_zinb_Was        1.00        0.94       0.95       0.67
KR_zinb_JSD        0.94        1.00       0.92       0.69
KR_kde_Was         0.95        0.92       1.00       0.70
KR_kde_JSD         0.67        0.69       0.70       1.00
> round(cor(-log10(pval_PS), use="pair"),2)
            PS_zinb_Was PS_zinb_JSD PS_kde_Was PS_kde_JSD
PS_zinb_Was        1.00        0.94       0.95       0.67
PS_zinb_JSD        0.94        1.00       0.92       0.69
PS_kde_Was         0.95        0.92       1.00       0.70
PS_kde_JSD         0.67        0.69       0.70       1.00
> 
> round(cor(-log10(pval_KR), -log10(pval_PS), use="pair"),2)
            PS_zinb_Was PS_zinb_JSD PS_kde_Was PS_kde_JSD
KR_zinb_Was        0.99        0.93       0.95       0.66
KR_zinb_JSD        0.93        0.99       0.91       0.69
KR_kde_Was         0.94        0.91       0.99       0.70
KR_kde_JSD         0.67        0.69       0.70       0.99
> 
> # ---------------------------------------------------------------
> # 3. MAST analysis 
> # ---------------------------------------------------------------
> #
> # the input of MAST analysis can be matrix or SingleCellAssay.
> #
> # input:
> # (1) the log-transformed expression count matrix,
> #     with each column represents a cell and each row represents a gene.
> # (2) the meta data, including cell and individual information.
> 
> # we get the p-values based on the Hurdle model ("H" model)
> # ---------------------------------------------------------------
> 
> rds = colSums(count_matrix)
> med_rds = median(rds)
> summary(rds)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   8921    9652    9976   10033   10322   14193 
> med_rds
[1] 9976
> 
> dim(count_matrix)
[1]  8000 24840
> count_matrix[1:3,1:6]
      cell1 cell2 cell3 cell4 cell5 cell6
gene1     1     1     0     0     0     0
gene2     1     1     0     0     2     0
gene3     0     0     0     2     0     1
> count_matrix = t(t(count_matrix)/rds)*med_rds
> dim(count_matrix)
[1]  8000 24840
> count_matrix[1:3,1:6]
        cell1    cell2 cell3    cell4    cell5    cell6
gene1 1.02444 1.038626     0 0.000000 0.000000 0.000000
gene2 1.02444 1.038626     0 0.000000 1.858593 0.000000
gene3 0.00000 0.000000     0 1.993008 0.000000 1.036468
> summary(colSums(count_matrix))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   9976    9976    9976    9976    9976    9976 
> 
> count_matrix_log = log2(1 + count_matrix) #log transformed data
> 
> dim(count_matrix_log)
[1]  8000 24840
> count_matrix_log[1:3, 1:4]
         cell1    cell2 cell3    cell4
gene1 1.017523 1.027597     0 0.000000
gene2 1.017523 1.027597     0 0.000000
gene3 0.000000 0.000000     0 1.581596
> cell_id = colnames(count_matrix_log)   # get the cell id from the data
> gene_id = rownames(count_matrix_log)   # get the gene id from the data
> 
> diagnosis = as.character(meta_cell$phenotype) #
> diagnosis[diagnosis == 1] = "Case"
> diagnosis[diagnosis == 0] = "Control"
> 
> fData = data.frame(primerid = gene_id)
> cData = data.frame(wellKey  = cell_id)
> 
> sca = FromMatrix(count_matrix_log, cData, fData)
Assuming data assay in position 1, with name et is log-transformed.
> colData(sca)$cngeneson = as.numeric(meta_cell$CDR)
> colData(sca)$diagnosis = as.factor(diagnosis)
> colData(sca)$ind = as.factor(meta_cell$individual)
> colData(sca)$RIN = meta_ind$RIN[match(meta_cell$individual, 
+                                       meta_ind$individual)]
> 
> colData(sca)
DataFrame with 24840 rows and 5 columns
              wellKey cngeneson diagnosis      ind                RIN
          <character> <numeric>  <factor> <factor>          <numeric>
cell1           cell1  0.439125      Case     ind1 -0.278455206659536
cell2           cell2     0.444      Case     ind1 -0.278455206659536
cell3           cell3     0.438      Case     ind1 -0.278455206659536
cell4           cell4  0.440125      Case     ind1 -0.278455206659536
cell5           cell5  0.442125      Case     ind1 -0.278455206659536
...               ...       ...       ...      ...                ...
cell24836   cell24836  0.449625   Control    ind23 -0.711802340635773
cell24837   cell24837  0.445125   Control    ind23 -0.711802340635773
cell24838   cell24838     0.442   Control    ind23 -0.711802340635773
cell24839   cell24839  0.448375   Control    ind23 -0.711802340635773
cell24840   cell24840   0.44675   Control    ind23 -0.711802340635773
> 
> rm(count_matrix)
> rm(count_matrix_log)
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)   max used   (Mb)
Ncells   7087051  378.5   12437792  664.3         NA   12437792  664.3
Vcells 237787317 1814.2 1006180093 7676.6      32768 1132299989 8638.8
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)   max used   (Mb)
Ncells   7087056  378.5   12437792  664.3         NA   12437792  664.3
Vcells 237787336 1814.2  804944075 6141.3      32768 1132299989 8638.8
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)   max used   (Mb)
Ncells   7087056  378.5   12437792  664.3         NA   12437792  664.3
Vcells 237787336 1814.2  643955260 4913.0      32768 1132299989 8638.8
> 
> getOption("mc.cores")
[1] 6
> 
> date()
[1] "Fri Sep 11 16:28:34 2020"
> b0 = zlm(formula = ~ diagnosis + cngeneson + RIN, sca = sca, 
+          parallel = TRUE)

Done!
> date()
[1] "Fri Sep 11 16:35:28 2020"
> b1 = zlm(formula = ~ diagnosis + (1 | ind) + cngeneson + RIN, sca = sca, 
+          method = 'glmer', ebayes = FALSE, parallel = TRUE)
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular

Done!
> date()
[1] "Fri Sep 11 18:45:12 2020"
> 
> b0
Fitted zlm on 8000 genes and 24840 cells.
 Using BayesGLMlike ~ diagnosis + cngeneson + RIN 
> b1
Fitted zlm on 8000 genes and 24840 cells.
 Using LMERlike ~ diagnosis + (1 | ind) + cngeneson + RIN 
> 
> date()
[1] "Fri Sep 11 18:45:12 2020"
> lrt0 = lrTest(b0, "diagnosis")
Refitting on reduced model...

Done!
> date()
[1] "Fri Sep 11 18:57:08 2020"
> lrt1 = lrTest(b1, "diagnosis")
Refitting on reduced model...
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular

Done!
> date()
[1] "Fri Sep 11 20:30:38 2020"
> 
> dim(lrt0)
[1] 8000    3    3
> lrt0[1,,]
         metric
test.type     lambda df Pr(>Chisq)
   cont   0.00034533  1  0.9851737
   disc   0.15249907  1  0.6961585
   hurdle 0.15284440  2  0.9264250
> 
> dim(lrt1)
[1] 8000    3    3
> lrt1[1,,]
         metric
test.type       lambda df Pr(>Chisq)
   cont   6.676868e-02  1  0.7961010
   disc   1.103381e-06  1  0.9991619
   hurdle 6.676978e-02  2  0.9671662
> 
> mast_pval_glm = apply(lrt0, 1, function(x){x[3,3]})
> length(mast_pval_glm)
[1] 8000
> mast_pval_glm[1:4]
       gene1        gene2        gene3        gene4 
9.264250e-01 4.836601e-02 9.107694e-03 4.172349e-42 
> 
> mast_pval_glmer = apply(lrt1, 1, function(x){x[3,3]})
> length(mast_pval_glmer)
[1] 8000
> mast_pval_glmer[1:4]
       gene1        gene2        gene3        gene4 
0.9671662336 0.9910257346 0.2663036985 0.0001648233 
> 
> # ---------------------------------------------------------------
> # check p-value
> # ---------------------------------------------------------------
> 
> idx_grp = list(meanDE=mean_index, varDE=var_index, EE=EE_index)
> 
> plot.hist <- function(pvals, idx_grp, label){
+   for(k in 1:length(idx_grp)){
+     idx  = idx_grp[[k]]
+     main = paste(label, names(idx_grp)[k], sep=", ")
+     hist(pvals[idx], main=main, xlab="p-value", breaks=50)
+   }
+ }
> 
> geneType = rep("EE", n_gene)
> geneType[mean_index] = "meanDE"
> geneType[var_index]  = "varDE"
> 
> df1 = data.frame(geneType, pval_KR, pval_PS, deseq2_pval, 
+                  mast_pval_glm, mast_pval_glmer)
> dim(df1)
[1] 8000   12
> df1[1:2,]
      geneType KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD PS_zinb_Was
gene1       EE       0.856       0.735      0.903      0.522       0.846
gene2       EE       0.751       0.944      0.832      0.610       0.726
      PS_zinb_JSD PS_kde_Was PS_kde_JSD deseq2_pval mast_pval_glm
gene1       0.758      0.940      0.533   0.9892898    0.92642499
gene2       0.930      0.794      0.551   0.8298865    0.04836601
      mast_pval_glmer
gene1       0.9671662
gene2       0.9910257
> 
> 
> pdf(sprintf("figures/pvalue_hist_%s.pdf", config), 
+     width = 9, height = 9)
> par(mfrow = c(3, 3), mar=c(5,4,2,1), pty = "s", bty="n")
> for(k in 2:ncol(df1)){
+   plot.hist(df1[,k], idx_grp, names(df1)[k])
+ }
> dev.off()
null device 
          1 
> 
> # ---------------------------------------------------------------
> # save results
> # ---------------------------------------------------------------
> 
> 
> fun1 <- function(x, alpha){table(x<=alpha)/length(x)}
> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.05)})
$KR_zinb_Was
$KR_zinb_Was$EE

     FALSE       TRUE 
0.94783333 0.04733333 

$KR_zinb_Was$meanDE

FALSE  TRUE 
0.611 0.383 

$KR_zinb_Was$varDE

FALSE  TRUE 
0.679 0.317 


$KR_zinb_JSD
$KR_zinb_JSD$EE

    FALSE      TRUE 
0.9466667 0.0485000 

$KR_zinb_JSD$meanDE

FALSE  TRUE 
0.628 0.366 

$KR_zinb_JSD$varDE

FALSE  TRUE 
0.489 0.507 


$KR_kde_Was
$KR_kde_Was$EE

     FALSE       TRUE 
0.95183333 0.04816667 

$KR_kde_Was$meanDE

FALSE  TRUE 
0.608 0.392 

$KR_kde_Was$varDE

FALSE  TRUE 
0.612 0.388 


$KR_kde_JSD
$KR_kde_JSD$EE

 FALSE   TRUE 
0.9455 0.0545 

$KR_kde_JSD$meanDE

FALSE  TRUE 
0.719 0.281 

$KR_kde_JSD$varDE

FALSE  TRUE 
0.668 0.332 


$PS_zinb_Was
$PS_zinb_Was$EE

    FALSE      TRUE 
0.9466667 0.0485000 

$PS_zinb_Was$meanDE

FALSE  TRUE 
0.600 0.394 

$PS_zinb_Was$varDE

FALSE  TRUE 
0.668 0.328 


$PS_zinb_JSD
$PS_zinb_JSD$EE

    FALSE      TRUE 
0.9451667 0.0500000 

$PS_zinb_JSD$meanDE

FALSE  TRUE 
0.613 0.381 

$PS_zinb_JSD$varDE

FALSE  TRUE 
0.474 0.522 


$PS_kde_Was
$PS_kde_Was$EE

     FALSE       TRUE 
0.95016667 0.04983333 

$PS_kde_Was$meanDE

FALSE  TRUE 
0.599 0.401 

$PS_kde_Was$varDE

FALSE  TRUE 
0.594 0.406 


$PS_kde_JSD
$PS_kde_JSD$EE

     FALSE       TRUE 
0.94583333 0.05416667 

$PS_kde_JSD$meanDE

FALSE  TRUE 
0.722 0.278 

$PS_kde_JSD$varDE

FALSE  TRUE 
0.676 0.324 


$deseq2_pval
$deseq2_pval$EE

     FALSE       TRUE 
0.93416667 0.06583333 

$deseq2_pval$meanDE

FALSE  TRUE 
0.551 0.449 

$deseq2_pval$varDE

FALSE  TRUE 
0.928 0.072 


$mast_pval_glm
$mast_pval_glm$EE

    FALSE      TRUE 
0.2526667 0.7473333 

$mast_pval_glm$meanDE

FALSE  TRUE 
0.055 0.945 

$mast_pval_glm$varDE

FALSE  TRUE 
0.001 0.999 


$mast_pval_glmer
$mast_pval_glmer$EE

     FALSE       TRUE 
0.93083333 0.06916667 

$mast_pval_glmer$meanDE

FALSE  TRUE 
0.586 0.414 

$mast_pval_glmer$varDE

FALSE  TRUE 
0.163 0.837 


> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.01)})
$KR_zinb_Was
$KR_zinb_Was$EE

      FALSE        TRUE 
0.985833333 0.009333333 

$KR_zinb_Was$meanDE

FALSE  TRUE 
0.788 0.206 

$KR_zinb_Was$varDE

FALSE  TRUE 
0.855 0.141 


$KR_zinb_JSD
$KR_zinb_JSD$EE

      FALSE        TRUE 
0.987000000 0.008166667 

$KR_zinb_JSD$meanDE

FALSE  TRUE 
0.789 0.205 

$KR_zinb_JSD$varDE

FALSE  TRUE 
0.679 0.317 


$KR_kde_Was
$KR_kde_Was$EE

      FALSE        TRUE 
0.991166667 0.008833333 

$KR_kde_Was$meanDE

FALSE  TRUE 
0.766 0.234 

$KR_kde_Was$varDE

FALSE  TRUE 
0.779 0.221 


$KR_kde_JSD
$KR_kde_JSD$EE

FALSE  TRUE 
0.991 0.009 

$KR_kde_JSD$meanDE

FALSE  TRUE 
0.844 0.156 

$KR_kde_JSD$varDE

FALSE  TRUE 
0.793 0.207 


$PS_zinb_Was
$PS_zinb_Was$EE

    FALSE      TRUE 
0.9856667 0.0095000 

$PS_zinb_Was$meanDE

FALSE  TRUE 
0.780 0.214 

$PS_zinb_Was$varDE

FALSE  TRUE 
0.845 0.151 


$PS_zinb_JSD
$PS_zinb_JSD$EE

    FALSE      TRUE 
0.9851667 0.0100000 

$PS_zinb_JSD$meanDE

FALSE  TRUE 
0.791 0.203 

$PS_zinb_JSD$varDE

FALSE  TRUE 
0.669 0.327 


$PS_kde_Was
$PS_kde_Was$EE

     FALSE       TRUE 
0.98883333 0.01116667 

$PS_kde_Was$meanDE

FALSE  TRUE 
 0.76  0.24 

$PS_kde_Was$varDE

FALSE  TRUE 
0.771 0.229 


$PS_kde_JSD
$PS_kde_JSD$EE

FALSE  TRUE 
0.992 0.008 

$PS_kde_JSD$meanDE

FALSE  TRUE 
0.847 0.153 

$PS_kde_JSD$varDE

FALSE  TRUE 
0.788 0.212 


$deseq2_pval
$deseq2_pval$EE

FALSE  TRUE 
0.981 0.019 

$deseq2_pval$meanDE

FALSE  TRUE 
 0.71  0.29 

$deseq2_pval$varDE

FALSE  TRUE 
0.983 0.017 


$mast_pval_glm
$mast_pval_glm$EE

    FALSE      TRUE 
0.3283333 0.6716667 

$mast_pval_glm$meanDE

FALSE  TRUE 
0.084 0.916 

$mast_pval_glm$varDE

FALSE  TRUE 
0.002 0.998 


$mast_pval_glmer
$mast_pval_glmer$EE

     FALSE       TRUE 
0.97333333 0.02666667 

$mast_pval_glmer$meanDE

FALSE  TRUE 
0.741 0.259 

$mast_pval_glmer$varDE

FALSE  TRUE 
0.268 0.732 


> 
> write.table(df1, file=sprintf("results/pval_%s.txt", config), append=FALSE, 
+             quote=FALSE, sep="\t", row.names = FALSE, col.names = TRUE)
> 
> sessionInfo()
R version 3.6.2 (2019-12-12)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Catalina 10.15.6

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] ideas_0.991                 ggpubr_0.2.5               
 [3] magrittr_1.5                ggplot2_3.3.1              
 [5] pryr_0.1.4                  data.table_1.12.8          
 [7] transport_0.12-2            reticulate_1.15            
 [9] MiRKAT_1.1.0                doRNG_1.8.2                
[11] rngtools_1.5                doParallel_1.0.15          
[13] iterators_1.0.12            foreach_1.4.7              
[15] DESeq2_1.24.0               lme4_1.1-21                
[17] Matrix_1.2-18               MAST_1.10.0                
[19] SingleCellExperiment_1.6.0  SummarizedExperiment_1.14.1
[21] DelayedArray_0.10.0         BiocParallel_1.18.1        
[23] matrixStats_0.55.0          Biobase_2.44.0             
[25] GenomicRanges_1.36.1        GenomeInfoDb_1.20.0        
[27] IRanges_2.18.3              S4Vectors_0.22.1           
[29] BiocGenerics_0.30.0         moments_0.14               
[31] emdbook_1.3.11              MASS_7.3-51.5              

loaded via a namespace (and not attached):
  [1] minqa_1.2.4            colorspace_1.4-1       ggsignif_0.6.0        
  [4] ellipsis_0.3.0         htmlTable_1.13.3       XVector_0.24.0        
  [7] base64enc_0.1-3        rstudioapi_0.11        MatrixModels_0.4-1    
 [10] bit64_0.9-7            AnnotationDbi_1.46.1   mvtnorm_1.0-12        
 [13] codetools_0.2-16       splines_3.6.2          pscl_1.5.5            
 [16] geneplotter_1.62.0     knitr_1.28             jsonlite_1.6.1        
 [19] Formula_1.2-3          nloptr_1.2.1           annotate_1.62.0       
 [22] kernlab_0.9-29         cluster_2.1.0          png_0.1-7             
 [25] compiler_3.6.2         backports_1.1.5        assertthat_0.2.1      
 [28] prettyunits_1.1.1      quantreg_5.55          acepack_1.4.1         
 [31] htmltools_0.4.0        tools_3.6.2            coda_0.19-3           
 [34] gtable_0.3.0           glue_1.3.1             GenomeInfoDbData_1.2.1
 [37] reshape2_1.4.3         dplyr_0.8.4            Rcpp_1.0.3            
 [40] bbmle_1.0.23.1         vctrs_0.3.0            ape_5.3               
 [43] nlme_3.1-144           xfun_0.12              stringr_1.4.0         
 [46] CompQuadForm_1.4.3     lifecycle_0.2.0        GUniFrac_1.1          
 [49] XML_3.99-0.3           PearsonDS_1.1          zlibbioc_1.30.0       
 [52] scales_1.1.0           hms_0.5.3              SparseM_1.78          
 [55] RColorBrewer_1.1-2     memoise_1.1.0          gridExtra_2.3         
 [58] segmented_1.2-0        bdsmatrix_1.3-4        rpart_4.1-15          
 [61] latticeExtra_0.6-29    stringi_1.4.5          RSQLite_2.2.0         
 [64] genefilter_1.66.0      blme_1.0-4             checkmate_2.0.0       
 [67] permute_0.9-5          boot_1.3-24            rlang_0.4.6           
 [70] pkgconfig_2.0.3        bitops_1.0-6           lattice_0.20-38       
 [73] purrr_0.3.3            htmlwidgets_1.5.1      bit_1.1-15.2          
 [76] tidyselect_1.0.0       plyr_1.8.5             R6_2.4.1              
 [79] Hmisc_4.4-0            DBI_1.1.0              withr_2.1.2           
 [82] pillar_1.4.3           foreign_0.8-75         mgcv_1.8-31           
 [85] mixtools_1.2.0         survival_3.1-8         abind_1.4-5           
 [88] RCurl_1.98-1.1         nnet_7.3-12            tibble_3.0.1          
 [91] crayon_1.3.4           progress_1.2.2         jpeg_0.1-8.1          
 [94] locfit_1.5-9.4         grid_3.6.2             blob_1.2.1            
 [97] vegan_2.5-6            digest_0.6.23          xtable_1.8-4          
[100] numDeriv_2016.8-1.1    munsell_0.5.0         
> 
> mem_used()
2.35 GB
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)   max used   (Mb)
Ncells   7254697  387.5   12437792  664.3         NA   12437792  664.3
Vcells 243320094 1856.4  689098805 5257.5      32768 1132299989 8638.8
> 
> q(save = "no")
> proc.time()
     user    system   elapsed 
176437.84  11861.78  33140.57 
