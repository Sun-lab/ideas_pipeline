
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #########################################################################
> #                                                                       #
> #                                                                       #
> #             Part II: Defferential Expression Analysis                 #
> #                                                                       #
> #                                                                       #
> #########################################################################
> # once simulated genes, we will do the Differential Expression Analysis
> # Here we will implement our method, plus the DESeq2 and the MAST analysis.
> 
> args = commandArgs(trailingOnly=TRUE)
> args
[1] "ncase=20"   "nctrl=20"   "ncell=360"  "r_mean=1.2" "r_var=1.5" 
> 
> if (length(args) < 5) {
+   message("no enough arguments, using default values")
+   r_mean   = 1.2     # The expected fold-changes in mean
+   r_var    = 1.5     # The expected fold-changes in variances
+   ncase    = 13      # case individuals
+   nctrl    = 10      # control individuals
+   ncell    = 360    # numbers of cells collected from each individuals.
+ } else{
+   for(i in 1:length(args)){
+     eval(parse(text=args[[i]]))
+   }
+ }
> 
> if(ncell == 0){
+   UNEQ_N_CELL = TRUE
+ }else{
+   UNEQ_N_CELL = FALSE
+ }
> 
> if(UNEQ_N_CELL){
+   config = sprintf("ncase_%d_nctrl_%d_unequal_n_cell", ncase, nctrl)
+ }else{
+   config = sprintf("ncase_%d_nctrl_%d_ncell_%d", ncase, nctrl, ncell)
+ }
> 
> config = sprintf("%s_fold_mean_%.1f_var_%.1f", config, r_mean, r_var)
> config
[1] "ncase_20_nctrl_20_ncell_360_fold_mean_1.2_var_1.5"
> 
> # ---------------------------------------------------------------
> # additional parameters
> # ---------------------------------------------------------------
> 
> nCore = 6      # number of cores for multi-core computation
> nall  = ncase + nctrl
> 
> # ---------------------------------------------------------------
> # initial setup
> # ---------------------------------------------------------------
> 
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> library(foreach)
> library(doRNG)
Loading required package: rngtools
> 
> library(data.table)
> library(ggplot2)
> theme_set(theme_bw())
> 
> registerDoParallel(cores=nCore)
> options(mc.cores=nCore)
> 
> # ---------------------------------------------------------------
> # load data
> # ---------------------------------------------------------------
> 
> sim_data     = readRDS(sprintf("data/sim_data_%s.rds", config))
> count_matrix = sim_data$count_matrix
> meta_cell    = sim_data$meta_cell
> meta_ind     = sim_data$meta_ind
> gene_index   = sim_data$gene_index
> 
> ls()
 [1] "args"         "config"       "count_matrix" "gene_index"   "i"           
 [6] "meta_cell"    "meta_ind"     "nall"         "ncase"        "ncell"       
[11] "nCore"        "nctrl"        "r_mean"       "r_var"        "sim_data"    
[16] "UNEQ_N_CELL" 
> EE_index   = gene_index$EE_index
> mean_index = gene_index$mean_index
> var_index  = gene_index$var_index
> 
> dim(count_matrix)
[1]  8000 14400
> count_matrix[1:3,1:6]
      cell1 cell2 cell3 cell4 cell5 cell6
gene1     1     1     0     1     0     0
gene2     0     1     0     0     2     0
gene3     0     0     0     2     0     1
> 
> dim(meta_cell)
[1] 14400     5
> meta_cell[1:2,]
      cell_id individual phenotype cell_rd      CDR
cell1   cell1       ind1         1    9451 0.442875
cell2   cell2       ind1         1    9471 0.443500
> 
> dim(meta_ind)
[1] 40  3
> 
> rm(sim_data)
> gc()
            used  (Mb) gc trigger   (Mb) limit (Mb)  max used  (Mb)
Ncells    623062  33.3    1222884   65.4         NA   1222884  65.4
Vcells 116399769 888.1  169915907 1296.4      32768 116465765 888.6
> 
> 
> # ---------------------------------------------------------------
> # 4. ranksum analysis 
> # ---------------------------------------------------------------
> #
> # the input of ranksum analysis can be matrix.
> #
> # input:
> # (1) the expression count matrix,
> #     with each column represents a cell and each row represents a gene.
> # (2) the meta data, including cell individual information.
> 
> # ---------------------------------------------------------------
> 
> rds = colSums(count_matrix)
> med_rds = median(rds)
> summary(rds)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   8811    9671   10017   10478   10895   20085 
> med_rds
[1] 10017
> 
> dim(count_matrix)
[1]  8000 14400
> count_matrix[1:3,1:6]
      cell1 cell2 cell3 cell4 cell5 cell6
gene1     1     1     0     1     0     0
gene2     0     1     0     0     2     0
gene3     0     0     0     2     0     1
> count_matrix = t(t(count_matrix)/rds)*med_rds
> dim(count_matrix)
[1]  8000 14400
> count_matrix[1:3,1:6]
         cell1   cell2 cell3    cell4    cell5    cell6
gene1 1.059888 1.05765     0 1.058432 0.000000 0.000000
gene2 0.000000 1.05765     0 0.000000 2.064722 0.000000
gene3 0.000000 0.00000     0 2.116864 0.000000 1.051654
> summary(colSums(count_matrix))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  10017   10017   10017   10017   10017   10017 
> 
> diagnosis = as.character(meta_cell$phenotype) #
> diagnosis[diagnosis == 1] = "Case"
> diagnosis[diagnosis == 0] = "Control"
>  
> date()
[1] "Mon Jul 12 11:51:25 2021"
> ranksum_pval=apply(count_matrix,1,function(x) wilcox.test(x[diagnosis=="Case"],x[diagnosis=="Control"])$p.value)
> date()
[1] "Mon Jul 12 11:53:33 2021"
> 
> #rm(count_matrix)
> 
> length(ranksum_pval)
[1] 8000
> ranksum_pval[1:4]
       gene1        gene2        gene3        gene4 
3.778149e-01 1.750649e-02 3.433746e-01 1.023243e-08 
> 
> # ---------------------------------------------------------------
> # check p-value
> # ---------------------------------------------------------------
> 
> idx_grp = list(meanDE=mean_index, varDE=var_index, EE=EE_index)
> 
> plot.hist <- function(pvals, idx_grp, label){
+   for(k in 1:length(idx_grp)){
+     idx  = idx_grp[[k]]
+     main = paste(label, names(idx_grp)[k], sep=", ")
+     hist(pvals[idx], main=main, xlab="p-value", breaks=50)
+   }
+ }
> 
> geneType = rep("EE", nrow(count_matrix))
> geneType[mean_index] = "meanDE"
> geneType[var_index]  = "varDE"
> 
> 
> df1=read.table(file=sprintf("results/pval_%s.txt", config), header=TRUE)
> 
> df1 = cbind(df1, data.frame(ranksum_pval))
> #data.frame(geneType, pval_KR, pval_PS, deseq2_pval, 
> #                 mast_pval_glm, mast_pval_glmer,ranksum_pval)
> dim(df1)
[1] 8000   13
> df1[1:2,]
      geneType KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD PS_zinb_Was
gene1       EE       0.987       0.739      0.898      0.543       0.968
gene2       EE       0.427       0.215      0.544      0.637       0.418
      PS_zinb_JSD PS_kde_Was PS_kde_JSD deseq2_pval mast_pval_glm
gene1       0.725      0.892      0.537   0.9386693    0.66139741
gene2       0.186      0.517      0.626   0.3054993    0.01296843
      mast_pval_glmer ranksum_pval
gene1       0.9605528   0.37781487
gene2       0.4805465   0.01750649
> 
> 
> pdf(sprintf("figures/pvalue_hist_ranksum_%s.pdf", config), 
+     width = 9, height = 9)
> par(mfrow = c(3, 3), mar=c(5,4,2,1), pty = "s", bty="n")
> for(k in 2:ncol(df1)){
+   plot.hist(df1[,k], idx_grp, names(df1)[k])
+ }
> dev.off()
null device 
          1 
> 
> # ---------------------------------------------------------------
> # save results
> # ---------------------------------------------------------------
> 
> 
> fun1 <- function(x, alpha){table(x<=alpha)/length(x)}
> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.05)})
$KR_zinb_Was
$KR_zinb_Was$EE

     FALSE       TRUE 
0.94650000 0.04566667 

$KR_zinb_Was$meanDE

FALSE  TRUE 
0.576 0.416 

$KR_zinb_Was$varDE

FALSE  TRUE 
0.651 0.340 


$KR_zinb_JSD
$KR_zinb_JSD$EE

     FALSE       TRUE 
0.94500000 0.04716667 

$KR_zinb_JSD$meanDE

FALSE  TRUE 
0.595 0.397 

$KR_zinb_JSD$varDE

FALSE  TRUE 
0.382 0.609 


$KR_kde_Was
$KR_kde_Was$EE

     FALSE       TRUE 
0.95333333 0.04666667 

$KR_kde_Was$meanDE

FALSE  TRUE 
0.501 0.499 

$KR_kde_Was$varDE

FALSE  TRUE 
0.513 0.487 


$KR_kde_JSD
$KR_kde_JSD$EE

     FALSE       TRUE 
0.94616667 0.05383333 

$KR_kde_JSD$meanDE

FALSE  TRUE 
0.716 0.284 

$KR_kde_JSD$varDE

FALSE  TRUE 
0.698 0.302 


$PS_zinb_Was
$PS_zinb_Was$EE

     FALSE       TRUE 
0.93900000 0.05316667 

$PS_zinb_Was$meanDE

FALSE  TRUE 
0.567 0.425 

$PS_zinb_Was$varDE

FALSE  TRUE 
0.636 0.355 


$PS_zinb_JSD
$PS_zinb_JSD$EE

     FALSE       TRUE 
0.94033333 0.05183333 

$PS_zinb_JSD$meanDE

FALSE  TRUE 
0.579 0.413 

$PS_zinb_JSD$varDE

FALSE  TRUE 
0.372 0.619 


$PS_kde_Was
$PS_kde_Was$EE

 FALSE   TRUE 
0.9485 0.0515 

$PS_kde_Was$meanDE

FALSE  TRUE 
  0.5   0.5 

$PS_kde_Was$varDE

FALSE  TRUE 
0.498 0.502 


$PS_kde_JSD
$PS_kde_JSD$EE

FALSE  TRUE 
0.943 0.057 

$PS_kde_JSD$meanDE

FALSE  TRUE 
0.713 0.287 

$PS_kde_JSD$varDE

FALSE  TRUE 
0.681 0.319 


$deseq2_pval
$deseq2_pval$EE

     FALSE       TRUE 
0.94016667 0.05983333 

$deseq2_pval$meanDE

FALSE  TRUE 
0.424 0.576 

$deseq2_pval$varDE

FALSE  TRUE 
0.944 0.056 


$mast_pval_glm
$mast_pval_glm$EE

FALSE  TRUE 
0.324 0.676 

$mast_pval_glm$meanDE

FALSE  TRUE 
0.056 0.944 

$mast_pval_glm$varDE

TRUE 
   1 


$mast_pval_glmer
$mast_pval_glmer$EE

     FALSE       TRUE 
0.96050000 0.03933333 

$mast_pval_glmer$meanDE

FALSE  TRUE 
 0.64  0.36 

$mast_pval_glmer$varDE

FALSE  TRUE 
0.167 0.833 


$ranksum_pval
$ranksum_pval$EE

    FALSE      TRUE 
0.4336667 0.5663333 

$ranksum_pval$meanDE

FALSE  TRUE 
0.074 0.926 

$ranksum_pval$varDE

FALSE  TRUE 
0.122 0.878 


> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.01)})
$KR_zinb_Was
$KR_zinb_Was$EE

    FALSE      TRUE 
0.9826667 0.0095000 

$KR_zinb_Was$meanDE

FALSE  TRUE 
0.733 0.259 

$KR_zinb_Was$varDE

FALSE  TRUE 
0.861 0.130 


$KR_zinb_JSD
$KR_zinb_JSD$EE

    FALSE      TRUE 
0.9831667 0.0090000 

$KR_zinb_JSD$meanDE

FALSE  TRUE 
0.757 0.235 

$KR_zinb_JSD$varDE

FALSE  TRUE 
0.626 0.365 


$KR_kde_Was
$KR_kde_Was$EE

 FALSE   TRUE 
0.9915 0.0085 

$KR_kde_Was$meanDE

FALSE  TRUE 
  0.7   0.3 

$KR_kde_Was$varDE

FALSE  TRUE 
0.742 0.258 


$KR_kde_JSD
$KR_kde_JSD$EE

     FALSE       TRUE 
0.98966667 0.01033333 

$KR_kde_JSD$meanDE

FALSE  TRUE 
0.868 0.132 

$KR_kde_JSD$varDE

FALSE  TRUE 
0.851 0.149 


$PS_zinb_Was
$PS_zinb_Was$EE

    FALSE      TRUE 
0.9821667 0.0100000 

$PS_zinb_Was$meanDE

FALSE  TRUE 
0.732 0.260 

$PS_zinb_Was$varDE

FALSE  TRUE 
0.861 0.130 


$PS_zinb_JSD
$PS_zinb_JSD$EE

      FALSE        TRUE 
0.982500000 0.009666667 

$PS_zinb_JSD$meanDE

FALSE  TRUE 
0.740 0.252 

$PS_zinb_JSD$varDE

FALSE  TRUE 
0.601 0.390 


$PS_kde_Was
$PS_kde_Was$EE

      FALSE        TRUE 
0.990833333 0.009166667 

$PS_kde_Was$meanDE

FALSE  TRUE 
0.689 0.311 

$PS_kde_Was$varDE

FALSE  TRUE 
0.734 0.266 


$PS_kde_JSD
$PS_kde_JSD$EE

     FALSE       TRUE 
0.98766667 0.01233333 

$PS_kde_JSD$meanDE

FALSE  TRUE 
0.866 0.134 

$PS_kde_JSD$varDE

FALSE  TRUE 
0.847 0.153 


$deseq2_pval
$deseq2_pval$EE

     FALSE       TRUE 
0.98616667 0.01383333 

$deseq2_pval$meanDE

FALSE  TRUE 
0.612 0.388 

$deseq2_pval$varDE

FALSE  TRUE 
0.984 0.016 


$mast_pval_glm
$mast_pval_glm$EE

    FALSE      TRUE 
0.4383333 0.5616667 

$mast_pval_glm$meanDE

FALSE  TRUE 
0.093 0.907 

$mast_pval_glm$varDE

TRUE 
   1 


$mast_pval_glmer
$mast_pval_glmer$EE

     FALSE       TRUE 
0.98950000 0.01033333 

$mast_pval_glmer$meanDE

FALSE  TRUE 
0.767 0.233 

$mast_pval_glmer$varDE

FALSE  TRUE 
0.266 0.734 


$ranksum_pval
$ranksum_pval$EE

    FALSE      TRUE 
0.5378333 0.4621667 

$ranksum_pval$meanDE

FALSE  TRUE 
0.116 0.884 

$ranksum_pval$varDE

FALSE  TRUE 
0.189 0.811 


> 
> write.table(df1, file=sprintf("results/pval_ranksum_%s.txt", config), append=FALSE, 
+             quote=FALSE, sep="\t", row.names = FALSE, col.names = TRUE)
> 
> sessionInfo()
R version 4.0.3 (2020-10-10)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggplot2_3.3.3     data.table_1.13.6 doRNG_1.8.2       rngtools_1.5     
[5] doParallel_1.0.16 iterators_1.0.13  foreach_1.5.1    

loaded via a namespace (and not attached):
 [1] magrittr_2.0.1   tidyselect_1.1.0 munsell_0.5.0    colorspace_2.0-0
 [5] R6_2.5.0         rlang_0.4.10     dplyr_1.0.2      grid_4.0.3      
 [9] gtable_0.3.0     withr_2.3.0      ellipsis_0.3.1   digest_0.6.27   
[13] tibble_3.0.4     lifecycle_0.2.0  crayon_1.3.4     purrr_0.3.4     
[17] vctrs_0.3.6      codetools_0.2-18 glue_1.4.2       compiler_4.0.3  
[21] pillar_1.4.7     generics_0.1.0   scales_1.1.1     pkgconfig_2.0.3 
> 
> #mem_used()
> gc()
            used  (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells    650942  34.8    1222884   65.4         NA   1222884   65.4
Vcells 116617427 889.8  334626268 2553.0      32768 391294176 2985.4
> 
> q(save = "no")
> proc.time()
   user  system elapsed 
122.913  15.112 138.276 
