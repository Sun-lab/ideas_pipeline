
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #########################################################################
> #                                                                       #
> #                                                                       #
> #             Part II: Defferential Expression Analysis                 #
> #                                                                       #
> #                                                                       #
> #########################################################################
> # once simulated genes, we will do the Differential Expression Analysis
> # Here we will implement our method, plus the DESeq2 and the MAST analysis.
> 
> args = commandArgs(trailingOnly=TRUE)
> args
[1] "ncase=13"   "nctrl=10"   "ncell=360"  "r_mean=1.2" "r_var=1.5" 
> 
> if (length(args) < 5) {
+   message("no enough arguments, using default values")
+   r_mean   = 1.2     # The expected fold-changes in mean
+   r_var    = 1.5     # The expected fold-changes in variances
+   ncase    = 13      # case individuals
+   nctrl    = 10      # control individuals
+   ncell    = 360    # numbers of cells collected from each individuals.
+ } else{
+   for(i in 1:length(args)){
+     eval(parse(text=args[[i]]))
+   }
+ }
> 
> if(ncell == 0){
+   UNEQ_N_CELL = TRUE
+ }else{
+   UNEQ_N_CELL = FALSE
+ }
> 
> if(UNEQ_N_CELL){
+   config = sprintf("ncase_%d_nctrl_%d_unequal_n_cell", ncase, nctrl)
+ }else{
+   config = sprintf("ncase_%d_nctrl_%d_ncell_%d", ncase, nctrl, ncell)
+ }
> 
> config = sprintf("%s_fold_mean_%.1f_var_%.1f", config, r_mean, r_var)
> config
[1] "ncase_13_nctrl_10_ncell_360_fold_mean_1.2_var_1.5"
> 
> # ---------------------------------------------------------------
> # additional parameters
> # ---------------------------------------------------------------
> 
> nCore = 6      # number of cores for multi-core computation
> nall  = ncase + nctrl
> 
> # ---------------------------------------------------------------
> # initial setup
> # ---------------------------------------------------------------
> 
> library(MASS)
> library(emdbook)
> library(moments)
> library(MAST)
Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

Loading required package: BiocParallel

Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from ‘package:base’:

    aperm, apply, rowsum


Attaching package: ‘MAST’

The following object is masked from ‘package:stats’:

    filter

> library(lme4)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:S4Vectors’:

    expand

> library(DESeq2)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> library(foreach)
> library(doRNG)
Loading required package: rngtools
> library(MiRKAT)
> library(reticulate)
> library(transport)
> 
> library(data.table)

Attaching package: ‘data.table’

The following object is masked from ‘package:SummarizedExperiment’:

    shift

The following object is masked from ‘package:GenomicRanges’:

    shift

The following object is masked from ‘package:IRanges’:

    shift

The following objects are masked from ‘package:S4Vectors’:

    first, second

> library(pryr)
Registered S3 method overwritten by 'pryr':
  method      from
  print.bytes Rcpp

Attaching package: ‘pryr’

The following object is masked from ‘package:data.table’:

    address

> library(ggplot2)
> library(ggpubr)
Loading required package: magrittr
> theme_set(theme_bw())
> 
> library(ideas)
> 
> registerDoParallel(cores=nCore)
> options(mc.cores=nCore)
> 
> # ---------------------------------------------------------------
> # load data
> # ---------------------------------------------------------------
> 
> sim_data     = readRDS(sprintf("data/sim_data_%s.rds", config))
> count_matrix = sim_data$count_matrix
> meta_cell    = sim_data$meta_cell
> meta_ind     = sim_data$meta_ind
> gene_index   = sim_data$gene_index
> 
> ls()
 [1] "args"         "config"       "count_matrix" "gene_index"   "i"           
 [6] "meta_cell"    "meta_ind"     "nall"         "ncase"        "ncell"       
[11] "nCore"        "nctrl"        "r_mean"       "r_var"        "sim_data"    
[16] "UNEQ_N_CELL" 
> EE_index   = gene_index$EE_index
> mean_index = gene_index$mean_index
> var_index  = gene_index$var_index
> 
> dim(count_matrix)
[1] 8000 8280
> count_matrix[1:3,1:6]
      cell1 cell2 cell3 cell4 cell5 cell6
gene1     1     1     0     0     0     0
gene2     1     1     0     0     2     0
gene3     0     0     0     2     0     1
> 
> dim(meta_cell)
[1] 8280    5
> meta_cell[1:2,]
      cell_id individual phenotype cell_rd      CDR
cell1   cell1       ind1         1    9738 0.439125
cell2   cell2       ind1         1    9605 0.444000
> 
> dim(meta_ind)
[1] 23  3
> meta_ind[1:2,]
     individual phenotype        RIN
ind1       ind1         1 -0.2784552
ind2       ind2         1 -0.7018300
> 
> rm(sim_data)
> gc()
           used  (Mb) gc trigger  (Mb) limit (Mb) max used  (Mb)
Ncells  6934209 370.4   12437792 664.3         NA  9014139 481.5
Vcells 77797511 593.6  114429449 873.1      32768 77857310 594.1
> 
> # ---------------------------------------------------------------
> # 1. DESeq2 analysis 
> # ---------------------------------------------------------------
> # We calculate count_matrix_bulk by adding up raw counts of
> # all cells of an individual within a gene
> # ---------------------------------------------------------------
> 
> # individual level info
> u_ind = unique(meta_cell$individual)
> length(u_ind)
[1] 23
> u_ind[1:2]
[1] "ind1" "ind2"
> 
> count_matrix_bulk = matrix(nrow = nrow(count_matrix),
+                          ncol = length(u_ind))
> rownames(count_matrix_bulk) = rownames(count_matrix)
> colnames(count_matrix_bulk) = u_ind
> 
> for (i_ind in 1:length(u_ind)) {
+   cur_ind   = u_ind[i_ind]
+   cur_ind_m = count_matrix[, meta_cell$individual == cur_ind]
+   count_matrix_bulk[, i_ind] = rowSums(cur_ind_m, na.rm = TRUE)
+ }
> 
> dim(count_matrix_bulk)
[1] 8000   23
> count_matrix_bulk[1:3,1:5]
      ind1 ind2 ind3 ind4 ind5
gene1  131  124  153  187  174
gene2   88   84  220  148  312
gene3   81   83   64  103   69
> 
> meta_ind$phenotype = as.factor(meta_ind$phenotype)
> dim(meta_ind)
[1] 23  3
> meta_ind[1:2,]
     individual phenotype        RIN
ind1       ind1         1 -0.2784552
ind2       ind2         1 -0.7018300
> 
> # DESeq2 for all the genes
> dds = DESeqDataSetFromMatrix(countData = count_matrix_bulk,
+                              colData = meta_ind,
+                              design = ~ RIN + phenotype)
converting counts to integer mode
> 
> dds = DESeq(dds)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
final dispersion estimates
fitting model and testing
> nms = resultsNames(dds)
> nms
[1] "Intercept"        "RIN"              "phenotype_1_vs_0"
> 
> deseq2_pval = results(dds)$pvalue
> 
> rk = results(dds, name="RIN")
> deseq2_pval_RIN = rk$pvalue
> 
> summary(deseq2_pval)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.1793  0.4498  0.4593  0.7253  0.9998 
> summary(deseq2_pval_RIN)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.1023  0.3425  0.3941  0.6550  0.9997 
> table(deseq2_pval[EE_index] < 0.05)

FALSE  TRUE 
 5621   379 
> table(deseq2_pval[EE_index] < 0.05)/length(EE_index)

     FALSE       TRUE 
0.93683333 0.06316667 
> 
> # ---------------------------------------------------------------
> # 2. IDEAS 
> # ---------------------------------------------------------------
> 
> var2test      = "phenotype"
> var2adjust    = "RIN"
> var2test_type = "binary"
> var_per_cell  = "cell_rd"
> 
> dist_list = list()
> 
> for(fit_method in c("zinb", "kde")){
+   for(d_metric in c("Was", "JSD")){
+     message(sprintf("fit_method: %s, d_metric: %s\n", fit_method, d_metric))
+     message(date())
+     
+     label = paste(fit_method, d_metric, sep="_")
+     fnm = sprintf("data/dist_%s_%s.rds", label, config)
+     if(file.exists(fnm)){
+       dist_list[[label]] = readRDS(fnm)
+     }else{
+       dist1 = ideas_dist(count_matrix, meta_cell, meta_ind, 
+                          var_per_cell, var2test, var2adjust, 
+                          var2test_type, d_metric = d_metric, 
+                          fit_method = fit_method)
+       dist_list[[label]] = dist1
+       saveRDS(dist1, fnm)
+     }
+   }
+ }
fit_method: zinb, d_metric: Was

Tue Sep  8 12:44:04 2020
fit_method: zinb, d_metric: JSD

Tue Sep  8 12:44:04 2020
fit_method: kde, d_metric: Was

Tue Sep  8 12:44:05 2020
fit_method: kde, d_metric: JSD

Tue Sep  8 12:44:05 2020
> 
> date()
[1] "Tue Sep  8 12:44:05 2020"
> 
> lapply(dist_list, dim)
$zinb_Was
[1] 8000   23   23

$zinb_JSD
[1] 8000   23   23

$kde_Was
[1] 8000   23   23

$kde_JSD
[1] 8000   23   23

> 
> dist_list$zinb_Was[1,1:3,1:3]
           ind1       ind2       ind3
ind1 0.00000000 0.01576223 0.01505509
ind2 0.01576223 0.00000000 0.03081732
ind3 0.01505509 0.03081732 0.00000000
> dist_list$zinb_JSD[1,1:3,1:3]
             ind1         ind2         ind3
ind1 0.0000000000 0.0001147805 0.0004211501
ind2 0.0001147805 0.0000000000 0.0008482683
ind3 0.0004211501 0.0008482683 0.0000000000
> 
> # ---------------------------------------------------------------
> # STEP 2: pval calculation 
> # ---------------------------------------------------------------
> 
> n_gene = nrow(count_matrix)
> y = as.numeric(meta_ind$phenotype==1)
> 
> pval_KR = matrix(NA, nrow=n_gene, ncol=length(dist_list))
> rownames(pval_KR) = rownames(count_matrix)
> colnames(pval_KR) = paste("KR", names(dist_list), sep="_")
> 
> for(k in 1:length(dist_list)){
+   message(names(dist_list)[k])
+   message(date())
+   dist_k  = dist_list[[k]]
+   pval_KR[,k] = foreach(i_g = 1:dim(dist_k)[1], .combine = "c") %dopar% {
+     Di = dist_k[i_g,,]
+     if(any(is.na(Di))){
+       pval = NA 
+     }else{
+       Ki = D2K(Di)
+       m1 = MiRKAT(y = y, X = meta_ind$RIN, Ks = Ki, out_type = "D", 
+                   method = "permutation")
+       pval = m1$indivP
+     }
+     pval
+   }
+ }
zinb_Was
Tue Sep  8 12:44:05 2020
zinb_JSD
Tue Sep  8 12:45:02 2020
kde_Was
Tue Sep  8 12:46:03 2020
kde_JSD
Tue Sep  8 12:47:10 2020
> date()
[1] "Tue Sep  8 12:48:14 2020"
> 
> dim(pval_KR)
[1] 8000    4
> pval_KR[1:2,]
      KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD
gene1       0.876       0.687      0.978      0.661
gene2          NA          NA      0.707      0.697
> 
> 
> n_perm = 999
> r.seed = 903
> 
> pval_PS = matrix(NA, nrow=n_gene, ncol=length(dist_list))
> rownames(pval_PS) = rownames(count_matrix)
> colnames(pval_PS) = names(dist_list)
> colnames(pval_PS) = paste("PS", names(dist_list), sep="_")
> 
> for(k in 1:length(dist_list)){
+   message(names(dist_list)[k])
+   message(date())
+   dist_k  = dist_list[[k]]
+   pval_PS[,k] = permanova(dist_k, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, 
+                           r.seed=r.seed, residulize.x = FALSE)
+ }
zinb_Was
Tue Sep  8 12:48:14 2020
skip 42 gene(s) with NA in the dist_array

testing for 'phenotype', a binary variable

zinb_JSD
Tue Sep  8 12:51:36 2020
skip 42 gene(s) with NA in the dist_array

testing for 'phenotype', a binary variable

kde_Was
Tue Sep  8 12:55:35 2020
testing for 'phenotype', a binary variable

kde_JSD
Tue Sep  8 12:59:54 2020
testing for 'phenotype', a binary variable

> date()
[1] "Tue Sep  8 13:03:42 2020"
> 
> summary(pval_KR)
  KR_zinb_Was      KR_zinb_JSD       KR_kde_Was       KR_kde_JSD    
 Min.   :0.0010   Min.   :0.0010   Min.   :0.0010   Min.   :0.0010  
 1st Qu.:0.1680   1st Qu.:0.1450   1st Qu.:0.1590   1st Qu.:0.1810  
 Median :0.4185   Median :0.4060   Median :0.4160   Median :0.4300  
 Mean   :0.4403   Mean   :0.4285   Mean   :0.4378   Mean   :0.4488  
 3rd Qu.:0.7047   3rd Qu.:0.6910   3rd Qu.:0.7003   3rd Qu.:0.7050  
 Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  
 NA's   :42       NA's   :42                                        
> summary(pval_PS)
  PS_zinb_Was      PS_zinb_JSD       PS_kde_Was       PS_kde_JSD    
 Min.   :0.0010   Min.   :0.0010   Min.   :0.0010   Min.   :0.0010  
 1st Qu.:0.1630   1st Qu.:0.1430   1st Qu.:0.1540   1st Qu.:0.1780  
 Median :0.4110   Median :0.3990   Median :0.4070   Median :0.4255  
 Mean   :0.4347   Mean   :0.4237   Mean   :0.4326   Mean   :0.4451  
 3rd Qu.:0.7000   3rd Qu.:0.6870   3rd Qu.:0.6923   3rd Qu.:0.7000  
 Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  
 NA's   :42       NA's   :42                                        
> 
> round(cor(-log10(pval_KR), use="pair"),2)
            KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD
KR_zinb_Was        1.00        0.92       0.93       0.62
KR_zinb_JSD        0.92        1.00       0.89       0.63
KR_kde_Was         0.93        0.89       1.00       0.66
KR_kde_JSD         0.62        0.63       0.66       1.00
> round(cor(-log10(pval_PS), use="pair"),2)
            PS_zinb_Was PS_zinb_JSD PS_kde_Was PS_kde_JSD
PS_zinb_Was        1.00        0.92       0.93       0.62
PS_zinb_JSD        0.92        1.00       0.90       0.63
PS_kde_Was         0.93        0.90       1.00       0.66
PS_kde_JSD         0.62        0.63       0.66       1.00
> 
> round(cor(-log10(pval_KR), -log10(pval_PS), use="pair"),2)
            PS_zinb_Was PS_zinb_JSD PS_kde_Was PS_kde_JSD
KR_zinb_Was        0.99        0.91       0.92       0.61
KR_zinb_JSD        0.91        0.99       0.89       0.62
KR_kde_Was         0.92        0.89       0.99       0.66
KR_kde_JSD         0.61        0.63       0.66       0.99
> 
> # ---------------------------------------------------------------
> # 3. MAST analysis 
> # ---------------------------------------------------------------
> #
> # the input of MAST analysis can be matrix or SingleCellAssay.
> #
> # input:
> # (1) the log-transformed expression count matrix,
> #     with each column represents a cell and each row represents a gene.
> # (2) the meta data, including cell and individual information.
> 
> # we get the p-values based on the Hurdle model ("H" model)
> # ---------------------------------------------------------------
> 
> rds = colSums(count_matrix)
> med_rds = median(rds)
> summary(rds)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   8921    9656    9974   10035   10323   14193 
> med_rds
[1] 9974
> 
> dim(count_matrix)
[1] 8000 8280
> count_matrix[1:3,1:6]
      cell1 cell2 cell3 cell4 cell5 cell6
gene1     1     1     0     0     0     0
gene2     1     1     0     0     2     0
gene3     0     0     0     2     0     1
> count_matrix = t(t(count_matrix)/rds)*med_rds
> dim(count_matrix)
[1] 8000 8280
> count_matrix[1:3,1:6]
         cell1    cell2 cell3    cell4    cell5   cell6
gene1 1.024235 1.038417     0 0.000000 0.000000 0.00000
gene2 1.024235 1.038417     0 0.000000 1.858221 0.00000
gene3 0.000000 0.000000     0 1.992608 0.000000 1.03626
> summary(colSums(count_matrix))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   9974    9974    9974    9974    9974    9974 
> 
> count_matrix_log = log2(1 + count_matrix) #log transformed data
> 
> dim(count_matrix_log)
[1] 8000 8280
> count_matrix_log[1:3, 1:4]
         cell1   cell2 cell3    cell4
gene1 1.017377 1.02745     0 0.000000
gene2 1.017377 1.02745     0 0.000000
gene3 0.000000 0.00000     0 1.581403
> cell_id = colnames(count_matrix_log)   # get the cell id from the data
> gene_id = rownames(count_matrix_log)   # get the gene id from the data
> 
> diagnosis = as.character(meta_cell$phenotype) #
> diagnosis[diagnosis == 1] = "Case"
> diagnosis[diagnosis == 0] = "Control"
> 
> fData = data.frame(primerid = gene_id)
> cData = data.frame(wellKey  = cell_id)
> 
> sca = FromMatrix(count_matrix_log, cData, fData)
Assuming data assay in position 1, with name et is log-transformed.
> colData(sca)$cngeneson = as.numeric(meta_cell$CDR)
> colData(sca)$diagnosis = as.factor(diagnosis)
> colData(sca)$ind = as.factor(meta_cell$individual)
> colData(sca)$RIN = meta_ind$RIN[match(meta_cell$individual, 
+                                       meta_ind$individual)]
> 
> colData(sca)
DataFrame with 8280 rows and 5 columns
             wellKey cngeneson diagnosis      ind                RIN
         <character> <numeric>  <factor> <factor>          <numeric>
cell1          cell1  0.439125      Case     ind1 -0.278455206659536
cell2          cell2     0.444      Case     ind1 -0.278455206659536
cell3          cell3     0.438      Case     ind1 -0.278455206659536
cell4          cell4  0.440125      Case     ind1 -0.278455206659536
cell5          cell5  0.442125      Case     ind1 -0.278455206659536
...              ...       ...       ...      ...                ...
cell8276    cell8276   0.43825   Control    ind23 -0.711802340635773
cell8277    cell8277     0.441   Control    ind23 -0.711802340635773
cell8278    cell8278  0.446125   Control    ind23 -0.711802340635773
cell8279    cell8279  0.443375   Control    ind23 -0.711802340635773
cell8280    cell8280  0.445625   Control    ind23 -0.711802340635773
> 
> rm(count_matrix)
> rm(count_matrix_log)
> gc()
           used  (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells  7068616 377.6   12437792  664.3         NA  12437792  664.3
Vcells 99284866 757.5  383127908 2923.1      32768 397497130 3032.7
> gc()
           used  (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells  7068621 377.6   12437792  664.3         NA  12437792  664.3
Vcells 99284885 757.5  306502327 2338.5      32768 397497130 3032.7
> gc()
           used  (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells  7068621 377.6   12437792  664.3         NA  12437792  664.3
Vcells 99284885 757.5  306502327 2338.5      32768 397497130 3032.7
> 
> getOption("mc.cores")
[1] 6
> 
> date()
[1] "Tue Sep  8 13:03:54 2020"
> b0 = zlm(formula = ~ diagnosis + cngeneson + RIN, sca = sca, 
+          parallel = TRUE)

Done!
> date()
[1] "Tue Sep  8 13:09:54 2020"
> b1 = zlm(formula = ~ diagnosis + (1 | ind) + cngeneson + RIN, sca = sca, 
+          method = 'glmer', ebayes = FALSE, parallel = TRUE)
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular

Done!
> date()
[1] "Tue Sep  8 14:19:37 2020"
> 
> b0
Fitted zlm on 8000 genes and 8280 cells.
 Using BayesGLMlike ~ diagnosis + cngeneson + RIN 
> b1
Fitted zlm on 8000 genes and 8280 cells.
 Using LMERlike ~ diagnosis + (1 | ind) + cngeneson + RIN 
> 
> date()
[1] "Tue Sep  8 14:19:37 2020"
> lrt0 = lrTest(b0, "diagnosis")
Refitting on reduced model...

Done!
> date()
[1] "Tue Sep  8 14:25:01 2020"
> lrt1 = lrTest(b1, "diagnosis")
Refitting on reduced model...
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular

Done!
> date()
[1] "Tue Sep  8 15:16:19 2020"
> 
> dim(lrt0)
[1] 8000    3    3
> lrt0[1,,]
         metric
test.type    lambda df Pr(>Chisq)
   cont   0.1287431  1  0.7197388
   disc   0.5324103  1  0.4655953
   hurdle 0.6611534  2  0.7185092
> 
> dim(lrt1)
[1] 8000    3    3
> lrt1[1,,]
         metric
test.type     lambda df Pr(>Chisq)
   cont   0.12731985  1  0.7212273
   disc   0.03572821  1  0.8500779
   hurdle 0.16304807  2  0.9217106
> 
> mast_pval_glm = apply(lrt0, 1, function(x){x[3,3]})
> length(mast_pval_glm)
[1] 8000
> mast_pval_glm[1:4]
       gene1        gene2        gene3        gene4 
7.185092e-01 3.992793e-01 3.223207e-01 1.696676e-12 
> 
> mast_pval_glmer = apply(lrt1, 1, function(x){x[3,3]})
> length(mast_pval_glmer)
[1] 8000
> mast_pval_glmer[1:4]
     gene1      gene2      gene3      gene4 
0.92171056 0.81250349 0.41590648 0.02575646 
> 
> # ---------------------------------------------------------------
> # check p-value
> # ---------------------------------------------------------------
> 
> idx_grp = list(meanDE=mean_index, varDE=var_index, EE=EE_index)
> 
> plot.hist <- function(pvals, idx_grp, label){
+   for(k in 1:length(idx_grp)){
+     idx  = idx_grp[[k]]
+     main = paste(label, names(idx_grp)[k], sep=", ")
+     hist(pvals[idx], main=main, xlab="p-value", breaks=50)
+   }
+ }
> 
> geneType = rep("EE", n_gene)
> geneType[mean_index] = "meanDE"
> geneType[var_index]  = "varDE"
> 
> df1 = data.frame(geneType, pval_KR, pval_PS, deseq2_pval, 
+                  mast_pval_glm, mast_pval_glmer)
> dim(df1)
[1] 8000   12
> df1[1:2,]
      geneType KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD PS_zinb_Was
gene1       EE       0.876       0.687      0.978      0.661        0.86
gene2       EE          NA          NA      0.707      0.697          NA
      PS_zinb_JSD PS_kde_Was PS_kde_JSD deseq2_pval mast_pval_glm
gene1       0.672      0.961      0.612   0.9550934     0.7185092
gene2          NA      0.731      0.671   0.8430156     0.3992793
      mast_pval_glmer
gene1       0.9217106
gene2       0.8125035
> 
> 
> pdf(sprintf("figures/pvalue_hist_%s.pdf", config), 
+     width = 9, height = 9)
> par(mfrow = c(3, 3), mar=c(5,4,2,1), pty = "s", bty="n")
> for(k in 2:ncol(df1)){
+   plot.hist(df1[,k], idx_grp, names(df1)[k])
+ }
> dev.off()
null device 
          1 
> 
> # ---------------------------------------------------------------
> # save results
> # ---------------------------------------------------------------
> 
> 
> fun1 <- function(x, alpha){table(x<=alpha)/length(x)}
> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.05)})
$KR_zinb_Was
$KR_zinb_Was$EE

     FALSE       TRUE 
0.94683333 0.04833333 

$KR_zinb_Was$meanDE

FALSE  TRUE 
0.685 0.311 

$KR_zinb_Was$varDE

FALSE  TRUE 
0.736 0.255 


$KR_zinb_JSD
$KR_zinb_JSD$EE

    FALSE      TRUE 
0.9441667 0.0510000 

$KR_zinb_JSD$meanDE

FALSE  TRUE 
0.686 0.310 

$KR_zinb_JSD$varDE

FALSE  TRUE 
0.512 0.479 


$KR_kde_Was
$KR_kde_Was$EE

FALSE  TRUE 
0.955 0.045 

$KR_kde_Was$meanDE

FALSE  TRUE 
0.653 0.347 

$KR_kde_Was$varDE

FALSE  TRUE 
0.667 0.333 


$KR_kde_JSD
$KR_kde_JSD$EE

FALSE  TRUE 
0.948 0.052 

$KR_kde_JSD$meanDE

FALSE  TRUE 
0.782 0.218 

$KR_kde_JSD$varDE

FALSE  TRUE 
0.722 0.278 


$PS_zinb_Was
$PS_zinb_Was$EE

     FALSE       TRUE 
0.94600000 0.04916667 

$PS_zinb_Was$meanDE

FALSE  TRUE 
0.685 0.311 

$PS_zinb_Was$varDE

FALSE  TRUE 
0.730 0.261 


$PS_zinb_JSD
$PS_zinb_JSD$EE

    FALSE      TRUE 
0.9441667 0.0510000 

$PS_zinb_JSD$meanDE

FALSE  TRUE 
0.691 0.305 

$PS_zinb_JSD$varDE

FALSE  TRUE 
0.509 0.482 


$PS_kde_Was
$PS_kde_Was$EE

 FALSE   TRUE 
0.9515 0.0485 

$PS_kde_Was$meanDE

FALSE  TRUE 
0.642 0.358 

$PS_kde_Was$varDE

FALSE  TRUE 
0.647 0.353 


$PS_kde_JSD
$PS_kde_JSD$EE

 FALSE   TRUE 
0.9475 0.0525 

$PS_kde_JSD$meanDE

FALSE  TRUE 
0.782 0.218 

$PS_kde_JSD$varDE

FALSE  TRUE 
0.731 0.269 


$deseq2_pval
$deseq2_pval$EE

     FALSE       TRUE 
0.93683333 0.06316667 

$deseq2_pval$meanDE

FALSE  TRUE 
0.585 0.415 

$deseq2_pval$varDE

FALSE  TRUE 
0.929 0.071 


$mast_pval_glm
$mast_pval_glm$EE

 FALSE   TRUE 
0.4225 0.5775 

$mast_pval_glm$meanDE

FALSE  TRUE 
0.117 0.883 

$mast_pval_glm$varDE

FALSE  TRUE 
0.003 0.997 


$mast_pval_glmer
$mast_pval_glmer$EE

     FALSE       TRUE 
0.93583333 0.06416667 

$mast_pval_glmer$meanDE

FALSE  TRUE 
0.649 0.351 

$mast_pval_glmer$varDE

FALSE  TRUE 
0.194 0.806 


> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.01)})
$KR_zinb_Was
$KR_zinb_Was$EE

     FALSE       TRUE 
0.98483333 0.01033333 

$KR_zinb_Was$meanDE

FALSE  TRUE 
0.824 0.172 

$KR_zinb_Was$varDE

FALSE  TRUE 
0.886 0.105 


$KR_zinb_JSD
$KR_zinb_JSD$EE

    FALSE      TRUE 
0.9846667 0.0105000 

$KR_zinb_JSD$meanDE

FALSE  TRUE 
0.841 0.155 

$KR_zinb_JSD$varDE

FALSE  TRUE 
0.697 0.294 


$KR_kde_Was
$KR_kde_Was$EE

      FALSE        TRUE 
0.991166667 0.008833333 

$KR_kde_Was$meanDE

FALSE  TRUE 
0.812 0.188 

$KR_kde_Was$varDE

FALSE  TRUE 
 0.83  0.17 


$KR_kde_JSD
$KR_kde_JSD$EE

      FALSE        TRUE 
0.990833333 0.009166667 

$KR_kde_JSD$meanDE

FALSE  TRUE 
0.907 0.093 

$KR_kde_JSD$varDE

FALSE  TRUE 
0.866 0.134 


$PS_zinb_Was
$PS_zinb_Was$EE

     FALSE       TRUE 
0.98433333 0.01083333 

$PS_zinb_Was$meanDE

FALSE  TRUE 
0.827 0.169 

$PS_zinb_Was$varDE

FALSE  TRUE 
0.884 0.107 


$PS_zinb_JSD
$PS_zinb_JSD$EE

     FALSE       TRUE 
0.98350000 0.01166667 

$PS_zinb_JSD$meanDE

FALSE  TRUE 
0.839 0.157 

$PS_zinb_JSD$varDE

FALSE  TRUE 
0.699 0.292 


$PS_kde_Was
$PS_kde_Was$EE

FALSE  TRUE 
0.991 0.009 

$PS_kde_Was$meanDE

FALSE  TRUE 
 0.81  0.19 

$PS_kde_Was$varDE

FALSE  TRUE 
0.825 0.175 


$PS_kde_JSD
$PS_kde_JSD$EE

      FALSE        TRUE 
0.990833333 0.009166667 

$PS_kde_JSD$meanDE

FALSE  TRUE 
 0.91  0.09 

$PS_kde_JSD$varDE

FALSE  TRUE 
0.869 0.131 


$deseq2_pval
$deseq2_pval$EE

     FALSE       TRUE 
0.98183333 0.01816667 

$deseq2_pval$meanDE

FALSE  TRUE 
0.755 0.245 

$deseq2_pval$varDE

FALSE  TRUE 
0.985 0.015 


$mast_pval_glm
$mast_pval_glm$EE

 FALSE   TRUE 
0.5275 0.4725 

$mast_pval_glm$meanDE

FALSE  TRUE 
0.187 0.813 

$mast_pval_glm$varDE

FALSE  TRUE 
0.005 0.995 


$mast_pval_glmer
$mast_pval_glmer$EE

     FALSE       TRUE 
0.97966667 0.02033333 

$mast_pval_glmer$meanDE

FALSE  TRUE 
0.792 0.208 

$mast_pval_glmer$varDE

FALSE  TRUE 
0.318 0.682 


> 
> write.table(df1, file=sprintf("results/pval_%s.txt", config), append=FALSE, 
+             quote=FALSE, sep="\t", row.names = FALSE, col.names = TRUE)
> 
> sessionInfo()
R version 3.6.2 (2019-12-12)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Catalina 10.15.6

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] ideas_0.991                 ggpubr_0.2.5               
 [3] magrittr_1.5                ggplot2_3.3.1              
 [5] pryr_0.1.4                  data.table_1.12.8          
 [7] transport_0.12-2            reticulate_1.15            
 [9] MiRKAT_1.1.0                doRNG_1.8.2                
[11] rngtools_1.5                doParallel_1.0.15          
[13] iterators_1.0.12            foreach_1.4.7              
[15] DESeq2_1.24.0               lme4_1.1-21                
[17] Matrix_1.2-18               MAST_1.10.0                
[19] SingleCellExperiment_1.6.0  SummarizedExperiment_1.14.1
[21] DelayedArray_0.10.0         BiocParallel_1.18.1        
[23] matrixStats_0.55.0          Biobase_2.44.0             
[25] GenomicRanges_1.36.1        GenomeInfoDb_1.20.0        
[27] IRanges_2.18.3              S4Vectors_0.22.1           
[29] BiocGenerics_0.30.0         moments_0.14               
[31] emdbook_1.3.11              MASS_7.3-51.5              

loaded via a namespace (and not attached):
  [1] minqa_1.2.4            colorspace_1.4-1       ggsignif_0.6.0        
  [4] ellipsis_0.3.0         htmlTable_1.13.3       XVector_0.24.0        
  [7] base64enc_0.1-3        rstudioapi_0.11        MatrixModels_0.4-1    
 [10] bit64_0.9-7            AnnotationDbi_1.46.1   mvtnorm_1.0-12        
 [13] codetools_0.2-16       splines_3.6.2          pscl_1.5.5            
 [16] geneplotter_1.62.0     knitr_1.28             jsonlite_1.6.1        
 [19] Formula_1.2-3          nloptr_1.2.1           annotate_1.62.0       
 [22] kernlab_0.9-29         cluster_2.1.0          png_0.1-7             
 [25] compiler_3.6.2         backports_1.1.5        assertthat_0.2.1      
 [28] prettyunits_1.1.1      quantreg_5.55          acepack_1.4.1         
 [31] htmltools_0.4.0        tools_3.6.2            coda_0.19-3           
 [34] gtable_0.3.0           glue_1.3.1             GenomeInfoDbData_1.2.1
 [37] reshape2_1.4.3         dplyr_0.8.4            Rcpp_1.0.3            
 [40] bbmle_1.0.23.1         vctrs_0.3.0            ape_5.3               
 [43] nlme_3.1-144           xfun_0.12              stringr_1.4.0         
 [46] CompQuadForm_1.4.3     lifecycle_0.2.0        GUniFrac_1.1          
 [49] XML_3.99-0.3           PearsonDS_1.1          zlibbioc_1.30.0       
 [52] scales_1.1.0           hms_0.5.3              SparseM_1.78          
 [55] RColorBrewer_1.1-2     memoise_1.1.0          gridExtra_2.3         
 [58] segmented_1.2-0        bdsmatrix_1.3-4        rpart_4.1-15          
 [61] latticeExtra_0.6-29    stringi_1.4.5          RSQLite_2.2.0         
 [64] genefilter_1.66.0      blme_1.0-4             checkmate_2.0.0       
 [67] permute_0.9-5          boot_1.3-24            rlang_0.4.6           
 [70] pkgconfig_2.0.3        bitops_1.0-6           lattice_0.20-38       
 [73] purrr_0.3.3            htmlwidgets_1.5.1      bit_1.1-15.2          
 [76] tidyselect_1.0.0       plyr_1.8.5             R6_2.4.1              
 [79] Hmisc_4.4-0            DBI_1.1.0              withr_2.1.2           
 [82] pillar_1.4.3           foreign_0.8-75         mgcv_1.8-31           
 [85] mixtools_1.2.0         survival_3.1-8         abind_1.4-5           
 [88] RCurl_1.98-1.1         nnet_7.3-12            tibble_3.0.1          
 [91] crayon_1.3.4           progress_1.2.2         jpeg_0.1-8.1          
 [94] locfit_1.5-9.4         grid_3.6.2             blob_1.2.1            
 [97] vegan_2.5-6            digest_0.6.23          xtable_1.8-4          
[100] numDeriv_2016.8-1.1    munsell_0.5.0         
> 
> mem_used()
1.22 GB
> gc()
            used  (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   7219719 385.6   12437792  664.3         NA  12437792  664.3
Vcells 102165272 779.5  300421043 2292.1      32768 469407878 3581.3
> 
> q(save = "no")
> proc.time()
     user    system   elapsed 
46567.147  2927.393  9154.111 
