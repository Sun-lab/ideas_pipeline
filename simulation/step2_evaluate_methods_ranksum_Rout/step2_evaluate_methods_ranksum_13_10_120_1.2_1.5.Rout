
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #########################################################################
> #                                                                       #
> #                                                                       #
> #             Part II: Defferential Expression Analysis                 #
> #                                                                       #
> #                                                                       #
> #########################################################################
> # once simulated genes, we will do the Differential Expression Analysis
> # Here we will implement our method, plus the DESeq2 and the MAST analysis.
> 
> args = commandArgs(trailingOnly=TRUE)
> args
[1] "ncase=13"   "nctrl=10"   "ncell=120"  "r_mean=1.2" "r_var=1.5" 
> 
> if (length(args) < 5) {
+   message("no enough arguments, using default values")
+   r_mean   = 1.2     # The expected fold-changes in mean
+   r_var    = 1.5     # The expected fold-changes in variances
+   ncase    = 13      # case individuals
+   nctrl    = 10      # control individuals
+   ncell    = 360    # numbers of cells collected from each individuals.
+ } else{
+   for(i in 1:length(args)){
+     eval(parse(text=args[[i]]))
+   }
+ }
> 
> if(ncell == 0){
+   UNEQ_N_CELL = TRUE
+ }else{
+   UNEQ_N_CELL = FALSE
+ }
> 
> if(UNEQ_N_CELL){
+   config = sprintf("ncase_%d_nctrl_%d_unequal_n_cell", ncase, nctrl)
+ }else{
+   config = sprintf("ncase_%d_nctrl_%d_ncell_%d", ncase, nctrl, ncell)
+ }
> 
> config = sprintf("%s_fold_mean_%.1f_var_%.1f", config, r_mean, r_var)
> config
[1] "ncase_13_nctrl_10_ncell_120_fold_mean_1.2_var_1.5"
> 
> # ---------------------------------------------------------------
> # additional parameters
> # ---------------------------------------------------------------
> 
> nCore = 6      # number of cores for multi-core computation
> nall  = ncase + nctrl
> 
> # ---------------------------------------------------------------
> # initial setup
> # ---------------------------------------------------------------
> 
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> library(foreach)
> library(doRNG)
Loading required package: rngtools
> 
> library(data.table)
> library(ggplot2)
> theme_set(theme_bw())
> 
> registerDoParallel(cores=nCore)
> options(mc.cores=nCore)
> 
> # ---------------------------------------------------------------
> # load data
> # ---------------------------------------------------------------
> 
> sim_data     = readRDS(sprintf("data/sim_data_%s.rds", config))
> count_matrix = sim_data$count_matrix
> meta_cell    = sim_data$meta_cell
> meta_ind     = sim_data$meta_ind
> gene_index   = sim_data$gene_index
> 
> ls()
 [1] "args"         "config"       "count_matrix" "gene_index"   "i"           
 [6] "meta_cell"    "meta_ind"     "nall"         "ncase"        "ncell"       
[11] "nCore"        "nctrl"        "r_mean"       "r_var"        "sim_data"    
[16] "UNEQ_N_CELL" 
> EE_index   = gene_index$EE_index
> mean_index = gene_index$mean_index
> var_index  = gene_index$var_index
> 
> dim(count_matrix)
[1] 8000 2760
> count_matrix[1:3,1:6]
      cell1 cell2 cell3 cell4 cell5 cell6
gene1     1     1     0     0     0     0
gene2     1     1     0     0     2     0
gene3     0     0     0     2     0     1
> 
> dim(meta_cell)
[1] 2760    5
> meta_cell[1:2,]
      cell_id individual phenotype cell_rd      CDR
cell1   cell1       ind1         1    9738 0.439125
cell2   cell2       ind1         1    9605 0.444000
> 
> dim(meta_ind)
[1] 23  3
> 
> rm(sim_data)
> gc()
           used  (Mb) gc trigger  (Mb) max used  (Mb)
Ncells   616325  33.0    1231080  65.8  1231080  65.8
Vcells 23153582 176.7   35826111 273.4 23219125 177.2
> 
> 
> # ---------------------------------------------------------------
> # 4. ranksum analysis 
> # ---------------------------------------------------------------
> #
> # the input of ranksum analysis can be matrix.
> #
> # input:
> # (1) the expression count matrix,
> #     with each column represents a cell and each row represents a gene.
> # (2) the meta data, including cell individual information.
> 
> # ---------------------------------------------------------------
> 
> rds = colSums(count_matrix)
> med_rds = median(rds)
> summary(rds)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   9031    9664    9979   10042   10326   12681 
> med_rds
[1] 9979
> 
> dim(count_matrix)
[1] 8000 2760
> count_matrix[1:3,1:6]
      cell1 cell2 cell3 cell4 cell5 cell6
gene1     1     1     0     0     0     0
gene2     1     1     0     0     2     0
gene3     0     0     0     2     0     1
> count_matrix = t(t(count_matrix)/rds)*med_rds
> dim(count_matrix)
[1] 8000 2760
> count_matrix[1:3,1:6]
         cell1    cell2 cell3    cell4    cell5    cell6
gene1 1.024748 1.038938     0 0.000000 0.000000 0.000000
gene2 1.024748 1.038938     0 0.000000 1.859152 0.000000
gene3 0.000000 0.000000     0 1.993607 0.000000 1.036779
> summary(colSums(count_matrix))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   9979    9979    9979    9979    9979    9979 
> 
> diagnosis = as.character(meta_cell$phenotype) #
> diagnosis[diagnosis == 1] = "Case"
> diagnosis[diagnosis == 0] = "Control"
>  
> date()
[1] "Thu Jun 10 15:03:31 2021"
> ranksum_pval=apply(count_matrix,1,function(x) wilcox.test(x[diagnosis=="Case"],x[diagnosis=="Control"])$p.value)
> date()
[1] "Thu Jun 10 15:04:17 2021"
> 
> #rm(count_matrix)
> 
> length(ranksum_pval)
[1] 8000
> ranksum_pval[1:4]
      gene1       gene2       gene3       gene4 
0.131445808 0.476527367 0.534430227 0.005853285 
> 
> # ---------------------------------------------------------------
> # check p-value
> # ---------------------------------------------------------------
> 
> idx_grp = list(meanDE=mean_index, varDE=var_index, EE=EE_index)
> 
> plot.hist <- function(pvals, idx_grp, label){
+   for(k in 1:length(idx_grp)){
+     idx  = idx_grp[[k]]
+     main = paste(label, names(idx_grp)[k], sep=", ")
+     hist(pvals[idx], main=main, xlab="p-value", breaks=50)
+   }
+ }
> 
> geneType = rep("EE", nrow(count_matrix))
> geneType[mean_index] = "meanDE"
> geneType[var_index]  = "varDE"
> 
> 
> df1=read.table(file=sprintf("results/pval_%s.txt", config), header=TRUE)
> 
> df1 = cbind(df1, data.frame(ranksum_pval))
> #data.frame(geneType, pval_KR, pval_PS, deseq2_pval, 
> #                 mast_pval_glm, mast_pval_glmer,ranksum_pval)
> dim(df1)
[1] 8000   13
> df1[1:2,]
      geneType KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD PS_zinb_Was
gene1       EE       0.876       0.899       0.70      0.960       0.889
gene2       EE       0.489       0.785       0.72      0.222       0.459
      PS_zinb_JSD PS_kde_Was PS_kde_JSD deseq2_pval mast_pval_glm
gene1       0.874      0.687      0.952   0.6918171     0.3413472
gene2       0.803      0.688      0.198   0.9335462     0.4519323
      mast_pval_glmer ranksum_pval
gene1       0.7092529    0.1314458
gene2       0.9267088    0.4765274
> 
> 
> pdf(sprintf("figures/pvalue_hist_ranksum_%s.pdf", config), 
+     width = 9, height = 9)
> par(mfrow = c(3, 3), mar=c(5,4,2,1), pty = "s", bty="n")
> for(k in 2:ncol(df1)){
+   plot.hist(df1[,k], idx_grp, names(df1)[k])
+ }
> dev.off()
null device 
          1 
> 
> # ---------------------------------------------------------------
> # save results
> # ---------------------------------------------------------------
> 
> 
> fun1 <- function(x, alpha){table(x<=alpha)/length(x)}
> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.05)})
$KR_zinb_Was
$KR_zinb_Was$EE

    FALSE      TRUE 
0.9466667 0.0505000 

$KR_zinb_Was$meanDE

FALSE  TRUE 
0.756 0.241 

$KR_zinb_Was$varDE

FALSE  TRUE 
0.845 0.152 


$KR_zinb_JSD
$KR_zinb_JSD$EE

     FALSE       TRUE 
0.94050000 0.05666667 

$KR_zinb_JSD$meanDE

FALSE  TRUE 
0.762 0.235 

$KR_zinb_JSD$varDE

FALSE  TRUE 
0.636 0.361 


$KR_kde_Was
$KR_kde_Was$EE

     FALSE       TRUE 
0.94833333 0.05166667 

$KR_kde_Was$meanDE

FALSE  TRUE 
0.738 0.262 

$KR_kde_Was$varDE

FALSE  TRUE 
0.766 0.234 


$KR_kde_JSD
$KR_kde_JSD$EE

     FALSE       TRUE 
0.95166667 0.04833333 

$KR_kde_JSD$meanDE

FALSE  TRUE 
0.815 0.185 

$KR_kde_JSD$varDE

FALSE  TRUE 
  0.8   0.2 


$PS_zinb_Was
$PS_zinb_Was$EE

    FALSE      TRUE 
0.9446667 0.0525000 

$PS_zinb_Was$meanDE

FALSE  TRUE 
0.752 0.245 

$PS_zinb_Was$varDE

FALSE  TRUE 
0.844 0.153 


$PS_zinb_JSD
$PS_zinb_JSD$EE

     FALSE       TRUE 
0.94233333 0.05483333 

$PS_zinb_JSD$meanDE

FALSE  TRUE 
0.762 0.235 

$PS_zinb_JSD$varDE

FALSE  TRUE 
0.637 0.360 


$PS_kde_Was
$PS_kde_Was$EE

     FALSE       TRUE 
0.94866667 0.05133333 

$PS_kde_Was$meanDE

FALSE  TRUE 
0.733 0.267 

$PS_kde_Was$varDE

FALSE  TRUE 
0.762 0.238 


$PS_kde_JSD
$PS_kde_JSD$EE

     FALSE       TRUE 
0.95566667 0.04433333 

$PS_kde_JSD$meanDE

FALSE  TRUE 
0.815 0.185 

$PS_kde_JSD$varDE

FALSE  TRUE 
0.801 0.199 


$deseq2_pval
$deseq2_pval$EE

FALSE  TRUE 
0.941 0.059 

$deseq2_pval$meanDE

FALSE  TRUE 
0.637 0.363 

$deseq2_pval$varDE

FALSE  TRUE 
0.936 0.064 


$mast_pval_glm
$mast_pval_glm$EE

 FALSE   TRUE 
0.6045 0.3955 

$mast_pval_glm$meanDE

FALSE  TRUE 
0.297 0.703 

$mast_pval_glm$varDE

FALSE  TRUE 
0.012 0.988 


$mast_pval_glmer
$mast_pval_glmer$EE

     FALSE       TRUE 
0.92850000 0.07066667 

$mast_pval_glmer$meanDE

FALSE  TRUE 
0.696 0.304 

$mast_pval_glmer$varDE

FALSE  TRUE 
0.292 0.708 


$ranksum_pval
$ranksum_pval$EE

    FALSE      TRUE 
0.6156667 0.3843333 

$ranksum_pval$meanDE

FALSE  TRUE 
0.298 0.702 

$ranksum_pval$varDE

FALSE  TRUE 
0.383 0.617 


> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.01)})
$KR_zinb_Was
$KR_zinb_Was$EE

      FALSE        TRUE 
0.987333333 0.009833333 

$KR_zinb_Was$meanDE

FALSE  TRUE 
0.886 0.111 

$KR_zinb_Was$varDE

FALSE  TRUE 
0.954 0.043 


$KR_zinb_JSD
$KR_zinb_JSD$EE

    FALSE      TRUE 
0.9871667 0.0100000 

$KR_zinb_JSD$meanDE

FALSE  TRUE 
0.899 0.098 

$KR_zinb_JSD$varDE

FALSE  TRUE 
0.834 0.163 


$KR_kde_Was
$KR_kde_Was$EE

      FALSE        TRUE 
0.991666667 0.008333333 

$KR_kde_Was$meanDE

FALSE  TRUE 
0.886 0.114 

$KR_kde_Was$varDE

FALSE  TRUE 
 0.91  0.09 


$KR_kde_JSD
$KR_kde_JSD$EE

 FALSE   TRUE 
0.9905 0.0095 

$KR_kde_JSD$meanDE

FALSE  TRUE 
0.926 0.074 

$KR_kde_JSD$varDE

FALSE  TRUE 
0.921 0.079 


$PS_zinb_Was
$PS_zinb_Was$EE

     FALSE       TRUE 
0.98700000 0.01016667 

$PS_zinb_Was$meanDE

FALSE  TRUE 
0.893 0.104 

$PS_zinb_Was$varDE

FALSE  TRUE 
0.955 0.042 


$PS_zinb_JSD
$PS_zinb_JSD$EE

    FALSE      TRUE 
0.9876667 0.0095000 

$PS_zinb_JSD$meanDE

FALSE  TRUE 
0.907 0.090 

$PS_zinb_JSD$varDE

FALSE  TRUE 
0.835 0.162 


$PS_kde_Was
$PS_kde_Was$EE

      FALSE        TRUE 
0.990833333 0.009166667 

$PS_kde_Was$meanDE

FALSE  TRUE 
 0.89  0.11 

$PS_kde_Was$varDE

FALSE  TRUE 
0.906 0.094 


$PS_kde_JSD
$PS_kde_JSD$EE

      FALSE        TRUE 
0.991166667 0.008833333 

$PS_kde_JSD$meanDE

FALSE  TRUE 
0.931 0.069 

$PS_kde_JSD$varDE

FALSE  TRUE 
0.926 0.074 


$deseq2_pval
$deseq2_pval$EE

     FALSE       TRUE 
0.98316667 0.01683333 

$deseq2_pval$meanDE

FALSE  TRUE 
0.821 0.179 

$deseq2_pval$varDE

FALSE  TRUE 
0.984 0.016 


$mast_pval_glm
$mast_pval_glm$EE

    FALSE      TRUE 
0.7231667 0.2768333 

$mast_pval_glm$meanDE

FALSE  TRUE 
0.399 0.601 

$mast_pval_glm$varDE

FALSE  TRUE 
0.038 0.962 


$mast_pval_glmer
$mast_pval_glmer$EE

    FALSE      TRUE 
0.9796667 0.0195000 

$mast_pval_glmer$meanDE

FALSE  TRUE 
0.843 0.157 

$mast_pval_glmer$varDE

FALSE  TRUE 
0.448 0.552 


$ranksum_pval
$ranksum_pval$EE

FALSE  TRUE 
0.728 0.272 

$ranksum_pval$meanDE

FALSE  TRUE 
0.401 0.599 

$ranksum_pval$varDE

FALSE  TRUE 
0.493 0.507 


> 
> write.table(df1, file=sprintf("results/pval_ranksum_%s.txt", config), append=FALSE, 
+             quote=FALSE, sep="\t", row.names = FALSE, col.names = TRUE)
> 
> sessionInfo()
R version 4.1.0 (2021-05-18)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.5 LTS

Matrix products: default
BLAS/LAPACK: /opt/intel/compilers_and_libraries_2018.2.199/linux/mkl/lib/intel64_lin/libmkl_rt.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggplot2_3.3.3     data.table_1.14.0 doRNG_1.8.2       rngtools_1.5     
[5] doParallel_1.0.16 iterators_1.0.13  foreach_1.5.1    

loaded via a namespace (and not attached):
 [1] magrittr_2.0.1   tidyselect_1.1.1 munsell_0.5.0    colorspace_2.0-1
 [5] R6_2.5.0         rlang_0.4.11     fansi_0.5.0      dplyr_1.0.6     
 [9] grid_4.1.0       gtable_0.3.0     utf8_1.2.1       withr_2.4.2     
[13] ellipsis_0.3.2   digest_0.6.27    tibble_3.1.2     lifecycle_1.0.0 
[17] crayon_1.4.1     purrr_0.3.4      vctrs_0.3.8      codetools_0.2-18
[21] glue_1.4.2       compiler_4.1.0   pillar_1.6.1     generics_0.1.0  
[25] scales_1.1.1     pkgconfig_2.0.3 
> 
> #mem_used()
> gc()
           used  (Mb) gc trigger  (Mb) max used  (Mb)
Ncells   645665  34.5    1231080  65.8  1231080  65.8
Vcells 23351890 178.2   82885540 632.4 81752687 623.8
> 
> q(save = "no")
> proc.time()
   user  system elapsed 
 49.365   0.877  54.996 
