
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # setwd("/fh/fast/sun_w/mengqi/1.Testing_scRNAseq/github/ideas/simulation")
> 
> #########################################################################
> #                                                                       #
> #                                                                       #
> #             Part II: Defferential Expression Analysis                 #
> #                                                                       #
> #                                                                       #
> #########################################################################
> # once simulated genes, we will do the Differential Expression Analysis
> # Here we will implement our method, plus the DESeq2 and the MAST analysis.
> 
> args = commandArgs(trailingOnly=TRUE)
> args
[1] "ncase=13"  "nctrl=10"  "ncell=360" "r_dp=0.3"  "r_db=0.8" 
> 
> if (length(args) < 5) {
+   message("no enough arguments, using default values")
+   r_dp     = 0.2    # The expected fold-changes in dp
+   r_db     = 0.6     # The expected fold-changes in multimodality
+   ncase    = 13      # case individuals
+   nctrl    = 10      # control individuals
+   ncell    = 360    # numbers of cells collected from each individuals.
+ } else{
+   for(i in 1:length(args)){
+     eval(parse(text=args[[i]]))
+   }
+ }
> 
> config = sprintf("ncase_%d_nctrl_%d_ncell_%d", ncase, nctrl, ncell)
> config = sprintf("%s_fold_dp_%.1f_db_%.1f", config, r_dp, r_db)
> config
[1] "ncase_13_nctrl_10_ncell_360_fold_dp_0.3_db_0.8"
> 
> # ---------------------------------------------------------------
> # additional parameters
> # ---------------------------------------------------------------
> 
> nCore      = 12      # number of cores for multi-core computation
> nGeneDP    = 500    # number of genes with different DPs in cases
> nGeneMult  = 500    # number of genes with different DBs in cases
> nGeneBlank = 3000   # number of genes equivalently expressed
> nGeneTotal = nGeneDP + nGeneMult + nGeneBlank # total numbers of genes
> nall       = ncase + nctrl
> 
> # ---------------------------------------------------------------
> # initial setup
> # ---------------------------------------------------------------
> 
> library(MASS)
> library(emdbook)
> library(moments)
> library(MAST)
Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

Loading required package: BiocParallel

Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from ‘package:base’:

    aperm, apply, rowsum


Attaching package: ‘MAST’

The following object is masked from ‘package:stats’:

    filter

> library(lme4)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:S4Vectors’:

    expand

> library(DESeq2)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> library(foreach)
> library(doRNG)
Loading required package: rngtools
> library(MiRKAT)
> library(reticulate)
> library(pryr)
Registered S3 method overwritten by 'pryr':
  method      from
  print.bytes Rcpp
> library(ggplot2)
> # library(ggpubr)
> theme_set(theme_bw())
> 
> library(ideas)
> 
> registerDoParallel(cores=nCore)
> options(mc.cores=nCore)
> 
> # ---------------------------------------------------------------
> # load data
> # ---------------------------------------------------------------
> 
> gene_index = readRDS(sprintf("data/gene_index_%s.rds", config))
> sim_matrix = readRDS(sprintf("data/sim_matrix_%s.rds", config))
> meta_cell  = readRDS(sprintf("data/meta_%s.rds", config))
> meta_ind   = readRDS(sprintf("data/meta_ind_%s.rds", config))
> 
> ls()
 [1] "args"       "config"     "gene_index" "i"          "meta_cell" 
 [6] "meta_ind"   "nall"       "ncase"      "ncell"      "nCore"     
[11] "nctrl"      "nGeneBlank" "nGeneDP"    "nGeneMult"  "nGeneTotal"
[16] "r_db"       "r_dp"       "sim_matrix"
> EE_index   = gene_index$EE_index
> dp_index   = gene_index$dp_index
> db_index   = gene_index$db_index
> 
> dim(sim_matrix)
[1] 4000 8280
> sim_matrix[1:2,1:5]
      cell1 cell2 cell3 cell4 cell5
gene1     8     4     2     4     3
gene2     1     4     4     0     1
> 
> dim(meta_cell)
[1] 8280    6
> meta_cell[1:2,]
      cell_id individual phenotype phenotype1 cell_rd     CDR
cell1   cell1       ind1         1       case   11332 0.68450
cell2   cell2       ind1         1       case    9860 0.65875
> 
> dim(meta_ind)
[1] 23  3
> meta_ind[1:2,]
     individual phenotype        RIN
ind1       ind1         1 -0.9308729
ind2       ind2         1 -1.9242424
> 
> # ---------------------------------------------------------------
> # 1. DESeq2 analysis 
> # ---------------------------------------------------------------
> # We calculate sim_matrix_bulk by adding up raw counts of
> # all cells of an individual within a gene
> # ---------------------------------------------------------------
> 
> # individual level info
> u_ind = unique(meta_cell$individual)
> length(u_ind)
[1] 23
> u_ind[1:2]
[1] "ind1" "ind2"
> 
> sim_matrix_bulk = matrix(nrow = nrow(sim_matrix),
+                          ncol = length(u_ind))
> rownames(sim_matrix_bulk) = rownames(sim_matrix)
> colnames(sim_matrix_bulk) = u_ind
> 
> for (i_ind in 1:length(u_ind)) {
+   cur_ind   = u_ind[i_ind]
+   cur_ind_m = sim_matrix[, meta_cell$individual == cur_ind]
+   sim_matrix_bulk[, i_ind] = rowSums(cur_ind_m, na.rm = TRUE)
+ }
> 
> meta_ind$phenotype = as.factor(meta_ind$phenotype)
> dim(meta_ind)
[1] 23  3
> meta_ind[1:2,]
     individual phenotype        RIN
ind1       ind1         1 -0.9308729
ind2       ind2         1 -1.9242424
> 
> # DESeq2 for all the genes
> dds = DESeqDataSetFromMatrix(countData = sim_matrix_bulk,
+                              colData = meta_ind,
+                              design = ~ RIN + phenotype)
converting counts to integer mode
> 
> dds = DESeq(dds)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
-- note: fitType='parametric', but the dispersion trend was not well captured by the
   function: y = a/x + b, and a local regression fit was automatically substituted.
   specify fitType='local' or 'mean' to avoid this message next time.
final dispersion estimates
fitting model and testing
> nms = resultsNames(dds)
> nms
[1] "Intercept"        "RIN"              "phenotype_1_vs_0"
> 
> deseq2_pval = results(dds)$pvalue
> 
> rk = results(dds, name="RIN")
> deseq2_pval_RIN = rk$pvalue
> 
> summary(deseq2_pval)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.1499  0.4222  0.4412  0.7113  0.9999 
> summary(deseq2_pval_RIN)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.08318 0.32273 0.38162 0.64728 0.99899 
> table(deseq2_pval[EE_index] < 0.05)

FALSE  TRUE 
 2814   186 
> table(deseq2_pval[EE_index] < 0.05)/length(EE_index)

FALSE  TRUE 
0.938 0.062 
> 
> # DESeq2 only for the EE genes
> dds0 = DESeqDataSetFromMatrix(countData = sim_matrix_bulk[EE_index,],
+                               colData = meta_ind,
+                               design = ~ RIN + phenotype)
converting counts to integer mode
> 
> dds0 = DESeq(dds0)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
-- note: fitType='parametric', but the dispersion trend was not well captured by the
   function: y = a/x + b, and a local regression fit was automatically substituted.
   specify fitType='local' or 'mean' to avoid this message next time.
final dispersion estimates
fitting model and testing
> deseq2_pval0 = results(dds0)$pvalue
> 
> table(deseq2_pval0 < 0.05)

FALSE  TRUE 
 2811   189 
> table(deseq2_pval0 < 0.05)/length(EE_index)

FALSE  TRUE 
0.937 0.063 
> 
> # ---------------------------------------------------------------
> # 2. IDEAS 
> # ---------------------------------------------------------------
> 
> count_matrix  = sim_matrix
> var2test      = "phenotype"
> var2adjust    = "RIN"
> var2test_type = "binary"
> var_per_cell  = "cell_rd"
> 
> date()
[1] "Mon Aug 31 15:59:54 2020"
> if(file.exists(sprintf("data/dist_zinb_%s.rds", config))){
+   dist_zinb = readRDS(sprintf("data/dist_zinb_%s.rds", config))
+ }else{
+   dist_zinb = ideas_dist(count_matrix, meta_cell, meta_ind, var_per_cell, 
+                          var2test, var2adjust, var2test_type, 
+                          fit_method = "zinb", per_cell_adjust = "NB")
+   saveRDS(dist_zinb, sprintf("data/dist_zinb_%s.rds", config))
+ }
the count_matrix includes 4000 genes in 8280 cells

estimating distribution for each gene and each individaul by zinb

> date()
[1] "Mon Aug 31 16:09:42 2020"
> 
> dim(dist_zinb)
[1] 4000   23   23
> dist_zinb[1,1:3,1:3]
           ind1        ind2        ind3
ind1 0.00000000 0.003667020 0.022713334
ind2 0.00366702 0.000000000 0.008286982
ind3 0.02271333 0.008286982 0.000000000
> 
> date()
[1] "Mon Aug 31 16:09:42 2020"
> if(file.exists(sprintf("data/dist_kde_%s.rds", config))){
+   dist_kde = readRDS(sprintf("data/dist_kde_%s.rds", config))
+ }else{
+   dist_kde = ideas_dist(count_matrix, meta_cell, meta_ind, var_per_cell, 
+                         var2test, var2adjust, var2test_type, 
+                         fit_method = "kde")
+   saveRDS(dist_kde,  sprintf("data/dist_kde_%s.rds",  config))
+ }
the count_matrix includes 4000 genes in 8280 cells

estimating distribution for each gene and each individaul by kde

> date()
[1] "Mon Aug 31 16:13:02 2020"
> 
> dim(dist_kde)
[1] 4000   23   23
> dist_kde[1,1:3,1:3]
            ind1        ind2       ind3
ind1 0.000000000 0.004627997 0.01875851
ind2 0.004627997 0.000000000 0.01330503
ind3 0.018758510 0.013305032 0.00000000
> 
> # ---------------------------------------------------------------
> # STEP 2: pval calculation 
> # ---------------------------------------------------------------
> 
> y = as.numeric(meta_ind$phenotype==1)
> 
> date()
[1] "Mon Aug 31 16:13:02 2020"
> pval_M_zinb = foreach(i_g = 1:dim(dist_zinb)[1], .combine = "c") %dopar% {
+   Di = dist_zinb[i_g,,]
+   if(any(is.na(Di))){
+     pval = NA 
+   }else{
+     Ki = D2K(Di)
+     m1 = MiRKAT(y = y, X = meta_ind$RIN, Ks = Ki, out_type = "D", 
+                 method = "permutation")
+     pval = m1$indivP
+   }
+   pval
+ }
> date()
[1] "Mon Aug 31 16:13:22 2020"
> 
> summary(pval_M_zinb)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
 0.0010  0.2030  0.5070  0.4849  0.7480  1.0000       1 
> 
> date()
[1] "Mon Aug 31 16:13:22 2020"
> pval_M_kde = foreach(i_g = 1:dim(dist_kde)[1], .combine = "c") %dopar% {
+   Di = dist_kde[i_g,,]
+   if(any(is.na(Di))){
+     pval = NA 
+   }else{
+     Ki = D2K(Di)
+     m1 = MiRKAT(y = y, X = meta_ind$RIN, Ks = Ki, out_type = "D", 
+                 method = "permutation")
+     pval = m1$indivP
+   }
+   pval
+ }
> date()
[1] "Mon Aug 31 16:13:38 2020"
> 
> summary(pval_M_kde)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0010  0.1290  0.4010  0.4209  0.6910  1.0000 
> 
> n_perm = 999
> r.seed = 819
> delta  = 0.5
> 
> date()
[1] "Mon Aug 31 16:13:38 2020"
> pval_S1_zinb  = permanova(dist_zinb, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, r.seed=r.seed, 
+                           residulize.x = TRUE)
skip 1 gene(s) with NA in the dist_array

testing for 'phenotype', a binary variable

> date()
[1] "Mon Aug 31 16:14:26 2020"
> pval_S0_zinb  = permanova(dist_zinb, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, r.seed=r.seed, 
+                           residulize.x = FALSE)
skip 1 gene(s) with NA in the dist_array

testing for 'phenotype', a binary variable

> date()
[1] "Mon Aug 31 16:15:15 2020"
> pval_S1_kde   = permanova(dist_kde, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, r.seed=r.seed, 
+                           residulize.x = TRUE)
testing for 'phenotype', a binary variable

> date()
[1] "Mon Aug 31 16:16:05 2020"
> pval_S0_kde   = permanova(dist_kde, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, r.seed=r.seed, 
+                           residulize.x = FALSE)
testing for 'phenotype', a binary variable

> date()
[1] "Mon Aug 31 16:16:53 2020"
> 
> table(pval_M_zinb < 0.01, pval_M_kde < 0.01)
       
        FALSE TRUE
  FALSE  3569  205
  TRUE     21  204
> table(pval_S0_zinb < 0.01, pval_S0_kde < 0.01)
       
        FALSE TRUE
  FALSE  3567  192
  TRUE     16  224
> table(pval_S1_zinb < 0.01, pval_S1_kde < 0.01)
       
        FALSE TRUE
  FALSE  3570  196
  TRUE     19  214
> 
> table(pval_M_zinb < 0.01, pval_S0_zinb < 0.01)
       
        FALSE TRUE
  FALSE  3747   27
  TRUE     12  213
> table(pval_M_zinb < 0.01, pval_S1_zinb < 0.01)
       
        FALSE TRUE
  FALSE  3750   24
  TRUE     16  209
> 
> table(pval_M_kde < 0.01, pval_S0_kde < 0.01)
       
        FALSE TRUE
  FALSE  3557   34
  TRUE     27  382
> table(pval_M_kde < 0.01, pval_S1_kde < 0.01)
       
        FALSE TRUE
  FALSE  3562   29
  TRUE     28  381
> 
> # ---------------------------------------------------------------
> # 3. MAST analysis 
> # ---------------------------------------------------------------
> #
> # the input of MAST analysis can be matrix or SingleCellAssay.
> #
> # input:
> # (1) the log-transformed expression count matrix,
> #     with each column represents a cell and each row represents a gene.
> # (2) the meta data, including cell and individual information.
> 
> # we get the p-values based on the Hurdle model ("H" model)
> # ---------------------------------------------------------------
> 
> sim_matrix_log = log2(1 + sim_matrix) #log transformed data
> 
> dim(sim_matrix_log)
[1] 4000 8280
> sim_matrix_log[1:3, 1:4]
         cell1    cell2    cell3    cell4
gene1 3.169925 2.321928 1.584963 2.321928
gene2 1.000000 2.321928 2.321928 0.000000
gene3 1.000000 1.000000 0.000000 0.000000
> cell_id = colnames(sim_matrix_log)   # get the cell id from the data
> gene_id = rownames(sim_matrix_log)   # get the gene id from the data
> 
> diagnosis = as.character(meta_cell$phenotype) #
> diagnosis[diagnosis == 1] = "Case"
> diagnosis[diagnosis == 0] = "Control"
> 
> fData = data.frame(primerid = gene_id)
> cData = data.frame(wellKey  = cell_id)
> 
> sca = FromMatrix(sim_matrix_log, cData, fData)
Assuming data assay in position 1, with name et is log-transformed.
> colData(sca)$cngeneson = as.numeric(meta_cell$CDR)
> colData(sca)$diagnosis = as.factor(diagnosis)
> colData(sca)$ind = as.factor(meta_cell$individual)
> colData(sca)$RIN = meta_ind$RIN[match(meta_cell$individual, meta_ind$individual)]
> 
> colData(sca)
DataFrame with 8280 rows and 5 columns
             wellKey cngeneson diagnosis      ind                RIN
         <character> <numeric>  <factor> <factor>          <numeric>
cell1          cell1    0.6845      Case     ind1 -0.930872920521028
cell2          cell2   0.65875      Case     ind1 -0.930872920521028
cell3          cell3    0.6845      Case     ind1 -0.930872920521028
cell4          cell4     0.691      Case     ind1 -0.930872920521028
cell5          cell5     0.656      Case     ind1 -0.930872920521028
...              ...       ...       ...      ...                ...
cell8276    cell8276   0.64225   Control    ind23  0.872241394349067
cell8277    cell8277    0.6735   Control    ind23  0.872241394349067
cell8278    cell8278   0.64875   Control    ind23  0.872241394349067
cell8279    cell8279     0.636   Control    ind23  0.872241394349067
cell8280    cell8280   0.68525   Control    ind23  0.872241394349067
> 
> getOption("mc.cores")
[1] 12
> 
> date()
[1] "Mon Aug 31 16:16:56 2020"
> b0 = zlm(formula = ~ diagnosis + cngeneson + RIN, sca = sca, parallel = TRUE)

Done!
> date()
[1] "Mon Aug 31 16:17:36 2020"
> b1 = zlm(formula = ~ diagnosis + (1 | ind) + cngeneson + RIN, sca = sca, 
+          method = 'glmer', ebayes = FALSE, parallel = TRUE)
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular

Done!
> date()
[1] "Mon Aug 31 16:32:54 2020"
> 
> b0
Fitted zlm on 4000 genes and 8280 cells.
 Using BayesGLMlike ~ diagnosis + cngeneson + RIN 
> b1
Fitted zlm on 4000 genes and 8280 cells.
 Using LMERlike ~ diagnosis + (1 | ind) + cngeneson + RIN 
> 
> date()
[1] "Mon Aug 31 16:32:54 2020"
> lrt0 = lrTest(b0, "diagnosis")
Refitting on reduced model...

Done!
> date()
[1] "Mon Aug 31 16:33:27 2020"
> lrt1 = lrTest(b1, "diagnosis")
Refitting on reduced model...
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular

Done!
> date()
[1] "Mon Aug 31 16:43:16 2020"
> 
> dim(lrt0)
[1] 4000    3    3
> lrt0[1,,]
         metric
test.type      lambda df Pr(>Chisq)
   cont   3.862171956  1 0.04938636
   disc   0.001715089  1 0.96696614
   hurdle 3.863887045  2 0.14486637
> 
> dim(lrt1)
[1] 4000    3    3
> lrt1[1,,]
         metric
test.type    lambda df Pr(>Chisq)
   cont   0.1751981  1  0.6755328
   disc   0.0235829  1  0.8779510
   hurdle 0.1987810  2  0.9053891
> 
> mast_pval_glm = apply(lrt0, 1, function(x){x[3,3]})
> length(mast_pval_glm)
[1] 4000
> mast_pval_glm[1:4]
       gene1        gene2        gene3        gene4 
1.448664e-01 7.678056e-01 5.385483e-02 9.171876e-18 
> 
> mast_pval_glmer = apply(lrt1, 1, function(x){x[3,3]})
> length(mast_pval_glmer)
[1] 4000
> mast_pval_glmer[1:4]
       gene1        gene2        gene3        gene4 
9.053891e-01 8.262920e-01 9.672846e-01 7.987751e-05 
> 
> # ---------------------------------------------------------------
> # check p-value
> # ---------------------------------------------------------------
> 
> idx_grp = list(DP_DE=dp_index, DB_DE=db_index, EE=EE_index)
> 
> plot.hist <- function(pvals, idx_grp, label){
+   for(k in 1:length(idx_grp)){
+     idx  = idx_grp[[k]]
+     main = paste(label, names(idx_grp)[k], sep=", ")
+     hist(pvals[idx], main=main, xlab="p-value", breaks=50)
+   }
+ }
> 
> pdf(sprintf("figures/pvalue_hist_%s.pdf", config), 
+     width = 9, height = 9)
> par(mfrow = c(3, 3), mar=c(5,4,2,1), pty = "s", bty="n")
> plot.hist(pval_M_zinb,    idx_grp, "IDEAS-M-ZINB")
> plot.hist(pval_M_kde,     idx_grp, "IDEAS-M-KDE")
> plot.hist(pval_S0_zinb,   idx_grp, "IDEAS-S0-ZINB")
> plot.hist(pval_S0_kde,    idx_grp, "IDEAS-S0-KDE")
> plot.hist(pval_S1_zinb,   idx_grp, "IDEAS-S1-ZINB")
> plot.hist(pval_S1_kde,    idx_grp, "IDEAS-S1-KDE")
> 
> plot.hist(deseq2_pval,     idx_grp, "DESeq2")
> plot.hist(mast_pval_glm,   idx_grp, "MAST bayesglm")
> plot.hist(mast_pval_glmer, idx_grp, "MAST glmer")
> dev.off()
null device 
          1 
> 
> # ---------------------------------------------------------------
> # save results
> # ---------------------------------------------------------------
> 
> geneType = rep("EE", nGeneTotal)
> geneType[dp_index] = "dpDE"
> geneType[db_index]  = "multDE"
> 
> df1 = data.frame(geneType, pval_M_zinb, pval_M_kde, pval_S0_zinb, 
+                  pval_S0_kde, pval_S1_zinb, pval_S1_kde,
+                  deseq2_pval, mast_pval_glm, mast_pval_glmer)
> dim(df1)
[1] 4000   10
> df1[1:2,]
      geneType pval_M_zinb pval_M_kde pval_S0_zinb pval_S0_kde pval_S1_zinb
gene1       EE       0.486      0.553        0.492       0.530        0.453
gene2       EE       0.853      0.587        0.861       0.548        0.836
      pval_S1_kde deseq2_pval mast_pval_glm mast_pval_glmer
gene1       0.496   0.6977100     0.1448664       0.9053891
gene2       0.525   0.8230757     0.7678056       0.8262920
> 
> fun1 <- function(x, alpha){table(x<=alpha)/length(x)}
> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.05)})
$pval_M_zinb
$pval_M_zinb$dpDE

FALSE  TRUE 
 0.38  0.62 

$pval_M_zinb$EE

    FALSE      TRUE 
0.9606667 0.0390000 

$pval_M_zinb$multDE

FALSE  TRUE 
0.998 0.002 


$pval_M_kde
$pval_M_kde$dpDE

FALSE  TRUE 
0.384 0.616 

$pval_M_kde$EE

     FALSE       TRUE 
0.95666667 0.04333333 

$pval_M_kde$multDE

FALSE  TRUE 
 0.53  0.47 


$pval_S0_zinb
$pval_S0_zinb$dpDE

FALSE  TRUE 
0.368 0.632 

$pval_S0_zinb$EE

    FALSE      TRUE 
0.9566667 0.0430000 

$pval_S0_zinb$multDE

FALSE  TRUE 
0.996 0.004 


$pval_S0_kde
$pval_S0_kde$dpDE

FALSE  TRUE 
0.374 0.626 

$pval_S0_kde$EE

     FALSE       TRUE 
0.95233333 0.04766667 

$pval_S0_kde$multDE

FALSE  TRUE 
0.526 0.474 


$pval_S1_zinb
$pval_S1_zinb$dpDE

FALSE  TRUE 
0.384 0.616 

$pval_S1_zinb$EE

     FALSE       TRUE 
0.95800000 0.04166667 

$pval_S1_zinb$multDE

FALSE  TRUE 
0.998 0.002 


$pval_S1_kde
$pval_S1_kde$dpDE

FALSE  TRUE 
0.382 0.618 

$pval_S1_kde$EE

FALSE  TRUE 
0.952 0.048 

$pval_S1_kde$multDE

FALSE  TRUE 
0.524 0.476 


$deseq2_pval
$deseq2_pval$dpDE

FALSE  TRUE 
0.326 0.674 

$deseq2_pval$EE

FALSE  TRUE 
0.938 0.062 

$deseq2_pval$multDE

FALSE  TRUE 
0.928 0.072 


$mast_pval_glm
$mast_pval_glm$dpDE

FALSE  TRUE 
0.014 0.986 

$mast_pval_glm$EE

    FALSE      TRUE 
0.3583333 0.6416667 

$mast_pval_glm$multDE

FALSE  TRUE 
0.192 0.808 


$mast_pval_glmer
$mast_pval_glmer$dpDE

FALSE  TRUE 
0.298 0.702 

$mast_pval_glmer$EE

     FALSE       TRUE 
0.91566667 0.08433333 

$mast_pval_glmer$multDE

FALSE  TRUE 
0.788 0.212 


> 
> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.01)})
$pval_M_zinb
$pval_M_zinb$dpDE

FALSE  TRUE 
 0.58  0.42 

$pval_M_zinb$EE

      FALSE        TRUE 
0.993333333 0.006333333 

$pval_M_zinb$multDE

FALSE 
    1 


$pval_M_kde
$pval_M_kde$dpDE

FALSE  TRUE 
0.562 0.438 

$pval_M_kde$EE

FALSE  TRUE 
0.992 0.008 

$pval_M_kde$multDE

FALSE  TRUE 
0.642 0.358 


$pval_S0_zinb
$pval_S0_zinb$dpDE

FALSE  TRUE 
0.558 0.442 

$pval_S0_zinb$EE

    FALSE      TRUE 
0.9916667 0.0080000 

$pval_S0_zinb$multDE

FALSE 
    1 


$pval_S0_kde
$pval_S0_kde$dpDE

FALSE  TRUE 
0.558 0.442 

$pval_S0_kde$EE

FALSE  TRUE 
0.991 0.009 

$pval_S0_kde$multDE

FALSE  TRUE 
0.644 0.356 


$pval_S1_zinb
$pval_S1_zinb$dpDE

FALSE  TRUE 
0.568 0.432 

$pval_S1_zinb$EE

      FALSE        TRUE 
0.992000000 0.007666667 

$pval_S1_zinb$multDE

FALSE 
    1 


$pval_S1_kde
$pval_S1_kde$dpDE

FALSE  TRUE 
 0.57  0.43 

$pval_S1_kde$EE

      FALSE        TRUE 
0.992666667 0.007333333 

$pval_S1_kde$multDE

FALSE  TRUE 
0.638 0.362 


$deseq2_pval
$deseq2_pval$dpDE

FALSE  TRUE 
0.468 0.532 

$deseq2_pval$EE

FALSE  TRUE 
0.984 0.016 

$deseq2_pval$multDE

FALSE  TRUE 
0.984 0.016 


$mast_pval_glm
$mast_pval_glm$dpDE

FALSE  TRUE 
0.028 0.972 

$mast_pval_glm$EE

FALSE  TRUE 
0.458 0.542 

$mast_pval_glm$multDE

FALSE  TRUE 
 0.26  0.74 


$mast_pval_glmer
$mast_pval_glmer$dpDE

FALSE  TRUE 
0.428 0.572 

$mast_pval_glmer$EE

     FALSE       TRUE 
0.97366667 0.02633333 

$mast_pval_glmer$multDE

FALSE  TRUE 
 0.88  0.12 


> 
> write.table(df1, file=sprintf("results/pval_%s.txt", config), append=FALSE, 
+             quote=FALSE, sep="\t", row.names = FALSE, col.names = TRUE)
> 
> sessionInfo()
R version 3.6.2 (2019-12-12)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Catalina 10.15.6

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] ideas_0.99                  ggplot2_3.3.1              
 [3] pryr_0.1.4                  reticulate_1.15            
 [5] MiRKAT_1.1.0                doRNG_1.8.2                
 [7] rngtools_1.5                doParallel_1.0.15          
 [9] iterators_1.0.12            foreach_1.4.7              
[11] DESeq2_1.24.0               lme4_1.1-21                
[13] Matrix_1.2-18               MAST_1.10.0                
[15] SingleCellExperiment_1.6.0  SummarizedExperiment_1.14.1
[17] DelayedArray_0.10.0         BiocParallel_1.18.1        
[19] matrixStats_0.55.0          Biobase_2.44.0             
[21] GenomicRanges_1.36.1        GenomeInfoDb_1.20.0        
[23] IRanges_2.18.3              S4Vectors_0.22.1           
[25] BiocGenerics_0.30.0         moments_0.14               
[27] emdbook_1.3.11              MASS_7.3-51.5              

loaded via a namespace (and not attached):
  [1] minqa_1.2.4            colorspace_1.4-1       ellipsis_0.3.0        
  [4] htmlTable_1.13.3       XVector_0.24.0         base64enc_0.1-3       
  [7] rstudioapi_0.11        MatrixModels_0.4-1     bit64_0.9-7           
 [10] AnnotationDbi_1.46.1   mvtnorm_1.0-12         codetools_0.2-16      
 [13] splines_3.6.2          pscl_1.5.5             geneplotter_1.62.0    
 [16] knitr_1.28             jsonlite_1.6.1         Formula_1.2-3         
 [19] nloptr_1.2.1           annotate_1.62.0        kernlab_0.9-29        
 [22] cluster_2.1.0          png_0.1-7              compiler_3.6.2        
 [25] backports_1.1.5        assertthat_0.2.1       prettyunits_1.1.1     
 [28] quantreg_5.55          acepack_1.4.1          htmltools_0.4.0       
 [31] tools_3.6.2            coda_0.19-3            gtable_0.3.0          
 [34] glue_1.3.1             GenomeInfoDbData_1.2.1 reshape2_1.4.3        
 [37] dplyr_0.8.4            Rcpp_1.0.3             bbmle_1.0.23.1        
 [40] vctrs_0.3.0            ape_5.3                nlme_3.1-144          
 [43] xfun_0.12              stringr_1.4.0          CompQuadForm_1.4.3    
 [46] lifecycle_0.2.0        GUniFrac_1.1           XML_3.99-0.3          
 [49] PearsonDS_1.1          zlibbioc_1.30.0        scales_1.1.0          
 [52] hms_0.5.3              SparseM_1.78           RColorBrewer_1.1-2    
 [55] memoise_1.1.0          gridExtra_2.3          segmented_1.2-0       
 [58] bdsmatrix_1.3-4        rpart_4.1-15           latticeExtra_0.6-29   
 [61] stringi_1.4.5          RSQLite_2.2.0          genefilter_1.66.0     
 [64] blme_1.0-4             checkmate_2.0.0        permute_0.9-5         
 [67] boot_1.3-24            rlang_0.4.6            pkgconfig_2.0.3       
 [70] bitops_1.0-6           lattice_0.20-38        purrr_0.3.3           
 [73] htmlwidgets_1.5.1      bit_1.1-15.2           tidyselect_1.0.0      
 [76] plyr_1.8.5             magrittr_1.5           R6_2.4.1              
 [79] Hmisc_4.4-0            DBI_1.1.0              withr_2.1.2           
 [82] pillar_1.4.3           foreign_0.8-75         mgcv_1.8-31           
 [85] mixtools_1.2.0         survival_3.1-8         abind_1.4-5           
 [88] RCurl_1.98-1.1         nnet_7.3-12            tibble_3.0.1          
 [91] crayon_1.3.4           progress_1.2.2         jpeg_0.1-8.1          
 [94] locfit_1.5-9.4         grid_3.6.2             data.table_1.12.8     
 [97] blob_1.2.1             vegan_2.5-6            digest_0.6.23         
[100] xtable_1.8-4           numDeriv_2016.8-1.1    munsell_0.5.0         
> 
> mem_used()
1.37 GB
> gc()
            used  (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   7194838 384.3   12415001  663.1         NA  12415001  663.1
Vcells 120391040 918.6  319772656 2439.7      32768 319772656 2439.7
> 
> q(save = "no")
> proc.time()
     user    system   elapsed 
27623.890  1383.323  2617.096 
