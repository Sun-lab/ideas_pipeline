
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #########################################################################
> #                                                                       #
> #                                                                       #
> #             Part II: Defferential Expression Analysis                 #
> #                                                                       #
> #                                                                       #
> #########################################################################
> # once simulated genes, we will do the Differential Expression Analysis
> # Here we will implement our method, plus the DESeq2 and the MAST analysis.
> 
> args = commandArgs(trailingOnly=TRUE)
> args
[1] "ncase=5"    "nctrl=5"    "ncell=720"  "r_mean=1.2" "r_var=1.5" 
> 
> if (length(args) < 5) {
+   message("no enough arguments, using default values")
+   r_mean   = 1.2     # The expected fold-changes in mean
+   r_var    = 1.5     # The expected fold-changes in variances
+   ncase    = 13      # case individuals
+   nctrl    = 10      # control individuals
+   ncell    = 360    # numbers of cells collected from each individuals.
+ } else{
+   for(i in 1:length(args)){
+     eval(parse(text=args[[i]]))
+   }
+ }
> 
> config = sprintf("ncase_%d_nctrl_%d_ncell_%d", ncase, nctrl, ncell)
> config = sprintf("%s_fold_mean_%.1f_var_%.1f", config, r_mean, r_var)
> config
[1] "ncase_5_nctrl_5_ncell_720_fold_mean_1.2_var_1.5"
> 
> # ---------------------------------------------------------------
> # additional parameters
> # ---------------------------------------------------------------
> 
> nCore = 2          # number of cores for multi-core computation
> nGeneMean  = 500    # number of genes with different means in cases
> nGeneVar   = 500    # number of genes with different variance in cases
> nGeneBlank = 3000   # number of genes equivalently expressed
> nGeneTotal = nGeneMean + nGeneVar + nGeneBlank # total numbers of genes
> nall       = ncase + nctrl
> 
> # ---------------------------------------------------------------
> # initial setup
> # ---------------------------------------------------------------
> 
> library(MASS)
> library(emdbook)
> library(moments)
> library(MAST)
Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

Loading required package: BiocParallel

Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from ‘package:base’:

    aperm, apply, rowsum


Attaching package: ‘MAST’

The following object is masked from ‘package:stats’:

    filter

> library(lme4)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:S4Vectors’:

    expand

> library(DESeq2)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> library(foreach)
> library(doRNG)
Loading required package: rngtools
> library(MiRKAT)
> library(reticulate)
> 
> library(data.table)

Attaching package: ‘data.table’

The following object is masked from ‘package:SummarizedExperiment’:

    shift

The following object is masked from ‘package:GenomicRanges’:

    shift

The following object is masked from ‘package:IRanges’:

    shift

The following objects are masked from ‘package:S4Vectors’:

    first, second

> library(pryr)
Registered S3 method overwritten by 'pryr':
  method      from
  print.bytes Rcpp

Attaching package: ‘pryr’

The following object is masked from ‘package:data.table’:

    address

> library(ggplot2)
> library(ggpubr)
Loading required package: magrittr
> theme_set(theme_bw())
> 
> library(ideas)
> 
> # source("../functions/ZINB_fit_functions.R")
> # source("../functions/kl_divergence_functions.R")
> # source("../functions/Fstat_functions.R")
> 
> registerDoParallel(cores=nCore)
> options(mc.cores=nCore)
> 
> # ---------------------------------------------------------------
> # load data
> # ---------------------------------------------------------------
> 
> gene_index = readRDS(sprintf("data/gene_index_%s.rds", config))
> sim_matrix = readRDS(sprintf("data/sim_matrix_%s.rds", config))
> meta_cell  = readRDS(sprintf("data/meta_%s.rds", config))
> meta_ind   = readRDS(sprintf("data/meta_ind_%s.rds", config))
> 
> ls()
 [1] "args"       "config"     "gene_index" "i"          "meta_cell" 
 [6] "meta_ind"   "nall"       "ncase"      "ncell"      "nCore"     
[11] "nctrl"      "nGeneBlank" "nGeneMean"  "nGeneTotal" "nGeneVar"  
[16] "r_mean"     "r_var"      "sim_matrix"
> EE_index   = gene_index$EE_index
> mean_index = gene_index$mean_index
> var_index  = gene_index$var_index
> 
> dim(sim_matrix)
[1] 4000 7200
> sim_matrix[1:2,1:5]
      cell1 cell2 cell3 cell4 cell5
gene1     3     4     0     5     9
gene2     0     1     1     1     0
> 
> dim(meta_cell)
[1] 7200    5
> meta_cell[1:2,]
      cell_id individual phenotype cell_rd    CDR
cell1   cell1       ind1         1    9530 0.6575
cell2   cell2       ind1         1    9803 0.6685
> 
> dim(meta_ind)
[1] 10  3
> meta_ind[1:2,]
     individual phenotype        RIN
ind1       ind1         1 0.49519721
ind2       ind2         1 0.08321844
> 
> # ---------------------------------------------------------------
> # 1. DESeq2 analysis 
> # ---------------------------------------------------------------
> # We calculate sim_matrix_bulk by adding up raw counts of
> # all cells of an individual within a gene
> # ---------------------------------------------------------------
> 
> # individual level info
> u_ind = unique(meta_cell$individual)
> length(u_ind)
[1] 10
> u_ind[1:2]
[1] "ind1" "ind2"
> 
> sim_matrix_bulk = matrix(nrow = nrow(sim_matrix),
+                          ncol = length(u_ind))
> rownames(sim_matrix_bulk) = rownames(sim_matrix)
> colnames(sim_matrix_bulk) = u_ind
> 
> for (i_ind in 1:length(u_ind)) {
+   cur_ind   = u_ind[i_ind]
+   cur_ind_m = sim_matrix[, meta_cell$individual == cur_ind]
+   sim_matrix_bulk[, i_ind] = rowSums(cur_ind_m, na.rm = TRUE)
+ }
> 
> meta_ind$phenotype = as.factor(meta_ind$phenotype)
> dim(meta_ind)
[1] 10  3
> meta_ind[1:2,]
     individual phenotype        RIN
ind1       ind1         1 0.49519721
ind2       ind2         1 0.08321844
> 
> # DESeq2 for all the genes
> dds = DESeqDataSetFromMatrix(countData = sim_matrix_bulk,
+                              colData = meta_ind,
+                              design = ~ RIN + phenotype)
converting counts to integer mode
> 
> dds = DESeq(dds)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
-- note: fitType='parametric', but the dispersion trend was not well captured by the
   function: y = a/x + b, and a local regression fit was automatically substituted.
   specify fitType='local' or 'mean' to avoid this message next time.
final dispersion estimates
fitting model and testing
> nms = resultsNames(dds)
> nms
[1] "Intercept"        "RIN"              "phenotype_1_vs_0"
> 
> deseq2_pval = results(dds)$pvalue
> 
> rk = results(dds, name="RIN")
> deseq2_pval_RIN = rk$pvalue
> 
> summary(deseq2_pval)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.1702  0.4405  0.4512  0.7159  1.0000 
> summary(deseq2_pval_RIN)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.1472  0.4225  0.4382  0.7108  0.9999 
> table(deseq2_pval[EE_index] < 0.05)

FALSE  TRUE 
 2733   267 
> table(deseq2_pval[EE_index] < 0.05)/length(EE_index)

FALSE  TRUE 
0.911 0.089 
> 
> # DESeq2 only for the EE genes
> dds0 = DESeqDataSetFromMatrix(countData = sim_matrix_bulk[EE_index,],
+                               colData = meta_ind,
+                               design = ~ RIN + phenotype)
converting counts to integer mode
> 
> dds0 = DESeq(dds0)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
-- note: fitType='parametric', but the dispersion trend was not well captured by the
   function: y = a/x + b, and a local regression fit was automatically substituted.
   specify fitType='local' or 'mean' to avoid this message next time.
final dispersion estimates
fitting model and testing
> deseq2_pval0 = results(dds0)$pvalue
> 
> table(deseq2_pval0 < 0.05)

FALSE  TRUE 
 2732   268 
> table(deseq2_pval0 < 0.05)/length(EE_index)

     FALSE       TRUE 
0.91066667 0.08933333 
> 
> # ---------------------------------------------------------------
> # 2. IDEAS 
> # ---------------------------------------------------------------
> 
> count_matrix  = sim_matrix
> var2test      = "phenotype"
> var2adjust    = "RIN"
> var2test_type = "binary"
> cell_rd_var   = "cell_rd"
> 
> date()
[1] "Tue Aug 25 00:31:13 2020"
> if(file.exists(sprintf("data/dist_zinb_%s.rds", config))){
+   dist_zinb = readRDS(sprintf("data/dist_zinb_%s.rds", config))
+ }else{
+   dist_zinb = ideas_dist(count_matrix, meta_cell, meta_ind, cell_rd_var, 
+                          var2test, var2adjust, var2test_type, 
+                          fit_method = "zinb")
+   saveRDS(dist_zinb, sprintf("data/dist_zinb_%s.rds", config))
+ }
the count_matrix includes 4000 genes in 7200 cells

estimating distribution for each gene and each individaul by zinb

> date()
[1] "Tue Aug 25 01:34:15 2020"
> 
> dim(dist_zinb)
[1] 4000   10   10
> dist_zinb[1,1:3,1:3]
            ind1        ind2       ind3
ind1 0.000000000 0.000943659 0.06909973
ind2 0.000943659 0.000000000 0.05819309
ind3 0.069099727 0.058193086 0.00000000
> 
> date()
[1] "Tue Aug 25 01:34:15 2020"
> if(file.exists(sprintf("data/dist_kde_%s.rds", config))){
+   dist_kde = readRDS(sprintf("data/dist_kde_%s.rds", config))
+ }else{
+   dist_kde = ideas_dist(count_matrix, meta_cell, meta_ind, cell_rd_var, 
+                         var2test, var2adjust, var2test_type, 
+                         fit_method = "kde")
+   saveRDS(dist_kde,  sprintf("data/dist_kde_%s.rds",  config))
+ }
the count_matrix includes 4000 genes in 7200 cells

estimating distribution for each gene and each individaul by kde

> date()
[1] "Tue Aug 25 01:38:35 2020"
> 
> dim(dist_kde)
[1] 4000   10   10
> dist_kde[1,1:3,1:3]
            ind1        ind2       ind3
ind1 0.000000000 0.005514301 0.06463081
ind2 0.005514301 0.000000000 0.05814631
ind3 0.064630808 0.058146314 0.00000000
> 
> # ---------------------------------------------------------------
> # STEP 2: pval calculation 
> # ---------------------------------------------------------------
> 
> y = as.numeric(meta_ind$phenotype==1)
> 
> date()
[1] "Tue Aug 25 01:38:35 2020"
> pval_M_zinb = foreach(i_g = 1:dim(dist_zinb)[1], .combine = "c") %dopar% {
+   Di = dist_zinb[i_g,,]
+   if(any(is.na(Di))){
+     pval = NA 
+   }else{
+     Ki = D2K(Di)
+     m1 = MiRKAT(y = y, X = meta_ind$RIN, Ks = Ki, out_type = "D", 
+                 method = "permutation")
+     pval = m1$indivP
+   }
+   pval
+ }
> date()
[1] "Tue Aug 25 01:40:02 2020"
> 
> summary(pval_M_zinb)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
 0.0010  0.1795  0.4340  0.4488  0.6980  1.0000       1 
> 
> date()
[1] "Tue Aug 25 01:40:02 2020"
> pval_M_kde = foreach(i_g = 1:dim(dist_kde)[1], .combine = "c") %dopar% {
+   Di = dist_kde[i_g,,]
+   if(any(is.na(Di))){
+     pval = NA 
+   }else{
+     Ki = D2K(Di)
+     m1 = MiRKAT(y = y, X = meta_ind$RIN, Ks = Ki, out_type = "D", 
+                 method = "permutation")
+     pval = m1$indivP
+   }
+   pval
+ }
> date()
[1] "Tue Aug 25 01:41:28 2020"
> 
> summary(pval_M_kde)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0010  0.1688  0.4140  0.4346  0.6780  1.0000 
> 
> n_perm = 999
> r.seed = 819
> delta  = 0.5
> 
> date()
[1] "Tue Aug 25 01:41:28 2020"
> pval_S1_zinb  = permanova(dist_zinb, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, r.seed=r.seed, 
+                           residulize.x = TRUE)
skip 1 gene(s) with NA in the dist_array

testing for 'phenotype', a binary variable

> date()
[1] "Tue Aug 25 01:43:40 2020"
> pval_S0_zinb  = permanova(dist_zinb, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, r.seed=r.seed, 
+                           residulize.x = FALSE)
skip 1 gene(s) with NA in the dist_array

testing for 'phenotype', a binary variable

> date()
[1] "Tue Aug 25 01:45:53 2020"
> pval_S1_kde   = permanova(dist_kde, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, r.seed=r.seed, 
+                           residulize.x = TRUE)
testing for 'phenotype', a binary variable

> date()
[1] "Tue Aug 25 01:48:02 2020"
> pval_S0_kde   = permanova(dist_kde, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, r.seed=r.seed, 
+                           residulize.x = FALSE)
testing for 'phenotype', a binary variable

> date()
[1] "Tue Aug 25 01:50:16 2020"
> 
> table(pval_M_zinb < 0.01, pval_M_kde < 0.01)
       
        FALSE TRUE
  FALSE  3836   52
  TRUE     47   64
> table(pval_S0_zinb < 0.01, pval_S0_kde < 0.01)
       
        FALSE TRUE
  FALSE  3844   43
  TRUE     57   55
> table(pval_S1_zinb < 0.01, pval_S1_kde < 0.01)
       
        FALSE TRUE
  FALSE  3885   31
  TRUE     53   30
> 
> table(pval_M_zinb < 0.01, pval_S0_zinb < 0.01)
       
        FALSE TRUE
  FALSE  3853   35
  TRUE     34   77
> table(pval_M_zinb < 0.01, pval_S1_zinb < 0.01)
       
        FALSE TRUE
  FALSE  3871   17
  TRUE     45   66
> 
> table(pval_M_kde < 0.01, pval_S0_kde < 0.01)
       
        FALSE TRUE
  FALSE  3849   35
  TRUE     53   63
> table(pval_M_kde < 0.01, pval_S1_kde < 0.01)
       
        FALSE TRUE
  FALSE  3869   15
  TRUE     70   46
> 
> # ---------------------------------------------------------------
> # 3. MAST analysis 
> # ---------------------------------------------------------------
> #
> # the input of MAST analysis can be matrix or SingleCellAssay.
> #
> # input:
> # (1) the log-transformed expression count matrix,
> #     with each column represents a cell and each row represents a gene.
> # (2) the meta data, including cell and individual information.
> 
> # we get the p-values based on the Hurdle model ("H" model)
> # ---------------------------------------------------------------
> 
> sim_matrix_log = log2(1 + sim_matrix) #log transformed data
> 
> dim(sim_matrix_log)
[1] 4000 7200
> sim_matrix_log[1:3, 1:4]
      cell1    cell2 cell3    cell4
gene1     2 2.321928     0 2.584963
gene2     0 1.000000     1 1.000000
gene3     0 0.000000     0 0.000000
> cell_id = colnames(sim_matrix_log)   # get the cell id from the data
> gene_id = rownames(sim_matrix_log)   # get the gene id from the data
> 
> diagnosis = as.character(meta_cell$phenotype) #
> diagnosis[diagnosis == 1] = "Case"
> diagnosis[diagnosis == 0] = "Control"
> 
> fData = data.frame(primerid = gene_id)
> cData = data.frame(wellKey  = cell_id)
> 
> sca = FromMatrix(sim_matrix_log, cData, fData)
Assuming data assay in position 1, with name et is log-transformed.
> colData(sca)$cngeneson = as.numeric(meta_cell$CDR)
> colData(sca)$diagnosis = as.factor(diagnosis)
> colData(sca)$ind = as.factor(meta_cell$individual)
> colData(sca)$RIN = meta_ind$RIN[match(meta_cell$individual, meta_ind$individual)]
> 
> colData(sca)
DataFrame with 7200 rows and 5 columns
             wellKey cngeneson diagnosis      ind                RIN
         <character> <numeric>  <factor> <factor>          <numeric>
cell1          cell1    0.6575      Case     ind1  0.495197206473133
cell2          cell2    0.6685      Case     ind1  0.495197206473133
cell3          cell3   0.66225      Case     ind1  0.495197206473133
cell4          cell4     0.665      Case     ind1  0.495197206473133
cell5          cell5   0.64875      Case     ind1  0.495197206473133
...              ...       ...       ...      ...                ...
cell7196    cell7196   0.65725   Control    ind10 -0.285134650193163
cell7197    cell7197   0.66475   Control    ind10 -0.285134650193163
cell7198    cell7198     0.665   Control    ind10 -0.285134650193163
cell7199    cell7199    0.6655   Control    ind10 -0.285134650193163
cell7200    cell7200   0.65875   Control    ind10 -0.285134650193163
> 
> getOption("mc.cores")
[1] 2
> 
> date()
[1] "Tue Aug 25 01:50:20 2020"
> b0 = zlm(formula = ~ diagnosis + cngeneson + RIN, sca = sca, parallel = TRUE)

Done!
> date()
[1] "Tue Aug 25 01:52:02 2020"
> b1 = zlm(formula = ~ diagnosis + (1 | ind) + cngeneson + RIN, sca = sca, 
+          method = 'glmer', ebayes = FALSE, parallel = TRUE)
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular

Done!
> date()
[1] "Tue Aug 25 02:49:10 2020"
> 
> b0
Fitted zlm on 4000 genes and 7200 cells.
 Using BayesGLMlike ~ diagnosis + cngeneson + RIN 
> b1
Fitted zlm on 4000 genes and 7200 cells.
 Using LMERlike ~ diagnosis + (1 | ind) + cngeneson + RIN 
> 
> date()
[1] "Tue Aug 25 02:49:10 2020"
> lrt0 = lrTest(b0, "diagnosis")
Refitting on reduced model...

Done!
> date()
[1] "Tue Aug 25 02:50:26 2020"
> lrt1 = lrTest(b1, "diagnosis")
Refitting on reduced model...
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular

Done!
> date()
[1] "Tue Aug 25 03:18:12 2020"
> 
> dim(lrt0)
[1] 4000    3    3
> lrt0[1,,]
         metric
test.type     lambda df   Pr(>Chisq)
   cont   60.4727692  1 7.460341e-15
   disc    0.3278489  1 5.669285e-01
   hurdle 60.8006181  2 6.270664e-14
> 
> dim(lrt1)
[1] 4000    3    3
> lrt1[1,,]
         metric
test.type   lambda df Pr(>Chisq)
   cont   3.441683  1 0.06357089
   disc   0.000000  0 1.00000000
   hurdle 3.441683  1 0.06357089
> 
> mast_pval_glm = apply(lrt0, 1, function(x){x[3,3]})
> length(mast_pval_glm)
[1] 4000
> mast_pval_glm[1:4]
       gene1        gene2        gene3        gene4 
6.270664e-14 3.097833e-09 2.409412e-22 6.018976e-01 
> 
> mast_pval_glmer = apply(lrt1, 1, function(x){x[3,3]})
> length(mast_pval_glmer)
[1] 4000
> mast_pval_glmer[1:4]
       gene1        gene2        gene3        gene4 
0.0635708900 0.0007484496 0.2888409161 0.9925113540 
> 
> # ---------------------------------------------------------------
> # check p-value
> # ---------------------------------------------------------------
> 
> idx_grp = list(meanDE=mean_index, varDE=var_index, EE=EE_index)
> 
> plot.hist <- function(pvals, idx_grp, label){
+   for(k in 1:length(idx_grp)){
+     idx  = idx_grp[[k]]
+     main = paste(label, names(idx_grp)[k], sep=", ")
+     hist(pvals[idx], main=main, xlab="p-value", breaks=50)
+   }
+ }
> 
> pdf(sprintf("figures/pvalue_hist_%s.pdf", config), 
+     width = 9, height = 9)
> par(mfrow = c(3, 3), mar=c(5,4,2,1), pty = "s", bty="n")
> plot.hist(pval_M_zinb,    idx_grp, "IDEAS-M-ZINB")
> plot.hist(pval_M_kde,     idx_grp, "IDEAS-M-KDE")
> plot.hist(pval_S0_zinb,   idx_grp, "IDEAS-S0-ZINB")
> plot.hist(pval_S0_kde,    idx_grp, "IDEAS-S0-KDE")
> plot.hist(pval_S1_zinb,   idx_grp, "IDEAS-S1-ZINB")
> plot.hist(pval_S1_kde,    idx_grp, "IDEAS-S1-KDE")
> 
> plot.hist(deseq2_pval,     idx_grp, "DESeq2")
> plot.hist(mast_pval_glm,   idx_grp, "MAST bayesglm")
> plot.hist(mast_pval_glmer, idx_grp, "MAST glmer")
> dev.off()
null device 
          1 
> 
> # ---------------------------------------------------------------
> # save results
> # ---------------------------------------------------------------
> 
> geneType = rep("EE", nGeneTotal)
> geneType[mean_index] = "meanDE"
> geneType[var_index]  = "varDE"
> 
> df1 = data.frame(geneType, pval_M_zinb, pval_M_kde, pval_S0_zinb, 
+                  pval_S0_kde, pval_S1_zinb, pval_S1_kde,
+                  deseq2_pval, mast_pval_glm, mast_pval_glmer)
> dim(df1)
[1] 4000   10
> df1[1:2,]
      geneType pval_M_zinb pval_M_kde pval_S0_zinb pval_S0_kde pval_S1_zinb
gene1       EE       0.502      0.482        0.358       0.287        0.316
gene2   meanDE       0.297      0.578        0.004       0.456        0.005
      pval_S1_kde deseq2_pval mast_pval_glm mast_pval_glmer
gene1       0.254 0.135859458  6.270664e-14    0.0635708900
gene2       0.434 0.001993133  3.097833e-09    0.0007484496
> 
> fun1 <- function(x, alpha){table(x<=alpha)/length(x)}
> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.05)})
$pval_M_zinb
$pval_M_zinb$EE

     FALSE       TRUE 
0.95066667 0.04933333 

$pval_M_zinb$meanDE

FALSE  TRUE 
0.838 0.162 

$pval_M_zinb$varDE

FALSE  TRUE 
0.712 0.286 


$pval_M_kde
$pval_M_kde$EE

     FALSE       TRUE 
0.94533333 0.05466667 

$pval_M_kde$meanDE

FALSE  TRUE 
 0.85  0.15 

$pval_M_kde$varDE

FALSE  TRUE 
0.684 0.316 


$pval_S0_zinb
$pval_S0_zinb$EE

FALSE  TRUE 
0.946 0.054 

$pval_S0_zinb$meanDE

FALSE  TRUE 
0.828 0.172 

$pval_S0_zinb$varDE

FALSE  TRUE 
0.696 0.302 


$pval_S0_kde
$pval_S0_kde$EE

     FALSE       TRUE 
0.94633333 0.05366667 

$pval_S0_kde$meanDE

FALSE  TRUE 
0.846 0.154 

$pval_S0_kde$varDE

FALSE  TRUE 
 0.66  0.34 


$pval_S1_zinb
$pval_S1_zinb$EE

     FALSE       TRUE 
0.95566667 0.04433333 

$pval_S1_zinb$meanDE

FALSE  TRUE 
 0.84  0.16 

$pval_S1_zinb$varDE

FALSE  TRUE 
0.702 0.296 


$pval_S1_kde
$pval_S1_kde$EE

     FALSE       TRUE 
0.95633333 0.04366667 

$pval_S1_kde$meanDE

FALSE  TRUE 
0.868 0.132 

$pval_S1_kde$varDE

FALSE  TRUE 
0.682 0.318 


$deseq2_pval
$deseq2_pval$EE

FALSE  TRUE 
0.911 0.089 

$deseq2_pval$meanDE

FALSE  TRUE 
 0.69  0.31 

$deseq2_pval$varDE

FALSE  TRUE 
0.904 0.096 


$mast_pval_glm
$mast_pval_glm$EE

    FALSE      TRUE 
0.2693333 0.7306667 

$mast_pval_glm$meanDE

FALSE  TRUE 
0.122 0.878 

$mast_pval_glm$varDE

FALSE  TRUE 
0.004 0.996 


$mast_pval_glmer
$mast_pval_glmer$EE

    FALSE      TRUE 
0.8636667 0.1363333 

$mast_pval_glmer$meanDE

FALSE  TRUE 
0.644 0.356 

$mast_pval_glmer$varDE

FALSE  TRUE 
 0.48  0.52 


> 
> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.01)})
$pval_M_zinb
$pval_M_zinb$EE

      FALSE        TRUE 
0.991666667 0.008333333 

$pval_M_zinb$meanDE

FALSE  TRUE 
0.944 0.056 

$pval_M_zinb$varDE

FALSE  TRUE 
0.856 0.142 


$pval_M_kde
$pval_M_kde$EE

      FALSE        TRUE 
0.990666667 0.009333333 

$pval_M_kde$meanDE

FALSE  TRUE 
0.948 0.052 

$pval_M_kde$varDE

FALSE  TRUE 
0.852 0.148 


$pval_S0_zinb
$pval_S0_zinb$EE

      FALSE        TRUE 
0.992333333 0.007666667 

$pval_S0_zinb$meanDE

FALSE  TRUE 
0.958 0.042 

$pval_S0_zinb$varDE

FALSE  TRUE 
0.852 0.146 


$pval_S0_kde
$pval_S0_kde$EE

      FALSE        TRUE 
0.993666667 0.006333333 

$pval_S0_kde$meanDE

FALSE  TRUE 
0.966 0.034 

$pval_S0_kde$varDE

FALSE  TRUE 
0.874 0.126 


$pval_S1_zinb
$pval_S1_zinb$EE

      FALSE        TRUE 
0.996333333 0.003666667 

$pval_S1_zinb$meanDE

FALSE  TRUE 
0.968 0.032 

$pval_S1_zinb$varDE

FALSE  TRUE 
0.874 0.124 


$pval_S1_kde
$pval_S1_kde$EE

      FALSE        TRUE 
0.996333333 0.003666667 

$pval_S1_kde$meanDE

FALSE  TRUE 
0.974 0.026 

$pval_S1_kde$varDE

FALSE  TRUE 
  0.9   0.1 


$deseq2_pval
$deseq2_pval$EE

FALSE  TRUE 
0.964 0.036 

$deseq2_pval$meanDE

FALSE  TRUE 
0.838 0.162 

$deseq2_pval$varDE

FALSE  TRUE 
0.962 0.038 


$mast_pval_glm
$mast_pval_glm$EE

    FALSE      TRUE 
0.3463333 0.6536667 

$mast_pval_glm$meanDE

FALSE  TRUE 
0.162 0.838 

$mast_pval_glm$varDE

FALSE  TRUE 
 0.01  0.99 


$mast_pval_glmer
$mast_pval_glmer$EE

     FALSE       TRUE 
0.94566667 0.05433333 

$mast_pval_glmer$meanDE

FALSE  TRUE 
0.792 0.208 

$mast_pval_glmer$varDE

FALSE  TRUE 
0.656 0.344 


> 
> write.table(df1, file=sprintf("results/pval_%s.txt", config), append=FALSE, 
+             quote=FALSE, sep="\t", row.names = FALSE, col.names = TRUE)
> 
> sessionInfo()
R version 3.6.2 (2019-12-12)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Catalina 10.15.6

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] ideas_0.98                  ggpubr_0.2.5               
 [3] magrittr_1.5                ggplot2_3.3.1              
 [5] pryr_0.1.4                  data.table_1.12.8          
 [7] reticulate_1.15             MiRKAT_1.1.0               
 [9] doRNG_1.8.2                 rngtools_1.5               
[11] doParallel_1.0.15           iterators_1.0.12           
[13] foreach_1.4.7               DESeq2_1.24.0              
[15] lme4_1.1-21                 Matrix_1.2-18              
[17] MAST_1.10.0                 SingleCellExperiment_1.6.0 
[19] SummarizedExperiment_1.14.1 DelayedArray_0.10.0        
[21] BiocParallel_1.18.1         matrixStats_0.55.0         
[23] Biobase_2.44.0              GenomicRanges_1.36.1       
[25] GenomeInfoDb_1.20.0         IRanges_2.18.3             
[27] S4Vectors_0.22.1            BiocGenerics_0.30.0        
[29] moments_0.14                emdbook_1.3.11             
[31] MASS_7.3-51.5              

loaded via a namespace (and not attached):
  [1] minqa_1.2.4            colorspace_1.4-1       ggsignif_0.6.0        
  [4] ellipsis_0.3.0         htmlTable_1.13.3       XVector_0.24.0        
  [7] base64enc_0.1-3        rstudioapi_0.11        MatrixModels_0.4-1    
 [10] bit64_0.9-7            AnnotationDbi_1.46.1   mvtnorm_1.0-12        
 [13] codetools_0.2-16       splines_3.6.2          pscl_1.5.5            
 [16] geneplotter_1.62.0     knitr_1.28             jsonlite_1.6.1        
 [19] Formula_1.2-3          nloptr_1.2.1           annotate_1.62.0       
 [22] kernlab_0.9-29         cluster_2.1.0          png_0.1-7             
 [25] compiler_3.6.2         backports_1.1.5        assertthat_0.2.1      
 [28] prettyunits_1.1.1      quantreg_5.55          acepack_1.4.1         
 [31] htmltools_0.4.0        tools_3.6.2            coda_0.19-3           
 [34] gtable_0.3.0           glue_1.3.1             GenomeInfoDbData_1.2.1
 [37] reshape2_1.4.3         dplyr_0.8.4            Rcpp_1.0.3            
 [40] bbmle_1.0.23.1         vctrs_0.3.0            ape_5.3               
 [43] nlme_3.1-144           xfun_0.12              stringr_1.4.0         
 [46] CompQuadForm_1.4.3     lifecycle_0.2.0        GUniFrac_1.1          
 [49] XML_3.99-0.3           PearsonDS_1.1          zlibbioc_1.30.0       
 [52] scales_1.1.0           hms_0.5.3              SparseM_1.78          
 [55] RColorBrewer_1.1-2     memoise_1.1.0          gridExtra_2.3         
 [58] segmented_1.2-0        bdsmatrix_1.3-4        rpart_4.1-15          
 [61] latticeExtra_0.6-29    stringi_1.4.5          RSQLite_2.2.0         
 [64] genefilter_1.66.0      blme_1.0-4             checkmate_2.0.0       
 [67] permute_0.9-5          boot_1.3-24            rlang_0.4.6           
 [70] pkgconfig_2.0.3        bitops_1.0-6           lattice_0.20-38       
 [73] purrr_0.3.3            htmlwidgets_1.5.1      bit_1.1-15.2          
 [76] tidyselect_1.0.0       plyr_1.8.5             R6_2.4.1              
 [79] Hmisc_4.4-0            DBI_1.1.0              withr_2.1.2           
 [82] pillar_1.4.3           foreign_0.8-75         mgcv_1.8-31           
 [85] mixtools_1.2.0         survival_3.1-8         abind_1.4-5           
 [88] RCurl_1.98-1.1         nnet_7.3-12            tibble_3.0.1          
 [91] crayon_1.3.4           progress_1.2.2         jpeg_0.1-8.1          
 [94] locfit_1.5-9.4         grid_3.6.2             blob_1.2.1            
 [97] vegan_2.5-6            digest_0.6.23          xtable_1.8-4          
[100] numDeriv_2016.8-1.1    munsell_0.5.0         
> 
> mem_used()
1.24 GB
> gc()
            used  (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   7198153 384.5   12431447  664.0         NA  12431447  664.0
Vcells 104854553 800.0  278304691 2123.3      32768 278304691 2123.3
> 
> q(save = "no")
> proc.time()
     user    system   elapsed 
19272.927   538.991 10034.519 
