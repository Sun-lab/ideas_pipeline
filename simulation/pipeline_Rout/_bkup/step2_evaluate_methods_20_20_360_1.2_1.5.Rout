
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #########################################################################
> #                                                                       #
> #                                                                       #
> #             Part II: Defferential Expression Analysis                 #
> #                                                                       #
> #                                                                       #
> #########################################################################
> # once simulated genes, we will do the Differential Expression Analysis
> # Here we will implement our method, plus the DESeq2 and the MAST analysis.
> 
> args = commandArgs(trailingOnly=TRUE)
> args
[1] "ncase=20"   "nctrl=20"   "ncell=360"  "r_mean=1.2" "r_var=1.5" 
> 
> if (length(args) < 5) {
+   message("no enough arguments, using default values")
+   r_mean   = 1.2     # The expected fold-changes in mean
+   r_var    = 1.5     # The expected fold-changes in variances
+   ncase    = 13      # case individuals
+   nctrl    = 10      # control individuals
+   ncell    = 360    # numbers of cells collected from each individuals.
+ } else{
+   for(i in 1:length(args)){
+     eval(parse(text=args[[i]]))
+   }
+ }
> 
> config = sprintf("ncase_%d_nctrl_%d_ncell_%d", ncase, nctrl, ncell)
> config = sprintf("%s_fold_mean_%.1f_var_%.1f", config, r_mean, r_var)
> config
[1] "ncase_20_nctrl_20_ncell_360_fold_mean_1.2_var_1.5"
> 
> # ---------------------------------------------------------------
> # additional parameters
> # ---------------------------------------------------------------
> 
> nCore = 2          # number of cores for multi-core computation
> nGeneMean  = 500    # number of genes with different means in cases
> nGeneVar   = 500    # number of genes with different variance in cases
> nGeneBlank = 3000   # number of genes equivalently expressed
> nGeneTotal = nGeneMean + nGeneVar + nGeneBlank # total numbers of genes
> nall       = ncase + nctrl
> 
> # ---------------------------------------------------------------
> # initial setup
> # ---------------------------------------------------------------
> 
> library(MASS)
> library(emdbook)
> library(moments)
> library(MAST)
Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

Loading required package: BiocParallel

Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from ‘package:base’:

    aperm, apply, rowsum


Attaching package: ‘MAST’

The following object is masked from ‘package:stats’:

    filter

> library(lme4)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:S4Vectors’:

    expand

> library(DESeq2)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> library(foreach)
> library(doRNG)
Loading required package: rngtools
> library(MiRKAT)
> library(reticulate)
> 
> library(data.table)

Attaching package: ‘data.table’

The following object is masked from ‘package:SummarizedExperiment’:

    shift

The following object is masked from ‘package:GenomicRanges’:

    shift

The following object is masked from ‘package:IRanges’:

    shift

The following objects are masked from ‘package:S4Vectors’:

    first, second

> library(pryr)
Registered S3 method overwritten by 'pryr':
  method      from
  print.bytes Rcpp

Attaching package: ‘pryr’

The following object is masked from ‘package:data.table’:

    address

> library(ggplot2)
> library(ggpubr)
Loading required package: magrittr
> theme_set(theme_bw())
> 
> library(ideas)
> 
> # source("../functions/ZINB_fit_functions.R")
> # source("../functions/kl_divergence_functions.R")
> # source("../functions/Fstat_functions.R")
> 
> registerDoParallel(cores=nCore)
> options(mc.cores=nCore)
> 
> # ---------------------------------------------------------------
> # load data
> # ---------------------------------------------------------------
> 
> gene_index = readRDS(sprintf("data/gene_index_%s.rds", config))
> sim_matrix = readRDS(sprintf("data/sim_matrix_%s.rds", config))
> meta_cell  = readRDS(sprintf("data/meta_%s.rds", config))
> meta_ind   = readRDS(sprintf("data/meta_ind_%s.rds", config))
> 
> ls()
 [1] "args"       "config"     "gene_index" "i"          "meta_cell" 
 [6] "meta_ind"   "nall"       "ncase"      "ncell"      "nCore"     
[11] "nctrl"      "nGeneBlank" "nGeneMean"  "nGeneTotal" "nGeneVar"  
[16] "r_mean"     "r_var"      "sim_matrix"
> EE_index   = gene_index$EE_index
> mean_index = gene_index$mean_index
> var_index  = gene_index$var_index
> 
> dim(sim_matrix)
[1]  4000 14400
> sim_matrix[1:2,1:5]
      cell1 cell2 cell3 cell4 cell5
gene1     2     3     0     4     8
gene2     0     1     2     1     0
> 
> dim(meta_cell)
[1] 14400     5
> meta_cell[1:2,]
      cell_id individual phenotype cell_rd     CDR
cell1   cell1       ind1         1    9996 0.65425
cell2   cell2       ind1         1   10048 0.66375
> 
> dim(meta_ind)
[1] 40  3
> meta_ind[1:2,]
     individual phenotype        RIN
ind1       ind1         1 -2.0424892
ind2       ind2         1  0.7041925
> 
> # ---------------------------------------------------------------
> # 1. DESeq2 analysis 
> # ---------------------------------------------------------------
> # We calculate sim_matrix_bulk by adding up raw counts of
> # all cells of an individual within a gene
> # ---------------------------------------------------------------
> 
> # individual level info
> u_ind = unique(meta_cell$individual)
> length(u_ind)
[1] 40
> u_ind[1:2]
[1] "ind1" "ind2"
> 
> sim_matrix_bulk = matrix(nrow = nrow(sim_matrix),
+                          ncol = length(u_ind))
> rownames(sim_matrix_bulk) = rownames(sim_matrix)
> colnames(sim_matrix_bulk) = u_ind
> 
> for (i_ind in 1:length(u_ind)) {
+   cur_ind   = u_ind[i_ind]
+   cur_ind_m = sim_matrix[, meta_cell$individual == cur_ind]
+   sim_matrix_bulk[, i_ind] = rowSums(cur_ind_m, na.rm = TRUE)
+ }
> 
> meta_ind$phenotype = as.factor(meta_ind$phenotype)
> dim(meta_ind)
[1] 40  3
> meta_ind[1:2,]
     individual phenotype        RIN
ind1       ind1         1 -2.0424892
ind2       ind2         1  0.7041925
> 
> # DESeq2 for all the genes
> dds = DESeqDataSetFromMatrix(countData = sim_matrix_bulk,
+                              colData = meta_ind,
+                              design = ~ RIN + phenotype)
converting counts to integer mode
> 
> dds = DESeq(dds)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
-- note: fitType='parametric', but the dispersion trend was not well captured by the
   function: y = a/x + b, and a local regression fit was automatically substituted.
   specify fitType='local' or 'mean' to avoid this message next time.
final dispersion estimates
fitting model and testing
> nms = resultsNames(dds)
> nms
[1] "Intercept"        "RIN"              "phenotype_1_vs_0"
> 
> deseq2_pval = results(dds)$pvalue
> 
> rk = results(dds, name="RIN")
> deseq2_pval_RIN = rk$pvalue
> 
> summary(deseq2_pval)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.1539  0.4337  0.4426  0.7112  0.9998 
> summary(deseq2_pval_RIN)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02244 0.17344 0.29348 0.51217 0.99992 
> table(deseq2_pval[EE_index] < 0.05)

FALSE  TRUE 
 2809   191 
> table(deseq2_pval[EE_index] < 0.05)/length(EE_index)

     FALSE       TRUE 
0.93633333 0.06366667 
> 
> # DESeq2 only for the EE genes
> dds0 = DESeqDataSetFromMatrix(countData = sim_matrix_bulk[EE_index,],
+                               colData = meta_ind,
+                               design = ~ RIN + phenotype)
converting counts to integer mode
> 
> dds0 = DESeq(dds0)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
-- note: fitType='parametric', but the dispersion trend was not well captured by the
   function: y = a/x + b, and a local regression fit was automatically substituted.
   specify fitType='local' or 'mean' to avoid this message next time.
final dispersion estimates
fitting model and testing
> deseq2_pval0 = results(dds0)$pvalue
> 
> table(deseq2_pval0 < 0.05)

FALSE  TRUE 
 2808   192 
> table(deseq2_pval0 < 0.05)/length(EE_index)

FALSE  TRUE 
0.936 0.064 
> 
> # ---------------------------------------------------------------
> # 2. IDEAS 
> # ---------------------------------------------------------------
> 
> count_matrix  = sim_matrix
> var2test      = "phenotype"
> var2adjust    = "RIN"
> var2test_type = "binary"
> cell_rd_var   = "cell_rd"
> 
> date()
[1] "Mon Aug 24 14:32:51 2020"
> if(file.exists(sprintf("data/dist_zinb_%s.rds", config))){
+   dist_zinb = readRDS(sprintf("data/dist_zinb_%s.rds", config))
+ }else{
+   dist_zinb = ideas_dist(count_matrix, meta_cell, meta_ind, cell_rd_var, 
+                          var2test, var2adjust, var2test_type, 
+                          fit_method = "zinb")
+   saveRDS(dist_zinb, sprintf("data/dist_zinb_%s.rds", config))
+ }
> date()
[1] "Mon Aug 24 14:32:52 2020"
> 
> dim(dist_zinb)
[1] 4000   40   40
> dist_zinb[1,1:3,1:3]
            ind1        ind2        ind3
ind1 0.000000000 0.005958537 0.003774698
ind2 0.005958537 0.000000000 0.006585956
ind3 0.003774698 0.006585956 0.000000000
> 
> date()
[1] "Mon Aug 24 14:32:52 2020"
> if(file.exists(sprintf("data/dist_kde_%s.rds", config))){
+   dist_kde = readRDS(sprintf("data/dist_kde_%s.rds", config))
+ }else{
+   dist_kde = ideas_dist(count_matrix, meta_cell, meta_ind, cell_rd_var, 
+                         var2test, var2adjust, var2test_type, 
+                         fit_method = "kde")
+   saveRDS(dist_kde,  sprintf("data/dist_kde_%s.rds",  config))
+ }
the count_matrix includes 4000 genes in 14400 cells

estimating distribution for each gene and each individaul by kde

> date()
[1] "Mon Aug 24 15:51:21 2020"
> 
> dim(dist_kde)
[1] 4000   40   40
> dist_kde[1,1:3,1:3]
            ind1        ind2        ind3
ind1 0.000000000 0.008307747 0.006461678
ind2 0.008307747 0.000000000 0.001621106
ind3 0.006461678 0.001621106 0.000000000
> 
> # ---------------------------------------------------------------
> # STEP 2: pval calculation 
> # ---------------------------------------------------------------
> 
> y = as.numeric(meta_ind$phenotype==1)
> 
> date()
[1] "Mon Aug 24 15:51:21 2020"
> pval_M_zinb = foreach(i_g = 1:dim(dist_zinb)[1], .combine = "c") %dopar% {
+   Di = dist_zinb[i_g,,]
+   if(any(is.na(Di))){
+     pval = NA 
+   }else{
+     Ki = D2K(Di)
+     m1 = MiRKAT(y = y, X = meta_ind$RIN, Ks = Ki, out_type = "D", 
+                 method = "permutation")
+     pval = m1$indivP
+   }
+   pval
+ }
> date()
[1] "Mon Aug 24 15:54:20 2020"
> 
> summary(pval_M_zinb)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
 0.0010  0.1250  0.4070  0.4254  0.6960  1.0000       5 
> 
> date()
[1] "Mon Aug 24 15:54:20 2020"
> pval_M_kde = foreach(i_g = 1:dim(dist_kde)[1], .combine = "c") %dopar% {
+   Di = dist_kde[i_g,,]
+   if(any(is.na(Di))){
+     pval = NA 
+   }else{
+     Ki = D2K(Di)
+     m1 = MiRKAT(y = y, X = meta_ind$RIN, Ks = Ki, out_type = "D", 
+                 method = "permutation")
+     pval = m1$indivP
+   }
+   pval
+ }
> date()
[1] "Mon Aug 24 15:56:58 2020"
> 
> summary(pval_M_kde)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0010  0.1380  0.4210  0.4348  0.7040  1.0000 
> 
> n_perm = 999
> r.seed = 819
> delta  = 0.5
> 
> date()
[1] "Mon Aug 24 15:56:58 2020"
> pval_S1_zinb  = permanova(dist_zinb, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, r.seed=r.seed, 
+                           residulize.x = TRUE)
skip 5 gene(s) with NA in the dist_array

testing for 'phenotype', a binary variable

> date()
[1] "Mon Aug 24 16:17:39 2020"
> pval_S0_zinb  = permanova(dist_zinb, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, r.seed=r.seed, 
+                           residulize.x = FALSE)
skip 5 gene(s) with NA in the dist_array

testing for 'phenotype', a binary variable

> date()
[1] "Mon Aug 24 16:35:30 2020"
> pval_S1_kde   = permanova(dist_kde, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, r.seed=r.seed, 
+                           residulize.x = TRUE)
testing for 'phenotype', a binary variable

> date()
[1] "Mon Aug 24 16:52:04 2020"
> pval_S0_kde   = permanova(dist_kde, meta_ind, var2test, var2adjust, 
+                           var2test_type, n_perm=n_perm, r.seed=r.seed, 
+                           residulize.x = FALSE)
testing for 'phenotype', a binary variable

> date()
[1] "Mon Aug 24 17:06:43 2020"
> 
> table(pval_M_zinb < 0.01, pval_M_kde < 0.01)
       
        FALSE TRUE
  FALSE  3550   73
  TRUE    153  219
> table(pval_S0_zinb < 0.01, pval_S0_kde < 0.01)
       
        FALSE TRUE
  FALSE  3537   75
  TRUE    140  243
> table(pval_S1_zinb < 0.01, pval_S1_kde < 0.01)
       
        FALSE TRUE
  FALSE  3542   70
  TRUE    150  233
> 
> table(pval_M_zinb < 0.01, pval_S0_zinb < 0.01)
       
        FALSE TRUE
  FALSE  3589   34
  TRUE     23  349
> table(pval_M_zinb < 0.01, pval_S1_zinb < 0.01)
       
        FALSE TRUE
  FALSE  3588   35
  TRUE     24  348
> 
> table(pval_M_kde < 0.01, pval_S0_kde < 0.01)
       
        FALSE TRUE
  FALSE  3669   39
  TRUE     13  279
> table(pval_M_kde < 0.01, pval_S1_kde < 0.01)
       
        FALSE TRUE
  FALSE  3677   31
  TRUE     20  272
> 
> # ---------------------------------------------------------------
> # 3. MAST analysis 
> # ---------------------------------------------------------------
> #
> # the input of MAST analysis can be matrix or SingleCellAssay.
> #
> # input:
> # (1) the log-transformed expression count matrix,
> #     with each column represents a cell and each row represents a gene.
> # (2) the meta data, including cell and individual information.
> 
> # we get the p-values based on the Hurdle model ("H" model)
> # ---------------------------------------------------------------
> 
> sim_matrix_log = log2(1 + sim_matrix) #log transformed data
> 
> dim(sim_matrix_log)
[1]  4000 14400
> sim_matrix_log[1:3, 1:4]
         cell1 cell2    cell3    cell4
gene1 1.584963     2 0.000000 2.321928
gene2 0.000000     1 1.584963 1.000000
gene3 0.000000     0 0.000000 0.000000
> cell_id = colnames(sim_matrix_log)   # get the cell id from the data
> gene_id = rownames(sim_matrix_log)   # get the gene id from the data
> 
> diagnosis = as.character(meta_cell$phenotype) #
> diagnosis[diagnosis == 1] = "Case"
> diagnosis[diagnosis == 0] = "Control"
> 
> fData = data.frame(primerid = gene_id)
> cData = data.frame(wellKey  = cell_id)
> 
> sca = FromMatrix(sim_matrix_log, cData, fData)
Assuming data assay in position 1, with name et is log-transformed.
> colData(sca)$cngeneson = as.numeric(meta_cell$CDR)
> colData(sca)$diagnosis = as.factor(diagnosis)
> colData(sca)$ind = as.factor(meta_cell$individual)
> colData(sca)$RIN = meta_ind$RIN[match(meta_cell$individual, meta_ind$individual)]
> 
> colData(sca)
DataFrame with 14400 rows and 5 columns
              wellKey cngeneson diagnosis      ind               RIN
          <character> <numeric>  <factor> <factor>         <numeric>
cell1           cell1   0.65425      Case     ind1 -2.04248919728842
cell2           cell2   0.66375      Case     ind1 -2.04248919728842
cell3           cell3    0.6765      Case     ind1 -2.04248919728842
cell4           cell4     0.672      Case     ind1 -2.04248919728842
cell5           cell5   0.66125      Case     ind1 -2.04248919728842
...               ...       ...       ...      ...               ...
cell14396   cell14396     0.654   Control    ind40 -1.74802178079105
cell14397   cell14397     0.664   Control    ind40 -1.74802178079105
cell14398   cell14398     0.659   Control    ind40 -1.74802178079105
cell14399   cell14399   0.66775   Control    ind40 -1.74802178079105
cell14400   cell14400     0.672   Control    ind40 -1.74802178079105
> 
> getOption("mc.cores")
[1] 2
> 
> date()
[1] "Mon Aug 24 17:06:50 2020"
> b0 = zlm(formula = ~ diagnosis + cngeneson + RIN, sca = sca, parallel = TRUE)

Done!
> date()
[1] "Mon Aug 24 17:10:04 2020"
> b1 = zlm(formula = ~ diagnosis + (1 | ind) + cngeneson + RIN, sca = sca, 
+          method = 'glmer', ebayes = FALSE, parallel = TRUE)
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular

Done!
Warning message:
In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge with max|grad| = 0.00173092 (tol = 0.001, component 1)
> date()
[1] "Mon Aug 24 18:27:13 2020"
> 
> b0
Fitted zlm on 4000 genes and 14400 cells.
 Using BayesGLMlike ~ diagnosis + cngeneson + RIN 
> b1
Fitted zlm on 4000 genes and 14400 cells.
 Using LMERlike ~ diagnosis + (1 | ind) + cngeneson + RIN 
> 
> date()
[1] "Mon Aug 24 18:27:13 2020"
> lrt0 = lrTest(b0, "diagnosis")
Refitting on reduced model...

Done!
> date()
[1] "Mon Aug 24 18:28:27 2020"
> lrt1 = lrTest(b1, "diagnosis")
Refitting on reduced model...
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular
boundary (singular) fit: see ?isSingular

Done!
> date()
[1] "Mon Aug 24 19:09:14 2020"
> 
> dim(lrt0)
[1] 4000    3    3
> lrt0[1,,]
         metric
test.type    lambda df Pr(>Chisq)
   cont   3.1094744  1 0.07783807
   disc   0.4008763  1 0.52663704
   hurdle 3.5103507  2 0.17287692
> 
> dim(lrt1)
[1] 4000    3    3
> lrt1[1,,]
         metric
test.type    lambda df Pr(>Chisq)
   cont   0.1555542  1  0.6932831
   disc   0.0000000  0  1.0000000
   hurdle 0.1555542  1  0.6932831
> 
> mast_pval_glm = apply(lrt0, 1, function(x){x[3,3]})
> length(mast_pval_glm)
[1] 4000
> mast_pval_glm[1:4]
       gene1        gene2        gene3        gene4 
1.728769e-01 2.880691e-28 4.832061e-23 7.116579e-01 
> 
> mast_pval_glmer = apply(lrt1, 1, function(x){x[3,3]})
> length(mast_pval_glmer)
[1] 4000
> mast_pval_glmer[1:4]
       gene1        gene2        gene3        gene4 
0.6932830990 0.0000162371 0.1000106928 0.6421128578 
> 
> # ---------------------------------------------------------------
> # check p-value
> # ---------------------------------------------------------------
> 
> idx_grp = list(meanDE=mean_index, varDE=var_index, EE=EE_index)
> 
> plot.hist <- function(pvals, idx_grp, label){
+   for(k in 1:length(idx_grp)){
+     idx  = idx_grp[[k]]
+     main = paste(label, names(idx_grp)[k], sep=", ")
+     hist(pvals[idx], main=main, xlab="p-value", breaks=50)
+   }
+ }
> 
> pdf(sprintf("figures/pvalue_hist_%s.pdf", config), 
+     width = 9, height = 9)
> par(mfrow = c(3, 3), mar=c(5,4,2,1), pty = "s", bty="n")
> plot.hist(pval_M_zinb,    idx_grp, "IDEAS-M-ZINB")
> plot.hist(pval_M_kde,     idx_grp, "IDEAS-M-KDE")
> plot.hist(pval_S0_zinb,   idx_grp, "IDEAS-S0-ZINB")
> plot.hist(pval_S0_kde,    idx_grp, "IDEAS-S0-KDE")
> plot.hist(pval_S1_zinb,   idx_grp, "IDEAS-S1-ZINB")
> plot.hist(pval_S1_kde,    idx_grp, "IDEAS-S1-KDE")
> 
> plot.hist(deseq2_pval,     idx_grp, "DESeq2")
> plot.hist(mast_pval_glm,   idx_grp, "MAST bayesglm")
> plot.hist(mast_pval_glmer, idx_grp, "MAST glmer")
> dev.off()
null device 
          1 
> 
> # ---------------------------------------------------------------
> # save results
> # ---------------------------------------------------------------
> 
> geneType = rep("EE", nGeneTotal)
> geneType[mean_index] = "meanDE"
> geneType[var_index]  = "varDE"
> 
> df1 = data.frame(geneType, pval_M_zinb, pval_M_kde, pval_S0_zinb, 
+                  pval_S0_kde, pval_S1_zinb, pval_S1_kde,
+                  deseq2_pval, mast_pval_glm, mast_pval_glmer)
> dim(df1)
[1] 4000   10
> df1[1:2,]
      geneType pval_M_zinb pval_M_kde pval_S0_zinb pval_S0_kde pval_S1_zinb
gene1       EE       0.999      0.951        0.998       0.946        0.999
gene2    varDE       0.001      0.047        0.001       0.047        0.001
      pval_S1_kde deseq2_pval mast_pval_glm mast_pval_glmer
gene1       0.953   0.6169287  1.728769e-01    0.6932830990
gene2       0.052   0.9399927  2.880691e-28    0.0000162371
> 
> fun1 <- function(x, alpha){table(x<=alpha)/length(x)}
> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.05)})
$pval_M_zinb
$pval_M_zinb$EE

    FALSE      TRUE 
0.9543333 0.0440000 

$pval_M_zinb$meanDE

FALSE  TRUE 
0.476 0.524 

$pval_M_zinb$varDE

FALSE  TRUE 
0.432 0.568 


$pval_M_kde
$pval_M_kde$EE

     FALSE       TRUE 
0.95733333 0.04266667 

$pval_M_kde$meanDE

FALSE  TRUE 
0.594 0.406 

$pval_M_kde$varDE

FALSE  TRUE 
0.456 0.544 


$pval_S0_zinb
$pval_S0_zinb$EE

     FALSE       TRUE 
0.95000000 0.04833333 

$pval_S0_zinb$meanDE

FALSE  TRUE 
0.452 0.548 

$pval_S0_zinb$varDE

FALSE  TRUE 
0.408 0.592 


$pval_S0_kde
$pval_S0_kde$EE

     FALSE       TRUE 
0.95333333 0.04666667 

$pval_S0_kde$meanDE

FALSE  TRUE 
0.582 0.418 

$pval_S0_kde$varDE

FALSE  TRUE 
 0.44  0.56 


$pval_S1_zinb
$pval_S1_zinb$EE

    FALSE      TRUE 
0.9513333 0.0470000 

$pval_S1_zinb$meanDE

FALSE  TRUE 
0.454 0.546 

$pval_S1_zinb$varDE

FALSE  TRUE 
0.406 0.594 


$pval_S1_kde
$pval_S1_kde$EE

     FALSE       TRUE 
0.95466667 0.04533333 

$pval_S1_kde$meanDE

FALSE  TRUE 
0.588 0.412 

$pval_S1_kde$varDE

FALSE  TRUE 
0.448 0.552 


$deseq2_pval
$deseq2_pval$EE

     FALSE       TRUE 
0.93633333 0.06366667 

$deseq2_pval$meanDE

FALSE  TRUE 
0.342 0.658 

$deseq2_pval$varDE

FALSE  TRUE 
0.922 0.078 


$mast_pval_glm
$mast_pval_glm$EE

    FALSE      TRUE 
0.3653333 0.6346667 

$mast_pval_glm$meanDE

FALSE  TRUE 
0.038 0.962 

$mast_pval_glm$varDE

FALSE  TRUE 
0.014 0.986 


$mast_pval_glmer
$mast_pval_glmer$EE

     FALSE       TRUE 
0.92833333 0.07166667 

$mast_pval_glmer$meanDE

FALSE  TRUE 
0.344 0.656 

$mast_pval_glmer$varDE

FALSE  TRUE 
0.318 0.682 


> 
> apply(df1[,-1], 2, function(v){tapply(v, df1$geneType, fun1, alpha=0.01)})
$pval_M_zinb
$pval_M_zinb$EE

      FALSE        TRUE 
0.989666667 0.008666667 

$pval_M_zinb$meanDE

FALSE  TRUE 
0.666 0.334 

$pval_M_zinb$varDE

FALSE  TRUE 
0.608 0.392 


$pval_M_kde
$pval_M_kde$EE

      FALSE        TRUE 
0.992333333 0.007666667 

$pval_M_kde$meanDE

FALSE  TRUE 
0.778 0.222 

$pval_M_kde$varDE

FALSE  TRUE 
0.656 0.344 


$pval_S0_zinb
$pval_S0_zinb$EE

     FALSE       TRUE 
0.98800000 0.01033333 

$pval_S0_zinb$meanDE

FALSE  TRUE 
0.672 0.328 

$pval_S0_zinb$varDE

FALSE  TRUE 
0.598 0.402 


$pval_S0_kde
$pval_S0_kde$EE

     FALSE       TRUE 
0.98966667 0.01033333 

$pval_S0_kde$meanDE

FALSE  TRUE 
0.778 0.222 

$pval_S0_kde$varDE

FALSE  TRUE 
0.638 0.362 


$pval_S1_zinb
$pval_S1_zinb$EE

     FALSE       TRUE 
0.98800000 0.01033333 

$pval_S1_zinb$meanDE

FALSE  TRUE 
0.676 0.324 

$pval_S1_zinb$varDE

FALSE  TRUE 
0.592 0.408 


$pval_S1_kde
$pval_S1_kde$EE

FALSE  TRUE 
0.991 0.009 

$pval_S1_kde$meanDE

FALSE  TRUE 
0.776 0.224 

$pval_S1_kde$varDE

FALSE  TRUE 
0.646 0.354 


$deseq2_pval
$deseq2_pval$EE

     FALSE       TRUE 
0.98366667 0.01633333 

$deseq2_pval$meanDE

FALSE  TRUE 
 0.49  0.51 

$deseq2_pval$varDE

FALSE  TRUE 
0.972 0.028 


$mast_pval_glm
$mast_pval_glm$EE

    FALSE      TRUE 
0.4563333 0.5436667 

$mast_pval_glm$meanDE

FALSE  TRUE 
 0.05  0.95 

$mast_pval_glm$varDE

FALSE  TRUE 
0.016 0.984 


$mast_pval_glmer
$mast_pval_glmer$EE

FALSE  TRUE 
0.981 0.019 

$mast_pval_glmer$meanDE

FALSE  TRUE 
0.504 0.496 

$mast_pval_glmer$varDE

FALSE  TRUE 
0.446 0.554 


> 
> write.table(df1, file=sprintf("results/pval_%s.txt", config), append=FALSE, 
+             quote=FALSE, sep="\t", row.names = FALSE, col.names = TRUE)
> 
> sessionInfo()
R version 3.6.2 (2019-12-12)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Catalina 10.15.6

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] ideas_0.98                  ggpubr_0.2.5               
 [3] magrittr_1.5                ggplot2_3.3.1              
 [5] pryr_0.1.4                  data.table_1.12.8          
 [7] reticulate_1.15             MiRKAT_1.1.0               
 [9] doRNG_1.8.2                 rngtools_1.5               
[11] doParallel_1.0.15           iterators_1.0.12           
[13] foreach_1.4.7               DESeq2_1.24.0              
[15] lme4_1.1-21                 Matrix_1.2-18              
[17] MAST_1.10.0                 SingleCellExperiment_1.6.0 
[19] SummarizedExperiment_1.14.1 DelayedArray_0.10.0        
[21] BiocParallel_1.18.1         matrixStats_0.55.0         
[23] Biobase_2.44.0              GenomicRanges_1.36.1       
[25] GenomeInfoDb_1.20.0         IRanges_2.18.3             
[27] S4Vectors_0.22.1            BiocGenerics_0.30.0        
[29] moments_0.14                emdbook_1.3.11             
[31] MASS_7.3-51.5              

loaded via a namespace (and not attached):
  [1] minqa_1.2.4            colorspace_1.4-1       ggsignif_0.6.0        
  [4] ellipsis_0.3.0         htmlTable_1.13.3       XVector_0.24.0        
  [7] base64enc_0.1-3        rstudioapi_0.11        MatrixModels_0.4-1    
 [10] bit64_0.9-7            AnnotationDbi_1.46.1   mvtnorm_1.0-12        
 [13] codetools_0.2-16       splines_3.6.2          pscl_1.5.5            
 [16] geneplotter_1.62.0     knitr_1.28             jsonlite_1.6.1        
 [19] Formula_1.2-3          nloptr_1.2.1           annotate_1.62.0       
 [22] kernlab_0.9-29         cluster_2.1.0          png_0.1-7             
 [25] compiler_3.6.2         backports_1.1.5        assertthat_0.2.1      
 [28] prettyunits_1.1.1      quantreg_5.55          acepack_1.4.1         
 [31] htmltools_0.4.0        tools_3.6.2            coda_0.19-3           
 [34] gtable_0.3.0           glue_1.3.1             GenomeInfoDbData_1.2.1
 [37] reshape2_1.4.3         dplyr_0.8.4            Rcpp_1.0.3            
 [40] bbmle_1.0.23.1         vctrs_0.3.0            ape_5.3               
 [43] nlme_3.1-144           xfun_0.12              stringr_1.4.0         
 [46] CompQuadForm_1.4.3     lifecycle_0.2.0        GUniFrac_1.1          
 [49] XML_3.99-0.3           PearsonDS_1.1          zlibbioc_1.30.0       
 [52] scales_1.1.0           hms_0.5.3              SparseM_1.78          
 [55] RColorBrewer_1.1-2     memoise_1.1.0          gridExtra_2.3         
 [58] segmented_1.2-0        bdsmatrix_1.3-4        rpart_4.1-15          
 [61] latticeExtra_0.6-29    stringi_1.4.5          RSQLite_2.2.0         
 [64] genefilter_1.66.0      blme_1.0-4             checkmate_2.0.0       
 [67] permute_0.9-5          boot_1.3-24            rlang_0.4.6           
 [70] pkgconfig_2.0.3        bitops_1.0-6           lattice_0.20-38       
 [73] purrr_0.3.3            htmlwidgets_1.5.1      bit_1.1-15.2          
 [76] tidyselect_1.0.0       plyr_1.8.5             R6_2.4.1              
 [79] Hmisc_4.4-0            DBI_1.1.0              withr_2.1.2           
 [82] pillar_1.4.3           foreign_0.8-75         mgcv_1.8-31           
 [85] mixtools_1.2.0         survival_3.1-8         abind_1.4-5           
 [88] RCurl_1.98-1.1         nnet_7.3-12            tibble_3.0.1          
 [91] crayon_1.3.4           progress_1.2.2         jpeg_0.1-8.1          
 [94] locfit_1.5-9.4         grid_3.6.2             blob_1.2.1            
 [97] vegan_2.5-6            digest_0.6.23          xtable_1.8-4          
[100] numDeriv_2016.8-1.1    munsell_0.5.0         
> 
> mem_used()
2.04 GB
> gc()
            used   (Mb) gc trigger (Mb) limit (Mb)  max used (Mb)
Ncells   7213238  385.3   12431447  664         NA  12431447  664
Vcells 204087488 1557.1  505017094 3853      32768 505017094 3853
> 
> q(save = "no")
> proc.time()
     user    system   elapsed 
31262.021   959.077 16609.009 
