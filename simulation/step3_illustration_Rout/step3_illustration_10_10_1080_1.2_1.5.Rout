
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> # illustrate a few examples
> 
> args = commandArgs(trailingOnly=TRUE)
> args
[1] "ncase=10"   "nctrl=10"   "ncell=1080" "r_mean=1.2" "r_var=1.5" 
> 
> if (length(args) < 5) {
+   message("no enough arguments, using default values")
+   r_mean   = 1.2     # The expected fold-changes in mean
+   r_var    = 1.5     # The expected fold-changes in variances
+   ncase    = 10       # case individuals
+   nctrl    = 10       # control individuals
+   ncell    = 360     # numbers of cells collected from each individuals.
+ } else{
+   for(i in 1:length(args)){
+     eval(parse(text=args[[i]]))
+   }
+ }
> 
> if(ncell == 0){
+   UNEQ_N_CELL = TRUE
+ }else{
+   UNEQ_N_CELL = FALSE
+ }
> 
> if(UNEQ_N_CELL){
+   config = sprintf("ncase_%d_nctrl_%d_unequal_n_cell", ncase, nctrl)
+ }else{
+   config = sprintf("ncase_%d_nctrl_%d_ncell_%d", ncase, nctrl, ncell)
+ }
> 
> config = sprintf("%s_fold_mean_%.1f_var_%.1f", config, r_mean, r_var)
> config
[1] "ncase_10_nctrl_10_ncell_1080_fold_mean_1.2_var_1.5"
> 
> # ---------------------------------------------------------------
> # initial setup
> # ---------------------------------------------------------------
> 
> library(MASS)
> library(emdbook)
> library(moments)
> library(MAST)
Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: MatrixGenerics
Loading required package: matrixStats

Attaching package: ‘MatrixGenerics’

The following objects are masked from ‘package:matrixStats’:

    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,
    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,
    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,
    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,
    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,
    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,
    colWeightedMeans, colWeightedMedians, colWeightedSds,
    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,
    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,
    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,
    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,
    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,
    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,
    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,
    rowWeightedSds, rowWeightedVars

Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘Biobase’

The following object is masked from ‘package:MatrixGenerics’:

    rowMedians

The following objects are masked from ‘package:matrixStats’:

    anyMissing, rowMedians

> library(lme4)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:S4Vectors’:

    expand

> library(DESeq2)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> library(foreach)
> library(doRNG)
Loading required package: rngtools
> library(MiRKAT)
> library(reticulate)
> library(transport)
> library(stringr)
> 
> library(data.table)

Attaching package: ‘data.table’

The following object is masked from ‘package:SummarizedExperiment’:

    shift

The following object is masked from ‘package:GenomicRanges’:

    shift

The following object is masked from ‘package:IRanges’:

    shift

The following objects are masked from ‘package:S4Vectors’:

    first, second

> library(pryr)
Registered S3 method overwritten by 'pryr':
  method      from
  print.bytes Rcpp

Attaching package: ‘pryr’

The following object is masked from ‘package:data.table’:

    address

> library(ggplot2)
> library(ggpubr)
Registered S3 methods overwritten by 'car':
  method                          from
  influence.merMod                lme4
  cooks.distance.influence.merMod lme4
  dfbeta.influence.merMod         lme4
  dfbetas.influence.merMod        lme4
> theme_set(theme_classic())
> 
> library(ideas)
> library(reshape2)

Attaching package: ‘reshape2’

The following objects are masked from ‘package:data.table’:

    dcast, melt

> 
> # ---------------------------------------------------------------
> # load data
> # ---------------------------------------------------------------
> 
> sim_data     = readRDS(sprintf("data/sim_data_%s.rds", config))
> count_matrix = sim_data$count_matrix
> meta_cell    = sim_data$meta_cell
> meta_ind     = sim_data$meta_ind
> gene_index   = sim_data$gene_index
> 
> ls()
 [1] "args"         "config"       "count_matrix" "gene_index"   "i"           
 [6] "meta_cell"    "meta_ind"     "ncase"        "ncell"        "nctrl"       
[11] "r_mean"       "r_var"        "sim_data"     "UNEQ_N_CELL" 
> EE_index   = gene_index$EE_index
> mean_index = gene_index$mean_index
> var_index  = gene_index$var_index
> 
> dim(count_matrix)
[1]  8000 21600
> count_matrix[1:3,1:6]
      cell1 cell2 cell3 cell4 cell5 cell6
gene1     1     1     0     0     0     0
gene2     1     1     0     0     3     0
gene3     0     0     0     2     0     1
> 
> dim(meta_cell)
[1] 21600     5
> meta_cell[1:2,]
      cell_id individual phenotype cell_rd      CDR
cell1   cell1       ind1         1    9420 0.447375
cell2   cell2       ind1         1    9804 0.440750
> 
> dim(meta_ind)
[1] 20  3
> meta_ind[1:2,]
     individual phenotype        RIN
ind1       ind1         1 -0.2784552
ind2       ind2         1  0.3460781
> 
> rm(sim_data)
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   7796368  416.4   13973607  746.3         NA   9710537  518.6
Vcells 185977591 1418.9  269998148 2060.0      32768 186039794 1419.4
> 
> # ---------------------------------------------------------------
> # read in p-values
> # ---------------------------------------------------------------
> 
> pvals = fread(sprintf("results/pval_%s.txt", config))
> dim(pvals)
[1] 8000   13
> pvals[1:2,]
   geneType KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD PS_zinb_Was
1:       EE       0.672       0.685      0.643       0.62       0.726
2:       EE       0.362       0.372      0.368       0.62       0.346
   PS_zinb_JSD PS_kde_Was PS_kde_JSD deseq2_pval mast_pval_glm mast_pval_glmer
1:       0.729      0.696      0.617   0.7805274  2.079025e-01       0.8845935
2:       0.380      0.358      0.671   0.2399571  4.324596e-20       0.4360403
   ranksum_pval
1: 7.693073e-01
2: 9.929366e-19
> 
> table(pvals$geneType)

    EE meanDE  varDE 
  6000   1000   1000 
> 
> fnm_rank_sum = sprintf("results/pval_ranksum_%s.txt", config)
> 
> if(file.exists(fnm_rank_sum)){
+   pvals_rank_sum = fread(sprintf("results/pval_ranksum_%s.txt", config))
+   dim(pvals_rank_sum)
+   pvals_rank_sum[1:2,]
+ 
+   stopifnot(max(abs(pvals$PS_zinb_Was - 
+                     pvals_rank_sum$PS_zinb_Was), na.rm=TRUE) < 1e-10)
+   pvals = pvals_rank_sum
+ }
> 
> # ---------------------------------------------------------------
> # read in scDD p-values
> # ---------------------------------------------------------------
> 
> fnm_scDD = sprintf("results/res_scDD_%s.txt", config)
> 
> if(file.exists(fnm_scDD)){
+   pvals_scDD = fread(fnm_scDD)
+   dim(pvals_scDD)
+   pvals_scDD[1:2,]
+   
+   pvals$scDD = pvals_scDD$combined.pvalue
+   pvals$scDD_category = pvals_scDD$DDcategory
+   
+   t1 = table(pvals$geneType, pvals$scDD_category)
+   t1
+   
+   scDD_cat = melt(t1, varnames = c("gene_type", "scDD_category"))
+   
+   g1 = ggplot(scDD_cat %>% group_by(gene_type) %>% 
+                 mutate(rel_freq = round(value/sum(value),2)), 
+               aes(x = gene_type, y = rel_freq, 
+                   fill = scDD_category, cumulative = TRUE)) +
+     geom_col() +
+     geom_text(aes(label = paste0(rel_freq*100,"%")), 
+               position = position_stack(vjust = 0.5))
+   
+   pdf(sprintf("figures/scDD_cat_%s.pdf", config), width=4, height=4)
+   print(g1)
+   dev.off()
+ }
> 
> # ---------------------------------------------------------------
> # read in ZINB-WaVE p-values
> # ---------------------------------------------------------------
> 
> fnm_zinb_wave = sprintf("results/res_ZINB-WaVE_%s.txt", config)
> 
> if(file.exists(fnm_zinb_wave)){
+   pvals_zw = fread(fnm_zinb_wave)
+   dim(pvals_zw)
+   pvals_zw[1:2,]
+   
+   pvals$ZINB_WaVE = pvals_zw$pvalue
+ }
> 
> # ---------------------------------------------------------------
> # find a few examples to illustrate
> # ---------------------------------------------------------------
> 
> w2use = which(pvals$geneType == "varDE" & pvals$deseq2_pval > 0.1 & 
+                 pvals$PS_zinb_Was <= 0.001)
> length(w2use)
[1] 28
> w2use
 [1]  381  473  696 2197 2303 2579 3038 3422 3778 3853 4273 4893 4988 5203 5298
[16] 5416 5777 5970 6050 6194 6433 6566 6645 6715 6750 7020 7224 7791
> pvals[w2use,]
    geneType KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD PS_zinb_Was
 1:    varDE       0.011       0.005      0.008      0.005       0.001
 2:    varDE       0.003       0.001      0.001      0.705       0.001
 3:    varDE       0.001       0.001      0.002      0.602       0.001
 4:    varDE       0.002       0.001      0.002      0.039       0.001
 5:    varDE       0.001       0.001      0.001      0.019       0.001
 6:    varDE       0.001       0.001      0.002      0.114       0.001
 7:    varDE       0.001       0.002      0.001      0.001       0.001
 8:    varDE       0.001       0.001      0.001      0.001       0.001
 9:    varDE       0.001       0.002      0.002      0.444       0.001
10:    varDE       0.001       0.001      0.001      0.055       0.001
11:    varDE       0.010       0.002      0.004      0.784       0.001
12:    varDE       0.006       0.007      0.001      0.001       0.001
13:    varDE       0.001       0.002      0.003      0.718       0.001
14:    varDE       0.001       0.001      0.001      0.004       0.001
15:    varDE       0.001       0.001      0.003      0.041       0.001
16:    varDE       0.002       0.001      0.001      0.003       0.001
17:    varDE       0.002       0.001      0.001      0.001       0.001
18:    varDE       0.002       0.001      0.001      0.050       0.001
19:    varDE       0.001       0.001      0.002      0.183       0.001
20:    varDE       0.002       0.001      0.005      0.123       0.001
21:    varDE       0.001       0.001      0.001      0.002       0.001
22:    varDE       0.004       0.001      0.001      0.003       0.001
23:    varDE       0.001       0.001      0.001      0.003       0.001
24:    varDE       0.004       0.002      0.002      0.004       0.001
25:    varDE       0.001       0.001      0.001      0.010       0.001
26:    varDE       0.001       0.001      0.001      0.225       0.001
27:    varDE       0.001       0.002      0.005      0.621       0.001
28:    varDE       0.001       0.001      0.003      0.246       0.001
    geneType KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD PS_zinb_Was
    PS_zinb_JSD PS_kde_Was PS_kde_JSD deseq2_pval mast_pval_glm mast_pval_glmer
 1:       0.001      0.001      0.004   0.3747417  1.643627e-38    7.497941e-05
 2:       0.001      0.001      0.677   0.4362412  3.326175e-37    6.029091e-07
 3:       0.001      0.005      0.576   0.8465937  1.138585e-36    2.892694e-04
 4:       0.001      0.001      0.036   0.1756663  2.991527e-61    1.181749e-03
 5:       0.001      0.001      0.019   0.7385280  1.064434e-43    2.085297e-06
 6:       0.001      0.001      0.095   0.8299262  2.450508e-41    4.770153e-06
 7:       0.001      0.001      0.001   0.4714602  1.264444e-44    3.461660e-08
 8:       0.001      0.001      0.001   0.8168744  1.847177e-47    1.384762e-06
 9:       0.001      0.001      0.684   0.4537816  7.014697e-60    4.200812e-07
10:       0.001      0.001      0.045   0.6216409  1.873377e-41    4.943805e-06
11:       0.001      0.002      0.904   0.5696403  1.312860e-39    9.017677e-06
12:       0.001      0.002      0.002   0.4280287  6.225789e-49    8.266859e-07
13:       0.001      0.002      0.726   0.2594887  4.349971e-34    2.648560e-04
14:       0.001      0.001      0.005   0.8597480  5.880606e-35    1.233863e-05
15:       0.001      0.007      0.020   0.2891284  7.922820e-52    5.895611e-05
16:       0.001      0.001      0.001   0.9231756  4.282016e-34    2.085138e-05
17:       0.001      0.001      0.001   0.1826503  1.562398e-47    3.751919e-05
18:       0.001      0.002      0.029   0.8691498  1.651026e-40    6.620657e-06
19:       0.001      0.002      0.167   0.2416395  1.193987e-52    1.682690e-05
20:       0.001      0.001      0.142   0.3847617  1.995680e-51    3.300660e-06
21:       0.001      0.001      0.001   0.3020168  1.954132e-47    7.798591e-02
22:       0.001      0.001      0.001   0.1325277  1.042427e-46    2.307181e-05
23:       0.001      0.001      0.001   0.1061363  6.736054e-50    2.719886e-03
24:       0.001      0.001      0.002   0.1228982  8.153028e-60    4.895716e-06
25:       0.001      0.001      0.018   0.5510144  2.406348e-50    2.346991e-07
26:       0.001      0.001      0.232   0.2706318  1.000896e-50    4.396163e-08
27:       0.001      0.002      0.817   0.2591705  5.478619e-36    8.094077e-05
28:       0.001      0.001      0.190   0.6553947  2.045753e-52    8.834204e-07
    PS_zinb_JSD PS_kde_Was PS_kde_JSD deseq2_pval mast_pval_glm mast_pval_glmer
    ranksum_pval
 1: 4.018844e-13
 2: 2.057177e-08
 3: 7.767983e-11
 4: 4.520837e-36
 5: 6.738424e-07
 6: 5.449468e-07
 7: 6.078378e-13
 8: 3.989417e-22
 9: 2.972949e-20
10: 4.781655e-14
11: 2.230144e-10
12: 1.721828e-15
13: 1.237657e-04
14: 8.170338e-09
15: 4.088220e-29
16: 7.321733e-04
17: 1.733388e-24
18: 8.891925e-06
19: 4.429108e-22
20: 8.785557e-08
21: 5.693931e-15
22: 1.379129e-21
23: 1.780429e-14
24: 6.264426e-48
25: 3.688888e-11
26: 2.774340e-18
27: 1.942824e-07
28: 9.700014e-06
    ranksum_pval
> 
> if(length(w2use) >= 2){
+   row_id = w2use[2]
+   row_id
+   
+   # ------------------------------------------------------------------------
+   # extract gene expression in cells and bulk samples
+   # ------------------------------------------------------------------------
+   
+   ct_cell = count_matrix[row_id,]
+   length(ct_cell)
+   print(table(ct_cell))
+   meta_ind$diagnosis = as.factor(meta_ind$phenotype)
+   
+   ct_ind = tapply(ct_cell, as.character(meta_cell$individual), sum)
+   mat1 = match(meta_ind$individual, names(ct_ind))
+   table(names(ct_ind)[mat1] == meta_ind$individual)
+   meta_ind[["gene1"]] = as.numeric(ct_ind)[mat1]
+   
+   nb2 = glm.nb(gene1 ~ RIN + diagnosis, data=meta_ind)
+   print(summary(nb2))
+   
+   # ------------------------------------------------------------------------
+   # boxplot of bulk gene expression vs. diagnosis
+   # ------------------------------------------------------------------------
+   
+   p1 = ggplot(meta_ind, aes(x=diagnosis, y=log10(gene1+0.5), col=diagnosis)) + 
+     geom_boxplot() + labs(y="log10(ind. level counts)")
+   p1 = p1 + geom_jitter(shape=16, position=position_jitter(0.2))
+   
+   # ------------------------------------------------------------------------
+   # density plot of cell level gene expression vs. diagnosis
+   # ------------------------------------------------------------------------
+   
+   mat2 = match(meta_cell$individual, meta_ind$individual)
+   meta_cell$diagnosis = as.factor(meta_ind$diagnosis[mat2])
+   
+   df_test = meta_cell
+   df_test$count = ct_cell
+   mat2 = match(meta_cell$individual, meta_ind$individual)
+   df_test$diagnosis = as.factor(df_test$diagnosis)
+   
+   table(df_test$count)
+   tb0 = table(df_test$count[which(df_test$phenotype==0)])
+   tb1 = table(df_test$count[which(df_test$phenotype==1)])
+   
+   tb0
+   tb1
+   
+   df_test$count[which(df_test$count >= 7)] = 7
+   
+   p3 = ggplot(df_test, aes(x=count, col=diagnosis, line_type=individual)) + 
+     geom_freqpoly(binwidth=1, closed="left") + guides(color = FALSE) + 
+     xlim(0, 7) + ylab("frequency")
+   
+   gg0 = ggarrange(p1, p3, ncol=2, nrow=1, widths = c(1.5, 2))
+   
+   pdf(sprintf("figures/ex1_%s.pdf", config), width=6.5, height=2.5)
+   print(gg0)
+   dev.off()
+ }
ct_cell
    0     1     2     3     4     5     6     7    10 
16750  3700   875   200    50    15     6     3     1 

Call:
glm.nb(formula = gene1 ~ RIN + diagnosis, data = meta_ind, init.theta = 228.9644717, 
    link = log)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.5362  -0.4030  -0.1618   0.6366   1.8043  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)  5.78908    0.02855 202.803   <2e-16 ***
RIN          0.02827    0.02558   1.105    0.269    
diagnosis1  -0.04273    0.04162  -1.027    0.305    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for Negative Binomial(228.9645) family taken to be 1)

    Null deviance: 21.692  on 19  degrees of freedom
Residual deviance: 20.053  on 17  degrees of freedom
AIC: 197.54

Number of Fisher Scoring iterations: 1


              Theta:  229 
          Std. Err.:  125 

 2 x log-likelihood:  -189.536 
null device 
          1 
Warning message:
Removed 40 row(s) containing missing values (geom_path). 
> 
> # ------------------------------------------------------------------------
> # extract gene expression in cells and bulk samples
> # ------------------------------------------------------------------------
> 
> cal.power <- function(x, geneType){
+   tapply(x, geneType, function(x){sum(x < 0.05, na.rm=TRUE)/sum(!is.na(x))})
+ }
> 
> ms = c("PS_zinb_Was", "PS_kde_Was", "deseq2_pval", "mast_pval_glm", 
+        "mast_pval_glmer", "ranksum_pval", "scDD", "ZINB_WaVE")
> ms = ms[which(ms %in% names(pvals))]
> powers = apply(pvals[,..ms], 2, cal.power, geneType=pvals$geneType)
> 
> print(config)
[1] "ncase_10_nctrl_10_ncell_1080_fold_mean_1.2_var_1.5"
> print(powers)
       PS_zinb_Was PS_kde_Was deseq2_pval mast_pval_glm mast_pval_glmer
EE      0.04749164      0.049  0.06733333     0.7388333          0.0655
meanDE  0.30923695      0.344  0.39400000     0.9250000          0.3500
varDE   0.24424424      0.307  0.06900000     1.0000000          0.8170
       ranksum_pval
EE        0.7301667
meanDE    0.9100000
varDE     0.8700000
> 
> gg = melt(powers)
> 
> names(gg) = c("geneType", "method", "power")
> gg$method = gsub("deseq2_pval", "DEseq2", gg$method)
> gg$method = gsub("PS_zinb_Was", "IDEAS_ZINB",  gg$method)
> gg$method = gsub("PS_kde_Was",  "IDEAS_KDE", gg$method)
> gg$method = gsub("mast_pval_glmer", "MAST_glmer", gg$method)
> gg$method = gsub("mast_pval_glm", "MAST", gg$method)
> gg$method = gsub("ranksum_pval", "Rank-sum", gg$method)
> table(gg$method)

    DEseq2  IDEAS_KDE IDEAS_ZINB       MAST MAST_glmer   Rank-sum 
         3          3          3          3          3          3 
> 
> lvs = c("Rank-sum", "MAST", "scDD", "ZINB_WaVE",  
+         "MAST_glmer", "DEseq2", "IDEAS_ZINB", "IDEAS_KDE")
> lvs = lvs[which(lvs %in% unique(gg$method))]
> 
> gg$method = factor(gg$method, levels = lvs)
> 
> g1 = ggplot(subset(gg, geneType %in% c("EE")), 
+             aes(x=geneType, y=power, fill=method)) +
+   geom_bar(stat="identity", position=position_dodge()) + 
+   scale_fill_brewer(palette="Paired") + 
+   geom_hline(yintercept=0.05, col="red") + 
+   ylab("type I error")
> 
> g2 = ggplot(subset(gg, geneType %in% c("meanDE", "varDE")), 
+             aes(x=geneType, y=power, fill=method)) +
+   geom_bar(stat="identity", position=position_dodge()) + 
+   scale_fill_brewer(palette="Paired") + 
+   geom_hline(yintercept=0.05, col="red")
> 
> gg1 = ggarrange(g1, g2, ncol = 2, nrow = 1, widths=c(1.25,2), 
+                 common.legend = TRUE, legend = "top")
> 
> pdf(sprintf("figures/power_%s.pdf", config), width=5.2, height=2.5)
> print(gg1)
> dev.off()
pdf 
  2 
> 
> sessionInfo()
R version 4.0.3 (2020-10-10)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] reshape2_1.4.4              ideas_0.0.9000             
 [3] ggpubr_0.4.0                ggplot2_3.3.3              
 [5] pryr_0.1.4                  data.table_1.13.6          
 [7] stringr_1.4.0               transport_0.12-2           
 [9] reticulate_1.18             MiRKAT_1.1.4               
[11] doRNG_1.8.2                 rngtools_1.5               
[13] doParallel_1.0.16           iterators_1.0.13           
[15] foreach_1.5.1               DESeq2_1.30.0              
[17] lme4_1.1-26                 Matrix_1.3-0               
[19] MAST_1.16.0                 SingleCellExperiment_1.12.0
[21] SummarizedExperiment_1.20.0 Biobase_2.50.0             
[23] GenomicRanges_1.42.0        GenomeInfoDb_1.26.2        
[25] IRanges_2.24.1              S4Vectors_0.28.1           
[27] BiocGenerics_0.36.0         MatrixGenerics_1.2.0       
[29] matrixStats_0.57.0          moments_0.14               
[31] emdbook_1.3.12              MASS_7.3-53                

loaded via a namespace (and not attached):
  [1] minqa_1.2.4            colorspace_2.0-0       ggsignif_0.6.0        
  [4] rio_0.5.16             ellipsis_0.3.1         XVector_0.30.0        
  [7] farver_2.0.3           MatrixModels_0.4-1     bit64_4.0.5           
 [10] AnnotationDbi_1.52.0   mvtnorm_1.1-1          codetools_0.2-18      
 [13] splines_4.0.3          pscl_1.5.5             geneplotter_1.68.0    
 [16] jsonlite_1.7.2         nloptr_1.2.2.2         broom_0.7.3           
 [19] annotate_1.68.0        cluster_2.1.0          kernlab_0.9-29        
 [22] compiler_4.0.3         httr_1.4.2             backports_1.2.1       
 [25] quantreg_5.75          tools_4.0.3            coda_0.19-4           
 [28] gtable_0.3.0           glue_1.4.2             GenomeInfoDbData_1.2.4
 [31] dplyr_1.0.2            Rcpp_1.0.5             carData_3.0-4         
 [34] bbmle_1.0.23.1         cellranger_1.1.0       vctrs_0.3.6           
 [37] ape_5.4-1              nlme_3.1-151           conquer_1.0.2         
 [40] openxlsx_4.2.3         CompQuadForm_1.4.3     lifecycle_0.2.0       
 [43] GUniFrac_1.1           rstatix_0.6.0          statmod_1.4.35        
 [46] XML_3.99-0.5           PearsonDS_1.1          zlibbioc_1.36.0       
 [49] scales_1.1.1           hms_0.5.3              SparseM_1.78          
 [52] RColorBrewer_1.1-2     curl_4.3               gridExtra_2.3         
 [55] memoise_1.1.0          bdsmatrix_1.3-4        segmented_1.3-3       
 [58] stringi_1.5.3          RSQLite_2.2.1          genefilter_1.72.0     
 [61] permute_0.9-5          zip_2.1.1              boot_1.3-25           
 [64] BiocParallel_1.24.1    rlang_0.4.10           pkgconfig_2.0.3       
 [67] bitops_1.0-6           lattice_0.20-41        purrr_0.3.4           
 [70] labeling_0.4.2         cowplot_1.1.1          bit_4.0.4             
 [73] tidyselect_1.1.0       plyr_1.8.6             magrittr_2.0.1        
 [76] R6_2.5.0               generics_0.1.0         DelayedArray_0.16.0   
 [79] DBI_1.1.0              haven_2.3.1            foreign_0.8-81        
 [82] withr_2.3.0            pillar_1.4.7           mgcv_1.8-33           
 [85] mixtools_1.2.0         survival_3.2-7         abind_1.4-5           
 [88] RCurl_1.98-1.2         tibble_3.0.4           car_3.0-10            
 [91] crayon_1.3.4           readxl_1.3.1           locfit_1.5-9.4        
 [94] grid_4.0.3             blob_1.2.1             vegan_2.5-7           
 [97] forcats_0.5.0          digest_0.6.27          xtable_1.8-4          
[100] tidyr_1.1.2            numDeriv_2016.8-1.1    munsell_0.5.0         
> 
> mem_used()
1.94 GB
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   8050176  430.0   13973607  746.3         NA  13173644  703.6
Vcells 186686152 1424.4  269998148 2060.0      32768 193866283 1479.1
> 
> q(save = "no")
> proc.time()
   user  system elapsed 
 29.508   2.029  32.234 
