
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> # illustrate a few examples
> 
> args = commandArgs(trailingOnly=TRUE)
> args
[1] "ncase=20"   "nctrl=20"   "ncell=360"  "r_mean=1.2" "r_var=1.5" 
> 
> if (length(args) < 5) {
+   message("no enough arguments, using default values")
+   r_mean   = 1.2     # The expected fold-changes in mean
+   r_var    = 1.5     # The expected fold-changes in variances
+   ncase    = 5       # case individuals
+   nctrl    = 5       # control individuals
+   ncell    = 360     # numbers of cells collected from each individuals.
+ } else{
+   for(i in 1:length(args)){
+     eval(parse(text=args[[i]]))
+   }
+ }
> 
> if(ncell == 0){
+   UNEQ_N_CELL = TRUE
+ }else{
+   UNEQ_N_CELL = FALSE
+ }
> 
> if(UNEQ_N_CELL){
+   config = sprintf("ncase_%d_nctrl_%d_unequal_n_cell", ncase, nctrl)
+ }else{
+   config = sprintf("ncase_%d_nctrl_%d_ncell_%d", ncase, nctrl, ncell)
+ }
> 
> config = sprintf("%s_fold_mean_%.1f_var_%.1f", config, r_mean, r_var)
> config
[1] "ncase_20_nctrl_20_ncell_360_fold_mean_1.2_var_1.5"
> 
> # ---------------------------------------------------------------
> # initial setup
> # ---------------------------------------------------------------
> 
> library(MASS)
> library(emdbook)
> library(moments)
> library(MAST)
Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: MatrixGenerics
Loading required package: matrixStats

Attaching package: ‘MatrixGenerics’

The following objects are masked from ‘package:matrixStats’:

    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,
    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,
    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,
    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,
    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,
    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,
    colWeightedMeans, colWeightedMedians, colWeightedSds,
    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,
    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,
    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,
    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,
    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,
    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,
    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,
    rowWeightedSds, rowWeightedVars

Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘Biobase’

The following object is masked from ‘package:MatrixGenerics’:

    rowMedians

The following objects are masked from ‘package:matrixStats’:

    anyMissing, rowMedians

> library(lme4)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:S4Vectors’:

    expand

> library(DESeq2)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> library(foreach)
> library(doRNG)
Loading required package: rngtools
> library(MiRKAT)
> library(reticulate)
> library(transport)
> library(stringr)
> 
> library(data.table)

Attaching package: ‘data.table’

The following object is masked from ‘package:SummarizedExperiment’:

    shift

The following object is masked from ‘package:GenomicRanges’:

    shift

The following object is masked from ‘package:IRanges’:

    shift

The following objects are masked from ‘package:S4Vectors’:

    first, second

> library(pryr)
Registered S3 method overwritten by 'pryr':
  method      from
  print.bytes Rcpp

Attaching package: ‘pryr’

The following object is masked from ‘package:data.table’:

    address

> library(ggplot2)
> library(ggpubr)
Registered S3 methods overwritten by 'car':
  method                          from
  influence.merMod                lme4
  cooks.distance.influence.merMod lme4
  dfbeta.influence.merMod         lme4
  dfbetas.influence.merMod        lme4
> theme_set(theme_classic())
> 
> library(ideas)
> library(reshape2)

Attaching package: ‘reshape2’

The following objects are masked from ‘package:data.table’:

    dcast, melt

> 
> # ---------------------------------------------------------------
> # load data
> # ---------------------------------------------------------------
> 
> sim_data     = readRDS(sprintf("data/sim_data_%s.rds", config))
> count_matrix = sim_data$count_matrix
> meta_cell    = sim_data$meta_cell
> meta_ind     = sim_data$meta_ind
> gene_index   = sim_data$gene_index
> 
> ls()
 [1] "args"         "config"       "count_matrix" "gene_index"   "i"           
 [6] "meta_cell"    "meta_ind"     "ncase"        "ncell"        "nctrl"       
[11] "r_mean"       "r_var"        "sim_data"     "UNEQ_N_CELL" 
> EE_index   = gene_index$EE_index
> mean_index = gene_index$mean_index
> var_index  = gene_index$var_index
> 
> dim(count_matrix)
[1]  8000 14400
> count_matrix[1:3,1:6]
      cell1 cell2 cell3 cell4 cell5 cell6
gene1     1     1     0     1     0     0
gene2     0     1     0     0     2     0
gene3     0     0     0     2     0     1
> 
> dim(meta_cell)
[1] 14400     5
> meta_cell[1:2,]
      cell_id individual phenotype cell_rd      CDR
cell1   cell1       ind1         1    9451 0.442875
cell2   cell2       ind1         1    9471 0.443500
> 
> dim(meta_ind)
[1] 40  3
> meta_ind[1:2,]
     individual phenotype        RIN
ind1       ind1         1 -0.7018300
ind2       ind2         1  0.3460781
> 
> rm(sim_data)
> gc()
            used  (Mb) gc trigger   (Mb) limit (Mb)  max used  (Mb)
Ncells   7789188 416.0   13973607  746.3         NA   9710537 518.6
Vcells 128298491 978.9  187054148 1427.2      32768 128360694 979.4
> 
> # ---------------------------------------------------------------
> # find a few examples to illustrate
> # ---------------------------------------------------------------
> 
> pvals = fread(sprintf("results/pval_%s.txt", config))
> dim(pvals)
[1] 8000   12
> pvals[1:2,]
   geneType KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD PS_zinb_Was
1:       EE       0.987       0.739      0.898      0.543       0.968
2:       EE       0.427       0.215      0.544      0.637       0.418
   PS_zinb_JSD PS_kde_Was PS_kde_JSD deseq2_pval mast_pval_glm mast_pval_glmer
1:       0.725      0.892      0.537   0.9386693    0.66139741       0.9605528
2:       0.186      0.517      0.626   0.3054993    0.01296843       0.4805465
> 
> table(pvals$geneType)

    EE meanDE  varDE 
  6000   1000   1000 
> 
> pvals_rank_sum = fread(sprintf("results/pval_ranksum_%s.txt", config))
> dim(pvals_rank_sum)
[1] 8000   13
> pvals_rank_sum[1:2,]
   geneType KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD PS_zinb_Was
1:       EE       0.987       0.739      0.898      0.543       0.968
2:       EE       0.427       0.215      0.544      0.637       0.418
   PS_zinb_JSD PS_kde_Was PS_kde_JSD deseq2_pval mast_pval_glm mast_pval_glmer
1:       0.725      0.892      0.537   0.9386693    0.66139741       0.9605528
2:       0.186      0.517      0.626   0.3054993    0.01296843       0.4805465
   ranksum_pval
1:   0.37781487
2:   0.01750649
> 
> stopifnot(max(abs(pvals$PS_zinb_Was - 
+                     pvals_rank_sum$PS_zinb_Was), na.rm=TRUE) < 1e-10)
> pvals = pvals_rank_sum
> 
> w2use = which(pvals$geneType == "varDE" & pvals$deseq2_pval > 0.1 & 
+                 pvals$PS_zinb_Was <= 0.001)
> length(w2use)
[1] 23
> w2use
 [1]  910 1804 1988 2033 2485 3020 3038 3381 3584 4893 5299 5416 6194 6419 6433
[16] 6624 6750 6771 7020 7136 7397 7534 7660
> pvals[w2use,]
    geneType KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD PS_zinb_Was
 1:    varDE       0.001       0.001      0.004      0.434       0.001
 2:    varDE       0.001       0.001      0.001      0.001       0.001
 3:    varDE       0.003       0.002      0.001      0.009       0.001
 4:    varDE       0.001       0.001      0.001      0.017       0.001
 5:    varDE       0.001       0.001      0.001      0.001       0.001
 6:    varDE       0.001       0.001      0.001      0.048       0.001
 7:    varDE       0.001       0.001      0.001      0.223       0.001
 8:    varDE       0.001       0.001      0.001      0.165       0.001
 9:    varDE       0.002       0.002      0.001      0.044       0.001
10:    varDE       0.001       0.001      0.001      0.115       0.001
11:    varDE       0.001       0.001      0.001      0.048       0.001
12:    varDE       0.003       0.001      0.002      0.001       0.001
13:    varDE       0.002       0.001      0.001      0.188       0.001
14:    varDE       0.001       0.001      0.001      0.023       0.001
15:    varDE       0.003       0.001      0.001      0.001       0.001
16:    varDE       0.001       0.001      0.001      0.001       0.001
17:    varDE       0.001       0.001      0.001      0.056       0.001
18:    varDE       0.001       0.001      0.001      0.674       0.001
19:    varDE       0.003       0.001      0.001      0.011       0.001
20:    varDE       0.002       0.001      0.001      0.001       0.001
21:    varDE       0.001       0.001      0.001      0.915       0.001
22:    varDE       0.001       0.001      0.001      0.008       0.001
23:    varDE       0.001       0.001      0.001      0.001       0.001
    geneType KR_zinb_Was KR_zinb_JSD KR_kde_Was KR_kde_JSD PS_zinb_Was
    PS_zinb_JSD PS_kde_Was PS_kde_JSD deseq2_pval mast_pval_glm mast_pval_glmer
 1:       0.001      0.010      0.440   0.9236640  8.166869e-29    3.926407e-05
 2:       0.001      0.001      0.002   0.6833109  1.584230e-44    2.665763e-11
 3:       0.001      0.001      0.007   0.5599360  1.570261e-34    4.158096e-06
 4:       0.001      0.001      0.021   0.3464447  3.847837e-37    4.519544e-06
 5:       0.001      0.001      0.001   0.4555330  1.232120e-32    1.755093e-08
 6:       0.001      0.001      0.037   0.5969661  4.498477e-20    7.487355e-04
 7:       0.001      0.001      0.243   0.2769618  2.036185e-28    7.096389e-03
 8:       0.001      0.001      0.173   0.4975120  5.195407e-49    1.081580e-07
 9:       0.002      0.001      0.036   0.1387691  1.475804e-32    8.761782e-02
10:       0.001      0.001      0.097   0.5529978  7.440705e-35    4.733690e-05
11:       0.001      0.001      0.047   0.7794623  2.182670e-34    1.000000e+00
12:       0.001      0.001      0.001   0.1078352  7.539473e-20    6.055587e-02
13:       0.001      0.001      0.135   0.7059056  2.318598e-32    8.697883e-06
14:       0.001      0.001      0.027   0.9980226  1.480797e-39    4.752195e-06
15:       0.001      0.001      0.001   0.1862572  3.653422e-28    4.009155e-01
16:       0.001      0.001      0.001   0.6994328  6.157149e-27    2.186881e-01
17:       0.001      0.001      0.039   0.5299195  3.014393e-41    4.343395e-06
18:       0.001      0.001      0.728   0.1215601  7.974945e-34    7.234879e-03
19:       0.001      0.001      0.011   0.6988019  3.431898e-35    2.960977e-05
20:       0.001      0.001      0.001   0.8025900  1.021046e-34    7.786939e-03
21:       0.001      0.001      0.922   0.4269857  1.904547e-23    1.522484e-03
22:       0.001      0.001      0.012   0.4506527  7.767929e-29    1.034883e-01
23:       0.001      0.001      0.001   0.4500505  2.482403e-43    2.595791e-03
    PS_zinb_JSD PS_kde_Was PS_kde_JSD deseq2_pval mast_pval_glm mast_pval_glmer
    ranksum_pval
 1: 3.819132e-07
 2: 1.998661e-09
 3: 1.247873e-09
 4: 2.651181e-14
 5: 1.092089e-11
 6: 3.745463e-06
 7: 1.087275e-12
 8: 4.258341e-14
 9: 3.873199e-15
10: 7.007720e-10
11: 8.054578e-06
12: 3.786141e-01
13: 1.876474e-06
14: 5.399304e-08
15: 5.994959e-11
16: 3.219053e-08
17: 4.723739e-08
18: 1.349922e-15
19: 3.528960e-06
20: 8.350340e-08
21: 1.540908e-08
22: 2.743668e-13
23: 2.446482e-08
    ranksum_pval
> 
> if(length(w2use) >= 2){
+   row_id = w2use[2]
+   row_id
+   
+   # ------------------------------------------------------------------------
+   # extract gene expression in cells and bulk samples
+   # ------------------------------------------------------------------------
+   
+   ct_cell = count_matrix[row_id,]
+   length(ct_cell)
+   print(table(ct_cell))
+   meta_ind$diagnosis = as.factor(meta_ind$phenotype)
+   
+   ct_ind = tapply(ct_cell, as.character(meta_cell$individual), sum)
+   mat1 = match(meta_ind$individual, names(ct_ind))
+   table(names(ct_ind)[mat1] == meta_ind$individual)
+   meta_ind[["gene1"]] = as.numeric(ct_ind)[mat1]
+   
+   nb2 = glm.nb(gene1 ~ RIN + diagnosis, data=meta_ind)
+   print(summary(nb2))
+   
+   # ------------------------------------------------------------------------
+   # boxplot of bulk gene expression vs. diagnosis
+   # ------------------------------------------------------------------------
+   
+   p1 = ggplot(meta_ind, aes(x=diagnosis, y=log10(gene1+0.5), col=diagnosis)) + 
+     geom_boxplot() + labs(y="log10(ind. level counts)")
+   p1 = p1 + geom_jitter(shape=16, position=position_jitter(0.2))
+   
+   # ------------------------------------------------------------------------
+   # density plot of cell level gene expression vs. diagnosis
+   # ------------------------------------------------------------------------
+   
+   mat2 = match(meta_cell$individual, meta_ind$individual)
+   meta_cell$diagnosis = as.factor(meta_ind$diagnosis[mat2])
+   
+   df_test = meta_cell
+   df_test$count = ct_cell
+   mat2 = match(meta_cell$individual, meta_ind$individual)
+   df_test$diagnosis = as.factor(df_test$diagnosis)
+   
+   table(df_test$count)
+   tb0 = table(df_test$count[which(df_test$phenotype==0)])
+   tb1 = table(df_test$count[which(df_test$phenotype==1)])
+   
+   tb0
+   tb1
+   
+   df_test$count[which(df_test$count >= 7)] = 7
+   
+   p3 = ggplot(df_test, aes(x=count, col=diagnosis, line_type=individual)) + 
+     geom_freqpoly(binwidth=1, closed="left") + guides(color = FALSE) + 
+     xlim(0, 7) + ylab("frequency")
+   
+   gg0 = ggarrange(p1, p3, ncol=2, nrow=1, widths = c(1.5, 2))
+   
+   pdf(sprintf("figures/ex1_%s.pdf", config), width=6.5, height=2.5)
+   print(gg0)
+   dev.off()
+ }
ct_cell
   0    1    2    3    4    5    6    7    8    9   10   12 
6142 4399 2302  915  386  167   53   24    5    5    1    1 

Call:
glm.nb(formula = gene1 ~ RIN + diagnosis, data = meta_ind, init.theta = 135.8582623, 
    link = log)

Deviance Residuals: 
     Min        1Q    Median        3Q       Max  
-2.09442  -0.77070  -0.03177   0.54692   1.95832  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)  5.90119    0.02254 261.794   <2e-16 ***
RIN          0.04059    0.01851   2.193   0.0283 *  
diagnosis1   0.01448    0.03206   0.452   0.6515    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for Negative Binomial(135.8583) family taken to be 1)

    Null deviance: 44.892  on 39  degrees of freedom
Residual deviance: 40.096  on 37  degrees of freedom
AIC: 410.07

Number of Fisher Scoring iterations: 1


              Theta:  135.9 
          Std. Err.:  41.7 

 2 x log-likelihood:  -402.069 
null device 
          1 
Warning message:
Removed 80 row(s) containing missing values (geom_path). 
> 
> # ------------------------------------------------------------------------
> # extract gene expression in cells and bulk samples
> # ------------------------------------------------------------------------
> 
> cal.power <- function(x, geneType){
+   tapply(x, geneType, function(x){sum(x < 0.05, na.rm=TRUE)/sum(!is.na(x))})
+ }
> 
> ms = c("PS_zinb_Was", "PS_kde_Was", "deseq2_pval", "mast_pval_glm", 
+        "mast_pval_glmer", "ranksum_pval")
> powers = apply(pvals[,..ms], 2, cal.power, geneType=pvals$geneType)
> 
> print(config)
[1] "ncase_20_nctrl_20_ncell_360_fold_mean_1.2_var_1.5"
> print(powers)
       PS_zinb_Was PS_kde_Was deseq2_pval mast_pval_glm mast_pval_glmer
EE      0.05274651      0.051  0.05983333         0.676      0.03933989
meanDE  0.42540323      0.497  0.57600000         0.944      0.36000000
varDE   0.35620585      0.500  0.05600000         1.000      0.83300000
       ranksum_pval
EE        0.5663333
meanDE    0.9260000
varDE     0.8780000
> 
> gg = melt(powers)
> 
> names(gg) = c("geneType", "method", "power")
> gg$method = gsub("deseq2_pval", "DEseq2", gg$method)
> gg$method = gsub("PS_zinb_Was", "IDEAS_NB",  gg$method)
> gg$method = gsub("PS_kde_Was",  "IDEAS_KDE", gg$method)
> gg$method = gsub("mast_pval_glmer", "MAST_glmer", gg$method)
> gg$method = gsub("mast_pval_glm", "MAST", gg$method)
> gg$method = gsub("ranksum_pval", "Rank-sum", gg$method)
> table(gg$method)

    DEseq2  IDEAS_KDE   IDEAS_NB       MAST MAST_glmer   Rank-sum 
         3          3          3          3          3          3 
> gg$method = factor(gg$method, levels = c("Rank-sum", "MAST", "MAST_glmer", 
+                                          "DEseq2", "IDEAS_NB", "IDEAS_KDE"))
> 
> g1 = ggplot(subset(gg, geneType %in% c("EE")), 
+             aes(x=geneType, y=power, fill=method)) +
+   geom_bar(stat="identity", position=position_dodge()) + 
+   scale_fill_brewer(palette="Paired") + 
+   geom_hline(yintercept=0.05, col="red") + 
+   ylab("type I error")
> 
> g2 = ggplot(subset(gg, geneType %in% c("meanDE", "varDE")), 
+             aes(x=geneType, y=power, fill=method)) +
+   geom_bar(stat="identity", position=position_dodge()) + 
+   scale_fill_brewer(palette="Paired") + 
+   geom_hline(yintercept=0.05, col="red")
> 
> gg1 = ggarrange(g1, g2, ncol = 2, nrow = 1, widths=c(1.25,2), 
+                 common.legend = TRUE, legend = "top")
> 
> pdf(sprintf("figures/power_%s.pdf", config), width=5.2, height=2.5)
> print(gg1)
> dev.off()
pdf 
  2 
> 
> sessionInfo()
R version 4.0.3 (2020-10-10)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] reshape2_1.4.4              ideas_0.0.9000             
 [3] ggpubr_0.4.0                ggplot2_3.3.3              
 [5] pryr_0.1.4                  data.table_1.13.6          
 [7] stringr_1.4.0               transport_0.12-2           
 [9] reticulate_1.18             MiRKAT_1.1.4               
[11] doRNG_1.8.2                 rngtools_1.5               
[13] doParallel_1.0.16           iterators_1.0.13           
[15] foreach_1.5.1               DESeq2_1.30.0              
[17] lme4_1.1-26                 Matrix_1.3-0               
[19] MAST_1.16.0                 SingleCellExperiment_1.12.0
[21] SummarizedExperiment_1.20.0 Biobase_2.50.0             
[23] GenomicRanges_1.42.0        GenomeInfoDb_1.26.2        
[25] IRanges_2.24.1              S4Vectors_0.28.1           
[27] BiocGenerics_0.36.0         MatrixGenerics_1.2.0       
[29] matrixStats_0.57.0          moments_0.14               
[31] emdbook_1.3.12              MASS_7.3-53                

loaded via a namespace (and not attached):
  [1] minqa_1.2.4            colorspace_2.0-0       ggsignif_0.6.0        
  [4] rio_0.5.16             ellipsis_0.3.1         XVector_0.30.0        
  [7] farver_2.0.3           MatrixModels_0.4-1     bit64_4.0.5           
 [10] AnnotationDbi_1.52.0   mvtnorm_1.1-1          codetools_0.2-18      
 [13] splines_4.0.3          pscl_1.5.5             geneplotter_1.68.0    
 [16] jsonlite_1.7.2         nloptr_1.2.2.2         broom_0.7.3           
 [19] annotate_1.68.0        cluster_2.1.0          kernlab_0.9-29        
 [22] compiler_4.0.3         httr_1.4.2             backports_1.2.1       
 [25] quantreg_5.75          tools_4.0.3            coda_0.19-4           
 [28] gtable_0.3.0           glue_1.4.2             GenomeInfoDbData_1.2.4
 [31] dplyr_1.0.2            Rcpp_1.0.5             carData_3.0-4         
 [34] bbmle_1.0.23.1         cellranger_1.1.0       vctrs_0.3.6           
 [37] ape_5.4-1              nlme_3.1-151           conquer_1.0.2         
 [40] openxlsx_4.2.3         CompQuadForm_1.4.3     lifecycle_0.2.0       
 [43] GUniFrac_1.1           rstatix_0.6.0          statmod_1.4.35        
 [46] XML_3.99-0.5           PearsonDS_1.1          zlibbioc_1.36.0       
 [49] scales_1.1.1           hms_0.5.3              SparseM_1.78          
 [52] RColorBrewer_1.1-2     curl_4.3               gridExtra_2.3         
 [55] memoise_1.1.0          bdsmatrix_1.3-4        segmented_1.3-3       
 [58] stringi_1.5.3          RSQLite_2.2.1          genefilter_1.72.0     
 [61] permute_0.9-5          zip_2.1.1              boot_1.3-25           
 [64] BiocParallel_1.24.1    rlang_0.4.10           pkgconfig_2.0.3       
 [67] bitops_1.0-6           lattice_0.20-41        purrr_0.3.4           
 [70] labeling_0.4.2         cowplot_1.1.1          bit_4.0.4             
 [73] tidyselect_1.1.0       plyr_1.8.6             magrittr_2.0.1        
 [76] R6_2.5.0               generics_0.1.0         DelayedArray_0.16.0   
 [79] DBI_1.1.0              haven_2.3.1            foreign_0.8-81        
 [82] withr_2.3.0            pillar_1.4.7           mgcv_1.8-33           
 [85] mixtools_1.2.0         survival_3.2-7         abind_1.4-5           
 [88] RCurl_1.98-1.2         tibble_3.0.4           car_3.0-10            
 [91] crayon_1.3.4           readxl_1.3.1           locfit_1.5-9.4        
 [94] grid_4.0.3             blob_1.2.1             vegan_2.5-7           
 [97] forcats_0.5.0          digest_0.6.27          xtable_1.8-4          
[100] tidyr_1.1.2            numDeriv_2016.8-1.1    munsell_0.5.0         
> 
> mem_used()
1.48 GB
> gc()
            used  (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   8042970 429.6   13973607  746.3         NA  13580689  725.3
Vcells 128984835 984.1  187054148 1427.2      32768 135557162 1034.3
> 
> q(save = "no")
> proc.time()
   user  system elapsed 
 17.136   1.112  18.585 
