
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(Matrix)
> library(data.table)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:data.table’:

    between, first, last

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(DESeq2)
Loading required package: S4Vectors
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:dplyr’:

    combine, intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min


Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:dplyr’:

    first, rename

The following objects are masked from ‘package:data.table’:

    first, second

The following objects are masked from ‘package:Matrix’:

    expand, unname

The following objects are masked from ‘package:base’:

    expand.grid, I, unname

Loading required package: IRanges

Attaching package: ‘IRanges’

The following objects are masked from ‘package:dplyr’:

    collapse, desc, slice

The following object is masked from ‘package:data.table’:

    shift

Loading required package: GenomicRanges
Loading required package: GenomeInfoDb
Loading required package: SummarizedExperiment
Loading required package: MatrixGenerics
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following object is masked from ‘package:dplyr’:

    count


Attaching package: ‘MatrixGenerics’

The following objects are masked from ‘package:matrixStats’:

    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,
    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,
    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,
    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,
    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,
    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,
    colWeightedMeans, colWeightedMedians, colWeightedSds,
    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,
    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,
    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,
    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,
    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,
    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,
    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,
    rowWeightedSds, rowWeightedVars

Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘Biobase’

The following object is masked from ‘package:MatrixGenerics’:

    rowMedians

The following objects are masked from ‘package:matrixStats’:

    anyMissing, rowMedians

Warning messages:
1: package ‘GenomeInfoDb’ was built under R version 4.1.1 
2: package ‘MatrixGenerics’ was built under R version 4.1.1 
> 
> 
> data.dir = "../../ideas_data/COVID/PBMC_10x"
> 
> args=(commandArgs(TRUE))
> args
[1] "grp='CD8+Tcells_1'"
> 
> if (length(args) != 1) {
+   message("one argument is expected, use 'CD8+Tcells_1' as default.\n")
+   grp = "CD8+Tcells_1"
+ }else{
+   eval(parse(text=args[[1]]))
+ }
> 
> grp
[1] "CD8+Tcells_1"
> 
> 
> # ------------------------------------------------------------------------
> # read in covid donor information
> # ------------------------------------------------------------------------
> 
> covid_donor_info = 
+   read.csv(file.path(data.dir, "covid_donor_info_from_mmc1.csv"), 
+            header = TRUE)
> 
> dim(covid_donor_info)
[1] 18  4
> covid_donor_info[1:2,]
        donor age sex condition
1 C19-CB-0001  21   m      mild
2 C19-CB-0002  31   f      mild
> summary(covid_donor_info)
    donor                age            sex             condition        
 Length:18          Min.   :21.00   Length:18          Length:18         
 Class :character   1st Qu.:52.25   Class :character   Class :character  
 Mode  :character   Median :66.00   Mode  :character   Mode  :character  
                    Mean   :60.17                                        
                    3rd Qu.:71.00                                        
                    Max.   :80.00                                        
> 
> # ------------------------------------------------------------------------
> # read in cell information
> # ------------------------------------------------------------------------
> 
> cell_info = fread(file.path(data.dir, "meta.tsv"))
> dim(cell_info)
[1] 99049    40
> cell_info[1:2,]
                   cell orig.ident nCount_RNA nFeature_RNA nReads_RNA
1: 1_AAACCCAAGGCTTTCA-1    Covid19       4842         1925       4842
2: 1_AAACCCACAACTTCTT-1    Covid19       9582         3004       9582
   nReads_ALL percent.mito percent.hb       donor onset_of_symptoms
1:       5102     6.608839          0 C19-CB-0001        25.02.2020
2:      10008     4.195366          0 C19-CB-0003        29.02.2020
   days_after_onset        sampleID origID date_of_sampling DaysAfterSample0
1:               11 C19-CB-0001_d11   1_d4       06.03.2020                4
2:               13 C19-CB-0003_d13   3_d0       12.03.2020                0
   experiment PoolID sampletag         hash.ID        platform purification
1:       A3_2      1  Hashtag6 Hashtag6-TotalA scRNA-seq (10x)        Fresh
2:       A3_2      1  Hashtag8 Hashtag8-TotalA scRNA-seq (10x)        Fresh
   cells   age  sex group_per_sample who_per_sample disease_stage    outcome
1:  PBMC 21_25 male             mild              3          late discharged
2:  PBMC 41_45 male             mild              3          late discharged
             comorbidities COVID.19.related_medication_and_anti.microbials
1:                    none                                            none
2: Cardiovascular diseases                                            none
   RNA_snn_res.0.4  cluster_labels_res.0.4 new.order                id.celltype
1:               7 HLA-DR+ CD83+ Monocytes         1 1: HLA-DR+ CD83+ Monocytes
2:               7 HLA-DR+ CD83+ Monocytes         1 1: HLA-DR+ CD83+ Monocytes
   hpca.labels blueprint.labels monaco.labels immune.labels dmap.labels
1:    Monocyte        Monocytes     Monocytes     Monocytes   Monocytes
2:    Monocyte        Monocytes     Monocytes     Monocytes   Monocytes
   hemato.labels
1:     Monocytes
2:     Monocytes
> 
> table(cell_info$id.celltype)

     0: Classical Monocytes  1: HLA-DR+ CD83+ Monocytes 
                      16982                        3414 
         10: CD4+ T cells_2          11: CD4+ T cells_3 
                      10588                        2969 
         12: CD8+ T cells_1          13: CD8+ T cells_2 
                      11002                        1119 
         14: CD8+ T cells_3                15: NK cells 
                       2981                        8436 
              16: B cells_1               17: B cells_2 
                       7235                         259 
              18: B cells_3            19: Plasmablasts 
                        209                         839 
        2: CD163+ Monocytes           20: Megakaryocyte 
                       1445                        1161 
                  21: mixed               22: undefined 
                        164                         161 
3: HLA-DR- S100A+ monocytes  4: Non-classical Monocytes 
                       5273                        3399 
             5: Neutrophils     6: Immature Neutrophils 
                       2878                        1386 
                    7: mDCs                     8: pDCs 
                        833                         516 
          9: CD4+ T cells_1 
                      15800 
> 
> sort(table(paste(cell_info$group_per_sample, cell_info$donor, sep=":")))

severe:C19-CB-0011   mild:C19-CB-0052   control:one_k_v3       control:P07H 
               932               1132               1142               1211 
  mild:C19-CB-0005       control:P04H       control:P08H       control:P17H 
              1323               1410               1440               1486 
    control:C2P05F       control:P20H       control:P15F       control:P18F 
              1494               1504               1511               1576 
    control:C2P01H       control:P06F       control:P13H     control:C2P07H 
              1701               1715               1725               1753 
severe:C19-CB-0199   mild:C19-CB-0214   mild:C19-CB-0053     control:C2P15H 
              1755               1777               1812               1817 
    control:C2P19H     control:C2P16H     control:C2P10H     control:C2P13F 
              1879               2153               2200               2231 
      control:P02H       control:P09H severe:C19-CB-0016   mild:C19-CB-0003 
              2379               2469               2524               2583 
severe:C19-CB-0013   mild:C19-CB-0204 severe:C19-CB-0198   mild:C19-CB-0002 
              2713               2823               2992               3131 
severe:C19-CB-0021   mild:C19-CB-0001 severe:C19-CB-0012 severe:C19-CB-0020 
              3288               3614               3677               3789 
severe:C19-CB-0008 severe:C19-CB-0009  control:Five_k_v3   control:Ten_k_v3 
              4069               4332               4626              11361 
> 
> # ------------------------------------------------------------------------
> # read in count data of cell type
> # ------------------------------------------------------------------------
> 
> dat = readRDS(file.path(data.dir, sprintf("ct_mtx/%s.rds", grp)))
> dim(dat)
[1] 10167 11002
> class(dat)
[1] "dgCMatrix"
attr(,"package")
[1] "Matrix"
> dat[1:5,1:4]
5 x 4 sparse Matrix of class "dgCMatrix"
          1_AAAGAACCATGAATAG-1 1_AACAAGAGTCGGTAAG-1 1_AACCTGATCTGTGTGA-1
LINC00115                    .                    .                    .
NOC2L                        .                    .                    .
HES4                         .                    .                    .
ISG15                        .                    3                    .
C1orf159                     .                    .                    .
          1_AAGACTCCATGGCCCA-1
LINC00115                    .
NOC2L                        .
HES4                         .
ISG15                        .
C1orf159                     .
> 
> # ------------------------------------------------------------------------
> # subset cell information
> # ------------------------------------------------------------------------
> 
> table(colnames(dat) %in% cell_info$cell)

 TRUE 
11002 
> meta = cell_info[match(colnames(dat), cell_info$cell),]
> dim(meta)
[1] 11002    40
> meta[1:2,]
                   cell orig.ident nCount_RNA nFeature_RNA nReads_RNA
1: 1_AAAGAACCATGAATAG-1    Covid19       3717         1537       3717
2: 1_AACAAGAGTCGGTAAG-1    Covid19       3284         1578       3284
   nReads_ALL percent.mito percent.hb       donor onset_of_symptoms
1:       4183     6.941082          0 C19-CB-0002        25.02.2020
2:       3613     4.080390          0 C19-CB-0003        29.02.2020
   days_after_onset        sampleID origID date_of_sampling DaysAfterSample0
1:               13 C19-CB-0002_d13   2_d6       09.03.2020                6
2:               13 C19-CB-0003_d13   3_d0       12.03.2020                0
   experiment PoolID sampletag         hash.ID        platform purification
1:       A3_2      1  Hashtag5 Hashtag5-TotalA scRNA-seq (10x)        Fresh
2:       A3_2      1  Hashtag8 Hashtag8-TotalA scRNA-seq (10x)        Fresh
   cells   age    sex group_per_sample who_per_sample disease_stage    outcome
1:  PBMC 31_35 female             mild              3          late discharged
2:  PBMC 41_45   male             mild              3          late discharged
             comorbidities COVID.19.related_medication_and_anti.microbials
1:                    none                                            none
2: Cardiovascular diseases                                            none
   RNA_snn_res.0.4 cluster_labels_res.0.4 new.order        id.celltype
1:               2         CD8+ T cells_1        12 12: CD8+ T cells_1
2:               2         CD8+ T cells_1        12 12: CD8+ T cells_1
   hpca.labels blueprint.labels monaco.labels immune.labels  dmap.labels
1:     NK_cell     CD8+ T-cells       T cells      NK cells CD8+ T cells
2:     NK_cell     CD8+ T-cells       T cells      NK cells CD8+ T cells
   hemato.labels
1:  CD8+ T cells
2:  CD8+ T cells
> 
> summary(meta$nCount_RNA/meta$nFeature_RNA)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.457   2.559   2.865   2.874   3.158   5.750 
> 
> # check how many samples (each sample contains multiple cells) each donor has
> table(tapply(meta$sampleID, meta$donor, function(v){length(unique(v))}))

 1  2  3 
32  7  1 
> 
> 
> table(meta$cluster_labels_res.0.4)

CD8+ T cells_1 
         11002 
> table(meta$id.celltype)

12: CD8+ T cells_1 
             11002 
> 
> sort(table(paste(meta$group_per_sample, meta$sampleID, sep=":")))

  mild:C19-CB-0005_d15   mild:C19-CB-0005_d20    mild:C19-CB-0001_d7 
                     2                      2                      8 
  mild:C19-CB-0001_d16 severe:C19-CB-0008_d13    mild:C19-CB-0214_d7 
                    14                     17                     18 
  mild:C19-CB-0003_d13        control:P15F_d0   mild:C19-CB-0001_d11 
                    19                     23                     23 
       control:P07H_d0        control:P08H_d0  severe:C19-CB-0013_d8 
                    36                     39                     39 
       control:P06F_d0 severe:C19-CB-0008_d20      control:C2P19H_d0 
                    42                     53                     54 
  mild:C19-CB-0052_d10        control:P02H_d0  severe:C19-CB-0009_d9 
                    57                     69                     73 
       control:P04H_d0        control:P13H_d0   mild:C19-CB-0003_d18 
                    75                     79                     89 
   mild:C19-CB-0053_d3      control:C2P01H_d0        control:P17H_d0 
                    92                     95                     95 
  mild:C19-CB-0002_d13        control:P20H_d0 severe:C19-CB-0011_d13 
                    95                    103                    105 
   control:one_k_v3_d0  severe:C19-CB-0012_d9  severe:C19-CB-0199_d8 
                   131                    164                    185 
     control:C2P10H_d0 severe:C19-CB-0009_d16 severe:C19-CB-0013_d15 
                   186                    198                    203 
     control:C2P13F_d0        control:P18F_d0 severe:C19-CB-0021_d18 
                   206                    212                    238 
     control:C2P05F_d0      control:C2P07H_d0   mild:C19-CB-0204_d15 
                   317                    353                    417 
       control:P09H_d0 severe:C19-CB-0012_d16   control:Five_k_v3_d0 
                   457                    457                    508 
   mild:C19-CB-0002_d8      control:C2P15H_d0      control:C2P16H_d0 
                   530                    538                    605 
severe:C19-CB-0016_d16 severe:C19-CB-0020_d16 severe:C19-CB-0198_d18 
                   612                    697                   1154 
   control:Ten_k_v3_d0 
                  1218 
> 
> # ------------------------------------------------------------------------
> # generate individual level information
> # ------------------------------------------------------------------------
> 
> meta_ind_explore = distinct(meta[,c('donor', 'age', 'sex', 'group_per_sample')])
> dim(meta_ind_explore)
[1] 40  4
> # none of the control donors have either age or sex information
> meta_ind_explore
          donor   age    sex group_per_sample
 1: C19-CB-0002 31_35 female             mild
 2: C19-CB-0003 41_45   male             mild
 3: C19-CB-0001 21_25   male             mild
 4: C19-CB-0005 71_75   male             mild
 5: C19-CB-0009 76_80 female           severe
 6: C19-CB-0012 71_75   male           severe
 7: C19-CB-0008 61_65   male           severe
 8: C19-CB-0011 61_65   male           severe
 9: C19-CB-0013 71_75   male           severe
10: C19-CB-0020 51_55 female           severe
11: C19-CB-0016 71_75   male           severe
12: C19-CB-0021 51_55   male           severe
13: C19-CB-0204 71_75 female             mild
14: C19-CB-0198 41_45 female           severe
15: C19-CB-0199 56_60 female           severe
16: C19-CB-0053 71_75   male             mild
17: C19-CB-0052 66_70   male             mild
18: C19-CB-0214 66_70   male             mild
19:        P20H   n/a    n/a          control
20:        P18F   n/a    n/a          control
21:        P17H   n/a    n/a          control
22:        P13H   n/a    n/a          control
23:        P08H   n/a    n/a          control
24:        P15F   n/a    n/a          control
25:        P04H   n/a    n/a          control
26:        P06F   n/a    n/a          control
27:        P07H   n/a    n/a          control
28:      C2P01H   n/a    n/a          control
29:        P09H   n/a    n/a          control
30:        P02H   n/a    n/a          control
31:      C2P05F   n/a    n/a          control
32:      C2P07H   n/a    n/a          control
33:      C2P16H   n/a    n/a          control
34:      C2P10H   n/a    n/a          control
35:      C2P13F   n/a    n/a          control
36:      C2P15H   n/a    n/a          control
37:      C2P19H   n/a    n/a          control
38:    one_k_v3   n/a    n/a          control
39:   Five_k_v3   n/a    n/a          control
40:    Ten_k_v3   n/a    n/a          control
          donor   age    sex group_per_sample
> 
> 
> length(unique(meta$donor))
[1] 40
> 
> if(nrow(meta_ind_explore) != length(unique(meta$donor))){
+   stop("there is non-unique information\n")
+ }
> 
> 
> 
> # check whether the control label from disease_stage and that from
> # group_per_sample columns match
> table(meta$disease_stage)

control   early    late 
   5441    1166    4395 
> table(meta$group_per_sample)

control    mild  severe 
   5441    1366    4195 
> table(meta$disease_stage, meta$group_per_sample)
         
          control mild severe
  control    5441    0      0
  early         0  705    461
  late          0  661   3734
> 
> table(meta$donor, meta$disease_stage)
             
              control early late
  C19-CB-0001       0     8   37
  C19-CB-0002       0   530   95
  C19-CB-0003       0     0  108
  C19-CB-0005       0     0    4
  C19-CB-0008       0     0   70
  C19-CB-0009       0    73  198
  C19-CB-0011       0     0  105
  C19-CB-0012       0   164  457
  C19-CB-0013       0    39  203
  C19-CB-0016       0     0  612
  C19-CB-0020       0     0  697
  C19-CB-0021       0     0  238
  C19-CB-0052       0    57    0
  C19-CB-0053       0    92    0
  C19-CB-0198       0     0 1154
  C19-CB-0199       0   185    0
  C19-CB-0204       0     0  417
  C19-CB-0214       0    18    0
  C2P01H           95     0    0
  C2P05F          317     0    0
  C2P07H          353     0    0
  C2P10H          186     0    0
  C2P13F          206     0    0
  C2P15H          538     0    0
  C2P16H          605     0    0
  C2P19H           54     0    0
  Five_k_v3       508     0    0
  one_k_v3        131     0    0
  P02H             69     0    0
  P04H             75     0    0
  P06F             42     0    0
  P07H             36     0    0
  P08H             39     0    0
  P09H            457     0    0
  P13H             79     0    0
  P15F             23     0    0
  P17H             95     0    0
  P18F            212     0    0
  P20H            103     0    0
  Ten_k_v3       1218     0    0
> 
> # filter out cells from control samples
> meta_covid = meta[which(meta$group_per_sample != "control"),]
> dim(meta_covid)
[1] 5561   40
> 
> table(meta_covid$group_per_sample)

  mild severe 
  1366   4195 
> table(meta_covid$disease_stage)

early  late 
 1166  4395 
> table(meta_covid$donor)

C19-CB-0001 C19-CB-0002 C19-CB-0003 C19-CB-0005 C19-CB-0008 C19-CB-0009 
         45         625         108           4          70         271 
C19-CB-0011 C19-CB-0012 C19-CB-0013 C19-CB-0016 C19-CB-0020 C19-CB-0021 
        105         621         242         612         697         238 
C19-CB-0052 C19-CB-0053 C19-CB-0198 C19-CB-0199 C19-CB-0204 C19-CB-0214 
         57          92        1154         185         417          18 
> 
> table(meta_covid$donor, meta_covid$disease_stage)
             
              early late
  C19-CB-0001     8   37
  C19-CB-0002   530   95
  C19-CB-0003     0  108
  C19-CB-0005     0    4
  C19-CB-0008     0   70
  C19-CB-0009    73  198
  C19-CB-0011     0  105
  C19-CB-0012   164  457
  C19-CB-0013    39  203
  C19-CB-0016     0  612
  C19-CB-0020     0  697
  C19-CB-0021     0  238
  C19-CB-0052    57    0
  C19-CB-0053    92    0
  C19-CB-0198     0 1154
  C19-CB-0199   185    0
  C19-CB-0204     0  417
  C19-CB-0214    18    0
> 
> df_donor = as.data.frame(table(meta_covid$donor))
> donor2kp = df_donor$Var1[which(df_donor$Freq >= 10)]
> 
> meta2kp = meta_covid[which(meta_covid$donor %in% donor2kp),]
> dim(meta2kp)
[1] 5557   40
> table(meta2kp$donor)

C19-CB-0001 C19-CB-0002 C19-CB-0003 C19-CB-0008 C19-CB-0009 C19-CB-0011 
         45         625         108          70         271         105 
C19-CB-0012 C19-CB-0013 C19-CB-0016 C19-CB-0020 C19-CB-0021 C19-CB-0052 
        621         242         612         697         238          57 
C19-CB-0053 C19-CB-0198 C19-CB-0199 C19-CB-0204 C19-CB-0214 
         92        1154         185         417          18 
> length(unique(meta2kp$donor))
[1] 17
> 
> cell2kp_index = which(meta$cell %in% meta2kp$cell)
> 
> # select counts of the cells to keep
> dat1 = dat[, cell2kp_index]
> mean(colnames(dat1) == meta2kp$cell)
[1] 1
> 
> meta_ind = distinct(meta2kp[,c('donor', 'group_per_sample', 'sex')])
> table(meta_ind$group_per_sample, meta_ind$sex)
        
         female male
  mild        2    5
  severe      4    6
> 
> # add exact age information
> donor_info_match = 
+   covid_donor_info[match(meta_ind$donor, covid_donor_info$donor),]
> # double check that the condition and sex features match
> mean(donor_info_match$condition == meta_ind$group_per_sample)
[1] 1
> mean(which(donor_info_match$sex=="f") == which(meta_ind$sex=="female"))
[1] 1
> meta_ind$age = donor_info_match$age
> 
> sort(meta_ind$age[which(meta_ind$group_per_sample=="mild")])
[1] 21 31 45 69 70 71 74
> sort(meta_ind$age[which(meta_ind$group_per_sample=="severe")])
 [1] 42 52 53 60 61 63 71 74 75 80
> 
> table(meta_ind$group_per_sample)

  mild severe 
     7     10 
> 
> # ------------------------------------------------------------------------
> # collect count data
> # ------------------------------------------------------------------------
> 
> trec1 = matrix(NA, nrow=nrow(dat1), ncol=nrow(meta_ind))
> colnames(trec1) = meta_ind$donor
> rownames(trec1) = rownames(dat1)
> dim(trec1)
[1] 10167    17
> trec1[1:2,1:3]
          C19-CB-0002 C19-CB-0003 C19-CB-0001
LINC00115          NA          NA          NA
NOC2L              NA          NA          NA
> 
> for(i in 1:ncol(trec1)){
+   wi = which(meta2kp$donor == meta_ind$donor[i])
+   trec1[,i] = rowSums(dat1[,wi])
+ }
> 
> dim(trec1)
[1] 10167    17
> trec1[1:2,1:3]
          C19-CB-0002 C19-CB-0003 C19-CB-0001
LINC00115          22           3           1
NOC2L             115          28          10
> 
> 
> # ------------------------------------------------------------------------
> # run DESeq2
> # ------------------------------------------------------------------------
> 
> colData = meta_ind
> colnames(colData)[2] = 'diagnosis'
> # keep the age column being numeric
> for(i in 1:(ncol(colData)-1)){
+   if(is.character(colData[[i]])){
+     colData[[i]] = as.factor(colData[[i]])
+   }
+ }
> dim(colData)
[1] 17  4
> colData[1:2,]
         donor diagnosis    sex age
1: C19-CB-0002      mild female  31
2: C19-CB-0003      mild   male  45
> 
> 
> summary(colData)
         donor     diagnosis      sex          age       
 C19-CB-0001: 1   mild  : 7   female: 6   Min.   :21.00  
 C19-CB-0002: 1   severe:10   male  :11   1st Qu.:52.00  
 C19-CB-0003: 1                           Median :63.00  
 C19-CB-0008: 1                           Mean   :59.53  
 C19-CB-0009: 1                           3rd Qu.:71.00  
 C19-CB-0011: 1                           Max.   :80.00  
 (Other)    :11                                          
> 
> colData$diagnosis = factor(colData$diagnosis, levels=c("mild", "severe"))
> 
> 
> # ------------------------------------------------------------------------
> # add to colData donor level covariates to adjust for 
> # ------------------------------------------------------------------------
> 
> # total read depth across all cells under each individual
> 
> total_rd = c()
> 
> for (i in c(1:dim(meta_ind)[1])){
+   wi = which(meta2kp$donor == meta_ind$donor[i])
+   total_rd = c(total_rd, sum(apply(dat1[,wi], 2, sum)))
+ }
> 
> colData$totalrd = total_rd
> 
> 
> 
> # first, null model
> 
> dd0 = DESeqDataSetFromMatrix(countData = trec1, 
+                              colData = colData,
+                              design = ~ diagnosis)
converting counts to integer mode
> dd0  = DESeq(dd0)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
final dispersion estimates
fitting model and testing
-- replacing outliers and refitting for 5 genes
-- DESeq argument 'minReplicatesForReplace' = 7 
-- original counts are preserved in counts(dds)
estimating dispersions
fitting model and testing
> res0 = results(dd0)
> dim(res0)
[1] 10167     6
> head(res0)
log2 fold change (MLE): diagnosis severe vs mild 
Wald test p-value: diagnosis severe vs mild 
DataFrame with 6 rows and 6 columns
           baseMean log2FoldChange     lfcSE      stat     pvalue      padj
          <numeric>      <numeric> <numeric> <numeric>  <numeric> <numeric>
LINC00115   6.91122      -0.154034  0.377013 -0.408565 0.68285915        NA
NOC2L      46.19758       0.147271  0.178987  0.822805 0.41061895 0.6195992
HES4        2.05958      -1.048625  0.603320 -1.738091 0.08219484        NA
ISG15     227.78798      -0.787604  0.242601 -3.246504 0.00116832 0.0162483
C1orf159    5.42886      -0.767747  0.372648 -2.060247 0.03937491        NA
TNFRSF18   10.07387       0.366677  0.521865  0.702628 0.48228731        NA
> summary(res0)

out of 10059 with nonzero total read count
adjusted p-value < 0.1
LFC > 0 (up)       : 744, 7.4%
LFC < 0 (down)     : 524, 5.2%
outliers [1]       : 0, 0%
low counts [2]     : 3898, 39%
(mean count < 18)
[1] see 'cooksCutoff' argument of ?results
[2] see 'independentFiltering' argument of ?results

> 
> nm0 = resultsNames(dd0)
> nm0
[1] "Intercept"                "diagnosis_severe_vs_mild"
> nm0 = nm0[-1]
> 
> pvals0 = matrix(NA, nrow=nrow(trec1), ncol=length(nm0))
> 
> for(k in 1:length(nm0)){
+   rk = results(dd0, name=nm0[k])
+   pvals0[,k] = rk$pvalue
+ }
> 
> colnames(pvals0) = nm0
> dim(pvals0)
[1] 10167     1
> head(pvals0)
     diagnosis_severe_vs_mild
[1,]              0.682859153
[2,]              0.410618954
[3,]              0.082194835
[4,]              0.001168317
[5,]              0.039374910
[6,]              0.482287312
> summary(pvals0)
 diagnosis_severe_vs_mild
 Min.   :0.00000         
 1st Qu.:0.07214         
 Median :0.29973         
 Mean   :0.36679         
 3rd Qu.:0.63418         
 Max.   :0.99986         
 NA's   :108             
> 
> 
> 
> # second, only include donor level total read depth as covariate
> 
> dd1 = DESeqDataSetFromMatrix(countData = trec1, 
+                              colData = colData,
+                              design = ~ log(totalrd) + diagnosis)
converting counts to integer mode
  the design formula contains one or more numeric variables with integer values,
  specifying a model with increasing fold change for higher values.
  did you mean for this to be a factor? if so, first convert
  this variable to a factor using the factor() function
  the design formula contains one or more numeric variables that have mean or
  standard deviation larger than 5 (an arbitrary threshold to trigger this message).
  Including numeric variables with large mean can induce collinearity with the intercept.
  Users should center and scale numeric variables in the design to improve GLM convergence.
> dd1 = DESeq(dd1)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
final dispersion estimates
fitting model and testing
> 
> res1 = results(dd1)
> dim(res1)
[1] 10167     6
> head(res1)
log2 fold change (MLE): diagnosis severe vs mild 
Wald test p-value: diagnosis severe vs mild 
DataFrame with 6 rows and 6 columns
           baseMean log2FoldChange     lfcSE      stat    pvalue      padj
          <numeric>      <numeric> <numeric> <numeric> <numeric> <numeric>
LINC00115   6.91122     -0.4064026  0.343403 -1.183456 0.2366285        NA
NOC2L      46.19758      0.0507231  0.186436  0.272067 0.7855704  0.880928
HES4        2.05958     -0.9169298  0.647403 -1.416320 0.1566818        NA
ISG15     227.78798     -0.2628822  0.233247 -1.127053 0.2597199  0.482272
C1orf159    5.42886     -0.7988778  0.396798 -2.013309 0.0440821        NA
TNFRSF18   10.07387      0.5458429  0.585731  0.931900 0.3513885        NA
> summary(res1)

out of 10059 with nonzero total read count
adjusted p-value < 0.1
LFC > 0 (up)       : 545, 5.4%
LFC < 0 (down)     : 355, 3.5%
outliers [1]       : 0, 0%
low counts [2]     : 4678, 47%
(mean count < 23)
[1] see 'cooksCutoff' argument of ?results
[2] see 'independentFiltering' argument of ?results

> 
> nm1 = resultsNames(dd1)
> nm1
[1] "Intercept"                "log.totalrd."            
[3] "diagnosis_severe_vs_mild"
> nm1 = nm1[-1]
> 
> pvals1 = matrix(NA, nrow=nrow(trec1), ncol=length(nm1))
> 
> for(k in 1:length(nm1)){
+   rk = results(dd1, name=nm1[k])
+   pvals1[,k] = rk$pvalue
+ }
> 
> colnames(pvals1) = nm1
> dim(pvals1)
[1] 10167     2
> head(pvals1)
     log.totalrd. diagnosis_severe_vs_mild
[1,] 0.0331095399               0.23662851
[2,] 0.2129173415               0.78557043
[3,] 0.6600138574               0.15668176
[4,] 0.0005292853               0.25971991
[5,] 0.8356887696               0.04408215
[6,] 0.3911357599               0.35138846
> summary(pvals1)
  log.totalrd.    diagnosis_severe_vs_mild
 Min.   :0.0000   Min.   :0.00000         
 1st Qu.:0.1849   1st Qu.:0.08928         
 Median :0.4507   Median :0.32875         
 Mean   :0.4592   Mean   :0.38235         
 3rd Qu.:0.7198   3rd Qu.:0.64061         
 Max.   :0.9999   Max.   :0.99999         
 NA's   :108      NA's   :108             
> 
> 
> # third, include sex and age as covariates
> 
> dd2 = DESeqDataSetFromMatrix(countData = trec1, 
+                              colData = colData,
+                              design = ~ sex + age + diagnosis)
converting counts to integer mode
  the design formula contains one or more numeric variables with integer values,
  specifying a model with increasing fold change for higher values.
  did you mean for this to be a factor? if so, first convert
  this variable to a factor using the factor() function
  the design formula contains one or more numeric variables that have mean or
  standard deviation larger than 5 (an arbitrary threshold to trigger this message).
  Including numeric variables with large mean can induce collinearity with the intercept.
  Users should center and scale numeric variables in the design to improve GLM convergence.
> dd2 = DESeq(dd2)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
final dispersion estimates
fitting model and testing
> 
> res2 = results(dd2)
> dim(res2)
[1] 10167     6
> head(res2)
log2 fold change (MLE): diagnosis severe vs mild 
Wald test p-value: diagnosis severe vs mild 
DataFrame with 6 rows and 6 columns
           baseMean log2FoldChange     lfcSE      stat     pvalue      padj
          <numeric>      <numeric> <numeric> <numeric>  <numeric> <numeric>
LINC00115   6.91122      -0.123442  0.377633 -0.326884 0.74375572        NA
NOC2L      46.19758       0.135685  0.188864  0.718428 0.47249331 0.6929222
HES4        2.05958      -0.884779  0.612235 -1.445161 0.14841270        NA
ISG15     227.78798      -0.810588  0.271588 -2.984629 0.00283922 0.0343586
C1orf159    5.42886      -0.716989  0.386188 -1.856580 0.06337099        NA
TNFRSF18   10.07387       0.165522  0.508702  0.325381 0.74489275        NA
> summary(res2)

out of 10059 with nonzero total read count
adjusted p-value < 0.1
LFC > 0 (up)       : 570, 5.7%
LFC < 0 (down)     : 346, 3.4%
outliers [1]       : 0, 0%
low counts [2]     : 4093, 41%
(mean count < 19)
[1] see 'cooksCutoff' argument of ?results
[2] see 'independentFiltering' argument of ?results

> 
> nm2 = resultsNames(dd2)
> nm2
[1] "Intercept"                "sex_male_vs_female"      
[3] "age"                      "diagnosis_severe_vs_mild"
> nm2 = nm2[-1]
> 
> pvals2 = matrix(NA, nrow=nrow(trec1), ncol=length(nm2))
> 
> for(k in 1:length(nm2)){
+   rk = results(dd2, name=nm2[k])
+   pvals2[,k] = rk$pvalue
+ }
> 
> colnames(pvals2) = nm2
> dim(pvals2)
[1] 10167     3
> head(pvals2)
     sex_male_vs_female       age diagnosis_severe_vs_mild
[1,]         0.45482659 0.9392804               0.74375572
[2,]         0.68739137 0.7963030               0.47249331
[3,]         0.24967127 0.4289889               0.14841270
[4,]         0.75224322 0.6427504               0.00283922
[5,]         0.60145415 0.6602213               0.06337099
[6,]         0.08425635 0.2697169               0.74489275
> summary(pvals2)
 sex_male_vs_female      age          diagnosis_severe_vs_mild
 Min.   :0.0000     Min.   :0.00001   Min.   :0.00000         
 1st Qu.:0.2786     1st Qu.:0.25232   1st Qu.:0.09293         
 Median :0.5356     Median :0.50370   Median :0.33357         
 Mean   :0.5196     Mean   :0.50324   Mean   :0.38783         
 3rd Qu.:0.7657     3rd Qu.:0.75485   3rd Qu.:0.65518         
 Max.   :1.0000     Max.   :0.99964   Max.   :0.99995         
 NA's   :108        NA's   :108       NA's   :108             
> 
> 
> 
> # fourth, include both donor level total read depth, sex and age
> 
> dd3 = DESeqDataSetFromMatrix(countData = trec1, 
+                              colData = colData,
+                              design = ~ log(totalrd) + sex + age + diagnosis)
converting counts to integer mode
  the design formula contains one or more numeric variables with integer values,
  specifying a model with increasing fold change for higher values.
  did you mean for this to be a factor? if so, first convert
  this variable to a factor using the factor() function
  the design formula contains one or more numeric variables that have mean or
  standard deviation larger than 5 (an arbitrary threshold to trigger this message).
  Including numeric variables with large mean can induce collinearity with the intercept.
  Users should center and scale numeric variables in the design to improve GLM convergence.
> dd3 = DESeq(dd3)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
final dispersion estimates
fitting model and testing
> 
> res3 = results(dd3)
> dim(res3)
[1] 10167     6
> head(res3)
log2 fold change (MLE): diagnosis severe vs mild 
Wald test p-value: diagnosis severe vs mild 
DataFrame with 6 rows and 6 columns
           baseMean log2FoldChange     lfcSE       stat    pvalue      padj
          <numeric>      <numeric> <numeric>  <numeric> <numeric> <numeric>
LINC00115   6.91122     -0.4788386  0.405671 -1.1803625 0.2378561        NA
NOC2L      46.19758      0.0098723  0.211791  0.0466134 0.9628213  0.983041
HES4        2.05958     -0.9202831  0.750420 -1.2263569 0.2200644        NA
ISG15     227.78798     -0.2285416  0.246093 -0.9286794 0.3530553  0.585240
C1orf159    5.42886     -0.8360723  0.463024 -1.8056788 0.0709685        NA
TNFRSF18   10.07387      0.0441355  0.596390  0.0740044 0.9410069        NA
> summary(res3)

out of 10059 with nonzero total read count
adjusted p-value < 0.1
LFC > 0 (up)       : 306, 3%
LFC < 0 (down)     : 147, 1.5%
outliers [1]       : 0, 0%
low counts [2]     : 6432, 64%
(mean count < 40)
[1] see 'cooksCutoff' argument of ?results
[2] see 'independentFiltering' argument of ?results

> 
> nm3 = resultsNames(dd3)
> nm3
[1] "Intercept"                "log.totalrd."            
[3] "sex_male_vs_female"       "age"                     
[5] "diagnosis_severe_vs_mild"
> nm3 = nm3[-1]
> 
> pvals3 = matrix(NA, nrow=nrow(trec1), ncol=length(nm3))
> 
> for(k in 1:length(nm3)){
+   rk = results(dd3, name=nm3[k])
+   pvals3[,k] = rk$pvalue
+ }
> 
> colnames(pvals3) = nm3
> dim(pvals3)
[1] 10167     4
> head(pvals3)
     log.totalrd. sex_male_vs_female       age diagnosis_severe_vs_mild
[1,] 0.0698930706         0.78843221 0.9398947               0.23785608
[2,] 0.2242493569         0.74666514 0.7696792               0.96282134
[3,] 0.9221981460         0.34461415 0.4408689               0.22006441
[4,] 0.0002710508         0.12829589 0.7309674               0.35305527
[5,] 0.6214648497         0.49381763 0.6786644               0.07096852
[6,] 0.6045340594         0.07995351 0.2705919               0.94100689
> summary(pvals3)
  log.totalrd.    sex_male_vs_female      age          diagnosis_severe_vs_mild
 Min.   :0.0000   Min.   :0.0000     Min.   :0.00001   Min.   :0.0000          
 1st Qu.:0.2119   1st Qu.:0.3115     1st Qu.:0.24875   1st Qu.:0.1382          
 Median :0.4602   Median :0.5520     Median :0.50342   Median :0.3900          
 Mean   :0.4726   Mean   :0.5414     Mean   :0.50281   Mean   :0.4235          
 3rd Qu.:0.7276   3rd Qu.:0.7856     3rd Qu.:0.75423   3rd Qu.:0.6873          
 Max.   :1.0000   Max.   :1.0000     Max.   :0.99991   Max.   :0.9999          
 NA's   :108      NA's   :108        NA's   :108       NA's   :108             
> 
> 
> 
> 
> pdf(sprintf("figures/1b_DESeq2_%s_pval_hists_mild_severe.pdf", grp), 
+     width=18, height=3.5)
> par(mfrow=c(1,4), bty="n", mar=c(5,4,2,1))
> k = length(nm0)
> hist(pvals0[,k], main="null", xlab="p-value", breaks=50)
> k = length(nm1)
> hist(pvals1[,k], main="log(totalrd)", xlab="p-value", breaks=50)
> k = length(nm2)
> hist(pvals2[,k], main="sex+age", xlab="p-value", breaks=50)
> k = length(nm3)
> hist(pvals3[,k], main="log(totalrd)+sex+age", xlab="p-value", breaks=50)
> dev.off()
null device 
          1 
> 
> 
> pdf(sprintf("figures/1b_DESeq2_%s_pval_hists_full_mild_severe.pdf", grp), 
+     width=9, height=7)
> par(mfrow=c(2,2), bty="n", mar=c(5,4,2,1))
> for(k in 1:length(nm3)){
+   hist(pvals3[,k], main=nm3[k], xlab="p-value", breaks=50)
+ }
> 
> dev.off()
null device 
          1 
> 
> # ------------------------------------------------------------------------
> # summarize p-value distribution
> # ------------------------------------------------------------------------
> 
> pdf(sprintf("figures/1b_DESeq2_%s_compare_pval_mild_severe.pdf", grp), 
+     width=9, height=3)
> par(mfrow=c(1,3), bty="n", mar=c(5,4,1,1))
> 
> plot(-log10(res0$pvalue), -log10(res1$pvalue), main="-log10(p-value)", 
+      xlab="null", ylab="log(totalrd)", 
+      pch=20, cex=0.2, col=rgb(0.8, 0.1, 0.1, 0.5))
> abline(0, 1, col="darkblue")
> 
> plot(-log10(res0$pvalue), -log10(res2$pvalue), main="-log10(p-value)", 
+      xlab="null", ylab="sex+age", 
+      pch=20, cex=0.2, col=rgb(0.8, 0.1, 0.1, 0.5))
> abline(0, 1, col="darkblue")
> 
> plot(-log10(res0$pvalue), -log10(res3$pvalue), main="-log10(p-value)", 
+      xlab="null", ylab="log(totalrd)+sex+age", 
+      pch=20, cex=0.2, col=rgb(0.8, 0.1, 0.1, 0.5))
> abline(0, 1, col="darkblue")
> 
> dev.off()
null device 
          1 
> 
> 
> 
> 
> 
> # ------------------------------------------------------------------------
> # save the results
> # ------------------------------------------------------------------------
> 
> dim(res0)
[1] 10167     6
> res0[1:2,]
log2 fold change (MLE): diagnosis severe vs mild 
Wald test p-value: diagnosis severe vs mild 
DataFrame with 2 rows and 6 columns
           baseMean log2FoldChange     lfcSE      stat    pvalue      padj
          <numeric>      <numeric> <numeric> <numeric> <numeric> <numeric>
LINC00115   6.91122      -0.154034  0.377013 -0.408565  0.682859        NA
NOC2L      46.19758       0.147271  0.178987  0.822805  0.410619  0.619599
> 
> dim(res1)
[1] 10167     6
> res1[1:2,]
log2 fold change (MLE): diagnosis severe vs mild 
Wald test p-value: diagnosis severe vs mild 
DataFrame with 2 rows and 6 columns
           baseMean log2FoldChange     lfcSE      stat    pvalue      padj
          <numeric>      <numeric> <numeric> <numeric> <numeric> <numeric>
LINC00115   6.91122     -0.4064026  0.343403 -1.183456  0.236629        NA
NOC2L      46.19758      0.0507231  0.186436  0.272067  0.785570  0.880928
> 
> dim(res2)
[1] 10167     6
> res2[1:2,]
log2 fold change (MLE): diagnosis severe vs mild 
Wald test p-value: diagnosis severe vs mild 
DataFrame with 2 rows and 6 columns
           baseMean log2FoldChange     lfcSE      stat    pvalue      padj
          <numeric>      <numeric> <numeric> <numeric> <numeric> <numeric>
LINC00115   6.91122      -0.123442  0.377633 -0.326884  0.743756        NA
NOC2L      46.19758       0.135685  0.188864  0.718428  0.472493  0.692922
> 
> dim(res3)
[1] 10167     6
> res3[1:2,]
log2 fold change (MLE): diagnosis severe vs mild 
Wald test p-value: diagnosis severe vs mild 
DataFrame with 2 rows and 6 columns
           baseMean log2FoldChange     lfcSE       stat    pvalue      padj
          <numeric>      <numeric> <numeric>  <numeric> <numeric> <numeric>
LINC00115   6.91122     -0.4788386  0.405671 -1.1803625  0.237856        NA
NOC2L      46.19758      0.0098723  0.211791  0.0466134  0.962821  0.983041
> 
> res0 = as.data.frame(res0)
> res1 = as.data.frame(res1)
> res2 = as.data.frame(res2)
> res3 = as.data.frame(res3)
> 
> 
> fwrite(res0, file=sprintf("res/1b_DESeq2_%s_no_covariates_mild_severe.tsv", grp), 
+        sep = "\t")
> 
> fwrite(res1, file=sprintf("res/1b_DESeq2_%s_logtotalrd_mild_severe.tsv", grp), 
+        sep = "\t")
> 
> fwrite(res2, file=sprintf("res/1b_DESeq2_%s_sex_age_mild_severe.tsv", grp), 
+        sep = "\t")
> 
> fwrite(res3, file=sprintf("res/1b_DESeq2_%s_logtotalrd_sex_age_mild_severe.tsv", grp), 
+        sep = "\t")
> 
> 
> # look into the genes with NA for pvalues
> min_vec = apply(trec1, 1, min)
> max_vec = apply(trec1, 1, max)
> zero_indexes = which(min_vec == max_vec)
> summary(max_vec[zero_indexes])
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0       0       0       0       0       0 
> # they are exactly those with 0 total count for every donor
> mean(which(min_vec == max_vec) == which(is.na(pvals0[,1])))
[1] 1
> 
> 
> 
> gc()
           used  (Mb) gc trigger  (Mb) limit (Mb)  max used  (Mb)
Ncells  6829464 364.8   10082205 538.5         NA  10082205 538.5
Vcells 61098602 466.2  104466212 797.1      65536 104463761 797.0
> 
> 
> 
> 
> 
> 
> sessionInfo()
R version 4.1.0 (2021-05-18)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] DESeq2_1.32.0               SummarizedExperiment_1.22.0
 [3] Biobase_2.52.0              MatrixGenerics_1.4.3       
 [5] matrixStats_0.61.0          GenomicRanges_1.44.0       
 [7] GenomeInfoDb_1.28.4         IRanges_2.26.0             
 [9] S4Vectors_0.30.0            BiocGenerics_0.38.0        
[11] dplyr_1.0.7                 data.table_1.14.0          
[13] Matrix_1.3-3               

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-44       
 [4] png_0.1-7              Biostrings_2.60.2      utf8_1.2.1            
 [7] R6_2.5.0               RSQLite_2.2.8          httr_1.4.2            
[10] ggplot2_3.3.5          pillar_1.6.1           zlibbioc_1.38.0       
[13] rlang_0.4.11           rstudioapi_0.13        annotate_1.70.0       
[16] blob_1.2.2             splines_4.1.0          BiocParallel_1.26.2   
[19] geneplotter_1.70.0     RCurl_1.98-1.5         bit_4.0.4             
[22] munsell_0.5.0          DelayedArray_0.18.0    compiler_4.1.0        
[25] pkgconfig_2.0.3        tidyselect_1.1.1       KEGGREST_1.32.0       
[28] tibble_3.1.2           GenomeInfoDbData_1.2.6 XML_3.99-0.8          
[31] fansi_0.5.0            crayon_1.4.1           bitops_1.0-7          
[34] grid_4.1.0             xtable_1.8-4           gtable_0.3.0          
[37] lifecycle_1.0.0        DBI_1.1.1              magrittr_2.0.1        
[40] scales_1.1.1           cachem_1.0.5           XVector_0.32.0        
[43] genefilter_1.74.0      ellipsis_0.3.2         generics_0.1.0        
[46] vctrs_0.3.8            RColorBrewer_1.1-2     tools_4.1.0           
[49] bit64_4.0.5            glue_1.4.2             purrr_0.3.4           
[52] fastmap_1.1.0          survival_3.2-11        AnnotationDbi_1.54.1  
[55] colorspace_2.0-2       memoise_2.0.0         
> q(save="no")
> proc.time()
   user  system elapsed 
 32.931   1.085  34.071 
