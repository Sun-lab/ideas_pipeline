
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # compared with 2a, this version deals with the results when 
> # keep all genes appearing in at least 10% of cells
> 
> 
> 
> library(ggcorrplot)
Loading required package: ggplot2
> library(data.table)
> library(ggpubr)
> library(ggrepel)
> library(reshape2)

Attaching package: ‘reshape2’

The following objects are masked from ‘package:data.table’:

    dcast, melt

> 
> theme_set(theme_classic())
> 
> # -------------------------------------------------------------------
> # read in cell type information
> # -------------------------------------------------------------------
> 
> # for now, CD8+Tcells_1 only
> cell_types = c("CD8+Tcells_1")
> 
> # -------------------------------------------------------------------
> # read p-values, draw histogram of p-values, and record 
> # fisher exact test to compare each pair of method
> # -------------------------------------------------------------------
> 
> methods = c("DESeq2", "rank_sum", "MAST_glm", "MAST_glmer", 
+             "PS_nb_Was", "PS_dca_direct_Was", "PS_saver_direct_Was")
> 
> pi0     = matrix(NA, nrow=length(cell_types), ncol=length(methods))
> ngenes  = rep(NA, length(cell_types))
> or_list = fp_list = pv_list = list()
> 
> pdf("figures/4_pval_hist.pdf", width=12, height=6)
> par(mfrow=c(2,4), bty="n", mar=c(5,4,3,1))
> 
> for(i in 1:length(cell_types)){
+   ct1 = cell_types[i]
+   p1  = fread(sprintf("res/3e_pvals_%s.tsv", ct1))
+   pv_list[[ct1]]= p1
+   ngenes[i] = nrow(p1)
+   
+   odds_ratio = fisher_pvl = matrix(NA, nrow=length(methods), 
+                                    ncol=length(methods))
+   
+   colnames(odds_ratio) = rownames(odds_ratio) = methods
+   colnames(fisher_pvl) = rownames(fisher_pvl) = methods
+   
+   j = 0
+   for(m1 in methods){
+     j = j + 1
+     hist(p1[[m1]], main=paste0(m1, "\n", ct1), xlab="p-value", breaks = 20)
+     pi0[i,j] = min(1, 2*mean(p1[[m1]] > 0.5, na.rm=TRUE))
+     
+     pj = p1[[m1]] < 0.05
+     if(sum(pj, na.rm=TRUE) == 0){ next }
+     
+     for(k1 in methods){
+       pk = p1[[k1]] < 0.05
+       if(sum(pk, na.rm=TRUE) == 0){ next }
+       
+       fjk = fisher.test(pj, pk)
+       odds_ratio[m1, k1] = fjk$estimate
+       fisher_pvl[m1, k1] = fjk$p.value
+     }
+   }
+   plot(0:1,0:1, type="n", xaxt="n", yaxt="n", bty="n", xlab="", ylab="")
+   or_list[[ct1]] = odds_ratio
+   fp_list[[ct1]] = fisher_pvl
+   
+ }
> 
> dev.off()
null device 
          1 
> 
> 
> df1 = data.frame(cell_type =  cell_types, n_genes = ngenes)
> df1$cell_type = factor(df1$cell_type, levels = df1$cell_type)
> 
> g2  = ggplot(data=df1, aes(x=cell_type, y=n_genes)) +
+   geom_bar(stat="identity", fill="gray") + 
+   ylab("number of genes") + xlab("") + 
+   coord_flip() + theme_classic() 
> 
> ggsave("figures/4_barplot_n_genes.pdf", g2, width=3, height=3.5)
> 
> pdf("figures/4_odds_ratio.pdf", width=6, height=6)
> par(mfrow=c(1,1), bty="n", mar=c(5,4,3,1))
> 
> for(ct1 in cell_types){
+   or1 = or_list[[ct1]]
+   or1[which(or1 > 10)] = 10
+   g1 = ggcorrplot(or1, tl.srt=90) + ggtitle(ct1) +
+     scale_fill_gradient2(limit = c(0,10), low = "blue", 
+                          high =  "red", mid = "white", 
+                          midpoint = 5)
+   print(g1)
+ }
Scale for 'fill' is already present. Adding another scale for 'fill', which
will replace the existing scale.
> dev.off()
null device 
          1 
> 
> # -------------------------------------------------------------------
> # summarize the proportion of non-nulls
> # -------------------------------------------------------------------
> 
> colnames(pi0) = methods
> rownames(pi0) = cell_types
> 
> pi1 = t(1 - pi0)
> 
> pi1
                    CD8+Tcells_1
DESeq2                 0.3461240
rank_sum               0.6627907
MAST_glm               0.9732558
MAST_glmer             0.9631640
PS_nb_Was              0.3824670
PS_dca_direct_Was      0.7833333
PS_saver_direct_Was    0.7480620
> 
> rownames(pi1) = gsub("PS_nb_Was", "IDEAS_NB", rownames(pi1))
> rownames(pi1) = gsub("PS_dca_direct_Was", "IDEAS_DCA", rownames(pi1))
> rownames(pi1) = gsub("PS_saver_direct_Was", "IDEAS_SAVER", rownames(pi1))
> 
> summary(c(pi1))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.3461  0.5226  0.7481  0.6942  0.8732  0.9733 
> 
> g1 = ggcorrplot(pi1, tl.srt=90)
> g1 = g1 + scale_fill_gradient2(limit = c(0,1), low = "blue", 
+                                high =  "red", mid = "white", 
+                                midpoint = 0.2)
Scale for 'fill' is already present. Adding another scale for 'fill', which
will replace the existing scale.
> 
> ggsave("figures/4_pi1_complete.pdf", g1, width=5, height=5)
> 
> pi1_sub = pi1[-(2:3),, drop = FALSE]
> summary(c(pi1_sub))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.3461  0.3825  0.7481  0.6446  0.7833  0.9632 
> rownames(pi1_sub) = rownames(pi1_sub)
> 
> g1 = ggcorrplot(pi1_sub, tl.srt=90)
> g1 = g1 + scale_fill_gradient2(limit = c(0,1), low = "blue", 
+                                high =  "red", mid = "white", 
+                                midpoint = 0.2)
Scale for 'fill' is already present. Adding another scale for 'fill', which
will replace the existing scale.
> 
> ggsave("figures/4_pi1_PS_Was.pdf", g1, width=4, height=5)
> 
> pi1_sub = as.data.frame(round(t(pi1_sub),3))
> table(df1$cell_type == rownames(pi1_sub))

TRUE 
   1 
> pi1_sub
             DESeq2 MAST_glmer IDEAS_NB IDEAS_DCA IDEAS_SAVER
CD8+Tcells_1  0.346      0.963    0.382     0.783       0.748
> df1 = cbind(df1, pi1_sub)
> df1
                cell_type n_genes DESeq2 MAST_glmer IDEAS_NB IDEAS_DCA
CD8+Tcells_1 CD8+Tcells_1    5160  0.346      0.963    0.382     0.783
             IDEAS_SAVER
CD8+Tcells_1       0.748
> 
> write.table(df1, file="res/4_Fig4A_n_genes.txt", sep="\t", quote=FALSE, 
+             row.names = FALSE)
> 
> 
> # -------------------------------------------------------------------
> # read GSEA results
> # -------------------------------------------------------------------
> 
> f1 <- function(x){
+   ww1 = which(x$padj < 0.05)
+   if(length(ww1) > 0){
+     x1 = x[ww1, c("pathway", "pval", "padj", "NES")]
+   }else{
+     x1 = NULL
+   }
+   x1
+ }
> 
> 
> gesaL = list()
> 
> sink("res/4_GSEA.txt")
> 
> for(ct1 in cell_types){
+   
+   cat("\n---------------------------------------------------\n")
+   cat(ct1)
+   cat("\n---------------------------------------------------\n")
+   
+   gsea = readRDS(sprintf("res/3f_gsea_%s.rds", ct1))
+   gsea = gsea[methods]
+   
+   x1   = lapply(gsea, f1)
+   x1[sapply(x1, is.null)] = NULL
+   
+   if(length(x1) > 0){ print(x1) }
+   
+   gesaL[[ct1]] = gsea
+ }
> sink()
> 
> 
> 
> # -------------------------------------------------------------------
> # check GSEA results for one cell type
> # -------------------------------------------------------------------
> 
> plot_gsea <- function(gseaL, ct1){
+   # ct1 = "CD8+Tcells_1"
+   DESeq2    = gesaL[[ct1]]$DESeq2
+   IDEAS_NB  = gesaL[[ct1]]$PS_nb_Was
+   IDEAS_DCA = gesaL[[ct1]]$PS_dca_direct_Was
+   
+   dim(DESeq2)
+   dim(IDEAS_NB)
+   dim(IDEAS_DCA)
+   
+   pathways1 = intersect(DESeq2$pathway, IDEAS_NB$pathway)
+   pathways2 = intersect(DESeq2$pathway, IDEAS_DCA$pathway)
+   pathways = sort(union(pathways1, pathways2))
+   length(pathways)
+   
+   mat1 = match(pathways, DESeq2$pathway)
+   mat2 = match(pathways, IDEAS_NB$pathway)
+   mat3 = match(pathways, IDEAS_DCA$pathway)
+   
+   gd = data.frame(pathway = pathways, 
+                   DESeq2 = -log10(DESeq2$pval[mat1]),
+                   IDEAS_NB = -log10(IDEAS_NB$pval[mat2]),
+                   IDEAS_DCA = -log10(IDEAS_DCA$pval[mat3]))
+   
+   g1 = ggplot(gd, aes(x=DESeq2, y=IDEAS_NB)) + geom_point(alpha = 0.5)
+   g2 = ggplot(gd, aes(x=DESeq2, y=IDEAS_DCA)) + geom_point(alpha = 0.5)
+   
+   pdf(sprintf("figures/4_GSEA_p_val_compare_%s.pdf", ct1), 
+       width=6, height=3)
+   print(ggarrange(g1, g2, ncol = 2, nrow = 1))
+   dev.off()
+ }
> 
> plot_gsea(gseaL, "CD8+Tcells_1")
null device 
          1 
Warning messages:
1: Removed 1 rows containing missing values (geom_point). 
2: Removed 9 rows containing missing values (geom_point). 
> #plot_gsea(gseaL, "PFC_Microglia")
> 
> # -------------------------------------------------------------------
> # plot GSEA results for CD8+Tcells_1
> # -------------------------------------------------------------------
> 
> ct1 = "CD8+Tcells_1"
> 
> #IDEAS_DCA = gesaL[[ct1]]$PS_dca_direct_Was
> #summary(IDEAS_DCA$padj)
> #IDEAS_DCA = IDEAS_DCA[which(IDEAS_DCA$padj < 0.05),]
> #IDEAS_DCA$pathway = gsub("REACTOME_", "", IDEAS_DCA$pathway)
> 
> #df_gsea = as.data.frame(IDEAS_DCA)
> #df_gsea = df_gsea[order(df_gsea$pval),]
> #df_gsea$pathway = factor(df_gsea$pathway, levels=rev(df_gsea$pathway))
> #p1 = ggplot(data=df_gsea, aes(x=pathway, y=-log10(pval))) +
> #  geom_bar(stat="identity", fill="#56B4E9") + coord_flip() +
> #  theme(legend.position = "none") + xlab("")
> 
> #ggsave("figures/2_GSEA_CD8+Tcells_1_IDEAS_DCA.pdf", p1, width=6, height=3)
> 
> for (i in 1:length(methods)){
+   m = methods[i]
+   cur_method = gesaL[[ct1]][[i]]
+   cur_padj = cur_method$padj
+   cat(paste(m, "  minimal adjusted pvalue: ",
+             as.character(min(cur_padj, na.rm = TRUE)), "\n", sep = ""))
+   
+   row_sign_padj = which(cur_padj < 0.05)
+   cat(paste("number of pathways with adjusted pvalue<0.05: ", 
+             as.character(length(row_sign_padj)), "\n" ))
+ 
+   if (length(row_sign_padj)>0){
+     
+     cur_method = cur_method[row_sign_padj,]
+     cur_method$pathway = gsub("REACTOME_", "", cur_method$pathway)
+     
+     df_gsea = as.data.frame(cur_method)
+     df_gsea = df_gsea[order(df_gsea$pval),]
+     df_gsea$pathway = factor(df_gsea$pathway, levels=rev(df_gsea$pathway))
+     p1 = ggplot(data=df_gsea, aes(x=pathway, y=-log10(pval))) +
+       geom_bar(stat="identity", fill="#56B4E9") + coord_flip() +
+       theme(legend.position = "none") + xlab("")
+     
+     cur_figurename = 
+       paste("figures/4_GSEA_CD8+Tcells_1_", m, ".pdf", sep = "")
+     ggsave(cur_figurename, p1, device = "pdf", width=12, 
+            height=round(length(row_sign_padj)/4)+1)
+   }
+ }
DESeq2  minimal adjusted pvalue: 3.32e-08
number of pathways with adjusted pvalue<0.05:  108 
rank_sum  minimal adjusted pvalue: 4.42666666666667e-09
number of pathways with adjusted pvalue<0.05:  30 
MAST_glm  minimal adjusted pvalue: 4.42666666666667e-09
number of pathways with adjusted pvalue<0.05:  25 
MAST_glmer  minimal adjusted pvalue: 0.149793608824367
number of pathways with adjusted pvalue<0.05:  0 
PS_nb_Was  minimal adjusted pvalue: 0.0665165031564994
number of pathways with adjusted pvalue<0.05:  0 
PS_dca_direct_Was  minimal adjusted pvalue: 0.00574417421883311
number of pathways with adjusted pvalue<0.05:  17 
PS_saver_direct_Was  minimal adjusted pvalue: 0.00357069006885339
number of pathways with adjusted pvalue<0.05:  12 
> 
> 
> 
> 
> # -------------------------------------------------------------------
> # scatter plot
> # -------------------------------------------------------------------
> 
> pdf("figures/4_compare_pval_DESeq2_vs_IDEAS.pdf", width=4.5, height=4.5)
> 
> for(ct1 in cell_types){
+   df1 = pv_list[[ct1]][,c("gene", "DESeq2", "PS_nb_Was", "PS_dca_direct_Was")]
+   
+   nms = c("DESeq2", "PS_nb_Was", "PS_dca_direct_Was")
+   fun1 = function(x){-log10(x)}
+   df2  = df1[, lapply(.SD, fun1), .SDcols = nms]
+   df2[,gene:=df1$gene]
+   setnames(df2, c("PS_nb_Was", "PS_dca_direct_Was"), 
+            c("IDEAS_NB", "IDEAS_DCA"))
+   
+   df2[,label_NB:=""]
+   df2[DESeq2 > 3 & IDEAS_NB < 1, label_NB:=gene]
+   df2[DESeq2 < 1 & IDEAS_NB > 3, label_NB:=gene]
+   
+   df2[,color_NB:="g11"]
+   df2[DESeq2 <= 2 & IDEAS_NB <= 2,  color_NB:="g00"]
+   df2[DESeq2 > 3 & IDEAS_NB < 1, color_NB:="g01"]
+   df2[DESeq2 < 1 & IDEAS_NB > 3, color_NB:="g01"]
+   
+   df2[,label_DCA:=""]
+   df2[DESeq2 > 3 & IDEAS_DCA < 1, label_DCA:=gene]
+   df2[DESeq2 < 1 & IDEAS_DCA > 3, label_DCA:=gene]
+   
+   df2[,color_DCA:="g11"]
+   df2[DESeq2 <= 2 & IDEAS_DCA <= 2,  color_DCA:="g00"]
+   df2[DESeq2 > 3 & IDEAS_DCA < 1, color_DCA:="g01"]
+   df2[DESeq2 < 1 & IDEAS_DCA > 3, color_DCA:="g01"]
+   
+   df2$color_NB = factor(df2$color_NB, levels = c("g00", "g11", "g01", "g10"))
+   df2$color_DCA = factor(df2$color_DCA, levels = c("g00", "g11", "g01", "g10"))
+   
+   g_NB = ggplot(df2, aes(x=DESeq2, y=IDEAS_NB, col=color_NB)) + 
+     geom_point(size = 0.4) +
+     scale_color_manual(values=c("#CCCCCC", "black", "#FC4E07", "#FC4E07")) +
+     theme(legend.position = "none") + ggtitle(ct1)
+   
+   g_NB = g_NB + geom_text_repel(aes(label = df2$label_NB), size = 3.5, 
+                                 min.segment.length = 0, 
+                                 box.padding = unit(0.25, "lines"),
+                                 point.padding = unit(0.25, "lines")) 
+   
+   g_DCA = ggplot(df2, aes(x=DESeq2, y=IDEAS_DCA, col=color_DCA)) + 
+     geom_point(size = 0.4) +  
+     scale_color_manual(values=c("#CCCCCC", "black", "#FC4E07", "#FC4E07")) +
+     theme(legend.position = "none") + ggtitle(ct1)
+   
+   g_DCA = g_DCA + geom_text_repel(aes(label = df2$label_DCA), size = 3.5, 
+                                   min.segment.length = 0, 
+                                   box.padding = unit(0.25, "lines"),
+                                   point.padding = unit(0.25, "lines"))
+   
+   print(g_NB)
+   print(g_DCA)
+   
+ }
Warning messages:
1: Removed 4 rows containing missing values (geom_point). 
2: Removed 4 rows containing missing values (geom_text_repel). 
3: ggrepel: 13 unlabeled data points (too many overlaps). Consider increasing max.overlaps 
4: ggrepel: 865 unlabeled data points (too many overlaps). Consider increasing max.overlaps 
> 
> dev.off()
null device 
          1 
> 
> 
> 
> 
> 
> 
> gc()
          used (Mb) gc trigger  (Mb) limit (Mb) max used  (Mb)
Ncells 1037216 55.4    2094077 111.9         NA  2094077 111.9
Vcells 2077132 15.9    8388608  64.0      65536  8388286  64.0
> 
> sessionInfo()
R version 4.1.0 (2021-05-18)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] reshape2_1.4.4    ggrepel_0.9.1     ggpubr_0.4.0      data.table_1.14.0
[5] ggcorrplot_0.1.3  ggplot2_3.3.5    

loaded via a namespace (and not attached):
 [1] zip_2.2.0        Rcpp_1.0.7       plyr_1.8.6       cellranger_1.1.0
 [5] pillar_1.6.1     compiler_4.1.0   tools_4.1.0      forcats_0.5.1   
 [9] digest_0.6.27    lifecycle_1.0.0  tibble_3.1.2     gtable_0.3.0    
[13] pkgconfig_2.0.3  rlang_0.4.11     openxlsx_4.2.4   curl_4.3.2      
[17] haven_2.4.1      rio_0.5.27       stringr_1.4.0    withr_2.4.2     
[21] dplyr_1.0.7      generics_0.1.0   vctrs_0.3.8      hms_1.1.0       
[25] cowplot_1.1.1    grid_4.1.0       tidyselect_1.1.1 glue_1.4.2      
[29] R6_2.5.0         rstatix_0.7.0    fansi_0.5.0      readxl_1.3.1    
[33] foreign_0.8-81   carData_3.0-4    farver_2.1.0     purrr_0.3.4     
[37] tidyr_1.1.3      car_3.0-11       magrittr_2.0.1   scales_1.1.1    
[41] backports_1.2.1  ellipsis_0.3.2   abind_1.4-5      colorspace_2.0-2
[45] ggsignif_0.6.2   labeling_0.4.2   utf8_1.2.1       stringi_1.6.2   
[49] munsell_0.5.0    broom_0.7.8      crayon_1.4.1    
> q(save="no")
> proc.time()
   user  system elapsed 
  3.530   0.124   3.652 
