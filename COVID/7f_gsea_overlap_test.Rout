
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # This file compares the gsea pathways 
> # identified by DESeq2, ideas nb, dca_direct,
> # mean expression level approach and residual approach
> 
> 
> library(ggcorrplot)
Loading required package: ggplot2
> library(data.table)
> library(ggpubr)
> library(ggrepel)
> library(reshape2)

Attaching package: ‘reshape2’

The following objects are masked from ‘package:data.table’:

    dcast, melt

> 
> theme_set(theme_classic())
> 
> # -------------------------------------------------------------------
> # read in cell type information
> # -------------------------------------------------------------------
> 
> # for now, CD8+Tcells_1 only
> cell_types = c("CD8+Tcells_1")
> 
> methods = c("DESeq2", "PS_nb_Was", "PS_dca_direct_Was")
> 
> # -------------------------------------------------------------------
> # read GSEA results
> # -------------------------------------------------------------------
> 
> f1 <- function(x){
+   ww1 = which(x$padj < 0.05)
+   if(length(ww1) > 0){
+     x1 = x[ww1, c("pathway", "pval", "padj", "NES")]
+   }else{
+     x1 = NULL
+   }
+   x1
+ }
> 
> 
> 
> sink("res/7f_GSEA.txt")
> 
> ct1 = cell_types[1]
>  
> cat("\n---------------------------------------------------\n")
> cat(ct1)
> cat("\n---------------------------------------------------\n")
> 
> gsea = readRDS(sprintf("res/5f_gsea_%s.rds", ct1))
> gsea = gsea[methods]
> 
> gsea_express = readRDS(sprintf("res/5f_gsea_expression_%s.rds",ct1))
> gsea['email']  = gsea_express['email']
> 
> 
> x1   = lapply(gsea, f1)
> x1[sapply(x1, is.null)] = NULL
> 
> if(length(x1) > 0){ print(x1) }
> 
> sink()
> 
> # -------------------------------------------------------------------
> # plot GSEA results for all methods
> # -------------------------------------------------------------------
> 
> ct1 = "CD8+Tcells_1"
> 
> all_methods = c(methods, "email")
> 
> sign_pathway_list = list()
> 
> for (i in 1:length(all_methods)){
+   m = all_methods[i]
+   cur_method = gsea[[m]]
+   cur_padj = cur_method$padj
+   cat(paste(m, "  minimal adjusted pvalue: ",
+             as.character(min(cur_padj, na.rm = TRUE)), "\n", sep = ""))
+   
+   row_sign_padj = which(cur_padj < 0.05)
+   cat(paste("number of pathways with adjusted pvalue<0.05: ", 
+             as.character(length(row_sign_padj)), "\n" ))
+ 
+   if (length(row_sign_padj)>0){
+     cur_method = cur_method[row_sign_padj,]
+     sign_pathway_list[[m]] = cur_method$pathway
+   }
+ }
DESeq2  minimal adjusted pvalue: 3.32e-08
number of pathways with adjusted pvalue<0.05:  108 
PS_nb_Was  minimal adjusted pvalue: 0.0196919778126273
number of pathways with adjusted pvalue<0.05:  7 
PS_dca_direct_Was  minimal adjusted pvalue: 0.0070595630016373
number of pathways with adjusted pvalue<0.05:  20 
email  minimal adjusted pvalue: 2.88260869565217e-09
number of pathways with adjusted pvalue<0.05:  235 
> 
> 
> overlap_mat = matrix(NA, ncol = length(all_methods), 
+                      nrow = length(all_methods))
> 
> for (i in 1:(length(all_methods)-1)){
+   for (j in (i+1):length(all_methods)){
+     mi = all_methods[i]
+     mj = all_methods[j]
+     pathways_i = sign_pathway_list[[mi]]
+     pathways_j = sign_pathway_list[[mj]]
+     len_overlap = length(intersect(pathways_i, pathways_j))
+     overlap_mat[i, j] = paste0(len_overlap, "/", length(pathways_i))
+     overlap_mat[j, i] = paste0(len_overlap, "/", length(pathways_j)) 
+   }
+ }
> 
> first_column = paste0(all_methods, 
+                       rep(" (", length(all_methods)),
+                       sapply(sign_pathway_list, length), 
+                       rep(")", length(all_methods)))
> 
> df_overlap = cbind(first_column, overlap_mat)
> colnames(df_overlap) = c("methods", all_methods)
> 
> write.csv(df_overlap, file = "res/7f_overlap_count_matrix.csv", 
+           row.names = FALSE)
> 
> 
> or_mat = matrix(NA, ncol = length(all_methods), 
+                 nrow = length(all_methods))
> R_or_mat = matrix(NA, ncol = length(all_methods), 
+                   nrow = length(all_methods))
> fp_mat = matrix(NA, ncol = length(all_methods), 
+                 nrow = length(all_methods))
> 
> for (i in 1:(length(all_methods)-1)){
+   for (j in (i+1):length(all_methods)){
+     
+     mi = all_methods[i]
+     mj = all_methods[j]
+     
+     cur_padj_i = gsea[[mi]]$padj
+     pi = cur_padj_i < 0.05
+     if(sum(pi, na.rm=TRUE) == 0){ next }
+     
+     cur_padj_j = gsea[[mj]]$padj
+     pj = cur_padj_j < 0.05
+     if(sum(pj, na.rm=TRUE) == 0){ next }
+     
+     pathways_i = gsea[[mi]]$pathway
+     pathways_j = gsea[[mj]]$pathway
+     # make the order of the pathways from method j 
+     # match those from method i
+     cur_padj_j = cur_padj_j[match(pathways_i, pathways_j)]
+     pj = cur_padj_j < 0.05
+     
+     element_2kp = which((!is.na(cur_padj_i))&(!is.na(cur_padj_j)))
+     # not sure why, but adding na.rm = TRUE in the following brackets will 
+     # at mistakenly introduce an additional 1 if it should sum to 0
+     pp = sum((pi & pj)[element_2kp])
+     pn = sum((pi & (!pj))[element_2kp])
+     np = sum(((!pi) & pj)[element_2kp])
+     nn = sum(((!pi) & (!pj))[element_2kp])
+     
+     fij = fisher.test(pi[element_2kp], pj[element_2kp], greater)
+     or_mat[j, i] = 
+       format(round((pp*nn)/(pn*np), digits = 2), nsmall = 2)
+     R_or_mat[j, i] = format(round(fij$estimate, digits = 2), nsmall = 2)
+     fisher_pvalue = fij$p.value
+     if (fisher_pvalue >= 0.001){
+       fisher_pvalue = 
+         format(round(fisher_pvalue, digits = 3), nsmall = 3)
+     }else{
+       fisher_pvalue = 
+         formatC(fisher_pvalue, format = "e", digits = 1)
+     }
+     fp_mat[j, i] = fisher_pvalue
+   }
+ }
> 
> 
> 
> df_or = cbind(first_column, or_mat)
> colnames(df_or) = c("methods", all_methods)
> 
> write.csv(df_or, file = "res/7f_odds_ratio_matrix.csv", 
+           row.names = FALSE)
> 
> df_R_or = cbind(first_column, R_or_mat)
> colnames(df_R_or) = c("methods", all_methods)
> 
> write.csv(df_R_or, file = "res/7f_fisher_odds_ratio_matrix.csv", 
+           row.names = FALSE)
> 
> df_fp = cbind(first_column, fp_mat)
> colnames(df_fp) = c("methods", all_methods)
> 
> write.csv(df_fp, file = "res/7f_fisher_pvalue_matrix.csv", 
+           row.names = FALSE)
> 
> 
> 
> 
> 
> 
> gc()
          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)
Ncells  927251 49.6    1445115 77.2         NA  1445115 77.2
Vcells 1802833 13.8    8388608 64.0      65536  3174708 24.3
> 
> sessionInfo()
R version 4.1.0 (2021-05-18)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] reshape2_1.4.4    ggrepel_0.9.1     ggpubr_0.4.0      data.table_1.14.0
[5] ggcorrplot_0.1.3  ggplot2_3.3.5    

loaded via a namespace (and not attached):
 [1] zip_2.2.0        Rcpp_1.0.7       plyr_1.8.6       cellranger_1.1.0
 [5] pillar_1.6.1     compiler_4.1.0   tools_4.1.0      forcats_0.5.1   
 [9] lifecycle_1.0.0  tibble_3.1.2     gtable_0.3.0     pkgconfig_2.0.3 
[13] rlang_0.4.11     openxlsx_4.2.4   DBI_1.1.1        curl_4.3.2      
[17] haven_2.4.1      rio_0.5.27       stringr_1.4.0    withr_2.4.2     
[21] dplyr_1.0.7      hms_1.1.0        generics_0.1.0   vctrs_0.3.8     
[25] grid_4.1.0       tidyselect_1.1.1 glue_1.4.2       R6_2.5.0        
[29] rstatix_0.7.0    fansi_0.5.0      readxl_1.3.1     foreign_0.8-81  
[33] carData_3.0-4    purrr_0.3.4      tidyr_1.1.3      car_3.0-11      
[37] magrittr_2.0.1   scales_1.1.1     backports_1.2.1  ellipsis_0.3.2  
[41] abind_1.4-5      assertthat_0.2.1 colorspace_2.0-2 ggsignif_0.6.2  
[45] utf8_1.2.1       stringi_1.6.2    munsell_0.5.0    broom_0.7.8     
[49] crayon_1.4.1    
> q(save="no")
> proc.time()
   user  system elapsed 
  0.879   0.102   1.026 
