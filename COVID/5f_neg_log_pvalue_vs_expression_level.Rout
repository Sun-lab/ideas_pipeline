
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # this code is modified from 
> # 4f_neg_log_pvalue_vs_expression_level.R
> # by using pvalue from PS_dca_direct_Was on a finer grid
> # by setting number of permutations to 4999 and 99999
> 
> # the read pvalue part is also modified
> # because we didn't rerun other parts for it, 
> # so need to get pvalues directly from 1b DESeq2 and 5d dca_direct
> # instead of getting them from the formal pvalue table 5e 
> # we didn't construct this table because we don't have results
> # from ideas and saver with the larger permutation number
> 
> # this code plots -log10(pvalue) against mean expression level
> # any get a table for the values in PS_dca_direct_Was pvalues
> 
> 
> # this file is updated from 
> # step7h_update_plots_on_individual_gene_ideas_dca_direct
> # under core_code/pipeline_formal folder
> 
> # the modifications:
> # (1) deal with COVID data
> # (2) add another way of adjusting for the read depth
> #     following explanation in email
> 
> 
> ## current version handles CD8+Tcell 1 only
> 
> 
> library(MASS)
> library(Matrix)
> library(data.table)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:data.table’:

    between, first, last

The following object is masked from ‘package:MASS’:

    select

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> #library(doParallel)
> #library(doRNG)
> #library(svd)
> #library(ideas)
> #library(MiRKAT)
> library(transport)
> library(ggplot2)
> library(ggpubr)
> library(ggpointdensity)
> 
> library(grid)
> library(gridExtra)

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> #big_font <- theme_grey(base_size =  16)
> theme_set(theme_classic())
> 
> data.dir  = data.dir = "../../ideas_data/COVID/PBMC_10x"
> 
> grp = "CD8+Tcells_1"
> 
> 
> 
> # ------------------------------------------------------------------------
> # read in cell information
> # ------------------------------------------------------------------------
> 
> cell_info = fread(file.path(data.dir, "meta.tsv"))
> dim(cell_info)
[1] 99049    40
> cell_info[1:2,]
                   cell orig.ident nCount_RNA nFeature_RNA nReads_RNA
1: 1_AAACCCAAGGCTTTCA-1    Covid19       4842         1925       4842
2: 1_AAACCCACAACTTCTT-1    Covid19       9582         3004       9582
   nReads_ALL percent.mito percent.hb       donor onset_of_symptoms
1:       5102     6.608839          0 C19-CB-0001        25.02.2020
2:      10008     4.195366          0 C19-CB-0003        29.02.2020
   days_after_onset        sampleID origID date_of_sampling DaysAfterSample0
1:               11 C19-CB-0001_d11   1_d4       06.03.2020                4
2:               13 C19-CB-0003_d13   3_d0       12.03.2020                0
   experiment PoolID sampletag         hash.ID        platform purification
1:       A3_2      1  Hashtag6 Hashtag6-TotalA scRNA-seq (10x)        Fresh
2:       A3_2      1  Hashtag8 Hashtag8-TotalA scRNA-seq (10x)        Fresh
   cells   age  sex group_per_sample who_per_sample disease_stage    outcome
1:  PBMC 21_25 male             mild              3          late discharged
2:  PBMC 41_45 male             mild              3          late discharged
             comorbidities COVID.19.related_medication_and_anti.microbials
1:                    none                                            none
2: Cardiovascular diseases                                            none
   RNA_snn_res.0.4  cluster_labels_res.0.4 new.order                id.celltype
1:               7 HLA-DR+ CD83+ Monocytes         1 1: HLA-DR+ CD83+ Monocytes
2:               7 HLA-DR+ CD83+ Monocytes         1 1: HLA-DR+ CD83+ Monocytes
   hpca.labels blueprint.labels monaco.labels immune.labels dmap.labels
1:    Monocyte        Monocytes     Monocytes     Monocytes   Monocytes
2:    Monocyte        Monocytes     Monocytes     Monocytes   Monocytes
   hemato.labels
1:     Monocytes
2:     Monocytes
> 
> table(cell_info$id.celltype)

     0: Classical Monocytes  1: HLA-DR+ CD83+ Monocytes 
                      16982                        3414 
         10: CD4+ T cells_2          11: CD4+ T cells_3 
                      10588                        2969 
         12: CD8+ T cells_1          13: CD8+ T cells_2 
                      11002                        1119 
         14: CD8+ T cells_3                15: NK cells 
                       2981                        8436 
              16: B cells_1               17: B cells_2 
                       7235                         259 
              18: B cells_3            19: Plasmablasts 
                        209                         839 
        2: CD163+ Monocytes           20: Megakaryocyte 
                       1445                        1161 
                  21: mixed               22: undefined 
                        164                         161 
3: HLA-DR- S100A+ monocytes  4: Non-classical Monocytes 
                       5273                        3399 
             5: Neutrophils     6: Immature Neutrophils 
                       2878                        1386 
                    7: mDCs                     8: pDCs 
                        833                         516 
          9: CD4+ T cells_1 
                      15800 
> 
> sort(table(paste(cell_info$group_per_sample, cell_info$donor, sep=":")))

severe:C19-CB-0011   mild:C19-CB-0052   control:one_k_v3       control:P07H 
               932               1132               1142               1211 
  mild:C19-CB-0005       control:P04H       control:P08H       control:P17H 
              1323               1410               1440               1486 
    control:C2P05F       control:P20H       control:P15F       control:P18F 
              1494               1504               1511               1576 
    control:C2P01H       control:P06F       control:P13H     control:C2P07H 
              1701               1715               1725               1753 
severe:C19-CB-0199   mild:C19-CB-0214   mild:C19-CB-0053     control:C2P15H 
              1755               1777               1812               1817 
    control:C2P19H     control:C2P16H     control:C2P10H     control:C2P13F 
              1879               2153               2200               2231 
      control:P02H       control:P09H severe:C19-CB-0016   mild:C19-CB-0003 
              2379               2469               2524               2583 
severe:C19-CB-0013   mild:C19-CB-0204 severe:C19-CB-0198   mild:C19-CB-0002 
              2713               2823               2992               3131 
severe:C19-CB-0021   mild:C19-CB-0001 severe:C19-CB-0012 severe:C19-CB-0020 
              3288               3614               3677               3789 
severe:C19-CB-0008 severe:C19-CB-0009  control:Five_k_v3   control:Ten_k_v3 
              4069               4332               4626              11361 
> 
> # ------------------------------------------------------------------------
> # read in count data of cell type
> # ------------------------------------------------------------------------
> 
> dat = readRDS(file.path(data.dir, sprintf("ct_mtx/%s.rds", grp)))
> dim(dat)
[1] 10167 11002
> class(dat)
[1] "dgCMatrix"
attr(,"package")
[1] "Matrix"
> dat[1:5,1:4]
5 x 4 sparse Matrix of class "dgCMatrix"
          1_AAAGAACCATGAATAG-1 1_AACAAGAGTCGGTAAG-1 1_AACCTGATCTGTGTGA-1
LINC00115                    .                    .                    .
NOC2L                        .                    .                    .
HES4                         .                    .                    .
ISG15                        .                    3                    .
C1orf159                     .                    .                    .
          1_AAGACTCCATGGCCCA-1
LINC00115                    .
NOC2L                        .
HES4                         .
ISG15                        .
C1orf159                     .
> 
> full_genes = rownames(dat) 
> 
> # ------------------------------------------------------------------------
> # subset cell information
> # ------------------------------------------------------------------------
> 
> table(colnames(dat) %in% cell_info$cell)

 TRUE 
11002 
> meta = cell_info[match(colnames(dat), cell_info$cell),]
> dim(meta)
[1] 11002    40
> meta[1:2,]
                   cell orig.ident nCount_RNA nFeature_RNA nReads_RNA
1: 1_AAAGAACCATGAATAG-1    Covid19       3717         1537       3717
2: 1_AACAAGAGTCGGTAAG-1    Covid19       3284         1578       3284
   nReads_ALL percent.mito percent.hb       donor onset_of_symptoms
1:       4183     6.941082          0 C19-CB-0002        25.02.2020
2:       3613     4.080390          0 C19-CB-0003        29.02.2020
   days_after_onset        sampleID origID date_of_sampling DaysAfterSample0
1:               13 C19-CB-0002_d13   2_d6       09.03.2020                6
2:               13 C19-CB-0003_d13   3_d0       12.03.2020                0
   experiment PoolID sampletag         hash.ID        platform purification
1:       A3_2      1  Hashtag5 Hashtag5-TotalA scRNA-seq (10x)        Fresh
2:       A3_2      1  Hashtag8 Hashtag8-TotalA scRNA-seq (10x)        Fresh
   cells   age    sex group_per_sample who_per_sample disease_stage    outcome
1:  PBMC 31_35 female             mild              3          late discharged
2:  PBMC 41_45   male             mild              3          late discharged
             comorbidities COVID.19.related_medication_and_anti.microbials
1:                    none                                            none
2: Cardiovascular diseases                                            none
   RNA_snn_res.0.4 cluster_labels_res.0.4 new.order        id.celltype
1:               2         CD8+ T cells_1        12 12: CD8+ T cells_1
2:               2         CD8+ T cells_1        12 12: CD8+ T cells_1
   hpca.labels blueprint.labels monaco.labels immune.labels  dmap.labels
1:     NK_cell     CD8+ T-cells       T cells      NK cells CD8+ T cells
2:     NK_cell     CD8+ T-cells       T cells      NK cells CD8+ T cells
   hemato.labels
1:  CD8+ T cells
2:  CD8+ T cells
> 
> 
> # ------------------------------------------------------------------------
> # generate individual level information
> # ------------------------------------------------------------------------
> 
> 
> # filter out cells from control samples
> meta_covid = meta[which(meta$group_per_sample != "control"),]
> dim(meta_covid)
[1] 5561   40
> 
> table(meta_covid$group_per_sample)

  mild severe 
  1366   4195 
> table(meta_covid$disease_stage)

early  late 
 1166  4395 
> table(meta_covid$donor)

C19-CB-0001 C19-CB-0002 C19-CB-0003 C19-CB-0005 C19-CB-0008 C19-CB-0009 
         45         625         108           4          70         271 
C19-CB-0011 C19-CB-0012 C19-CB-0013 C19-CB-0016 C19-CB-0020 C19-CB-0021 
        105         621         242         612         697         238 
C19-CB-0052 C19-CB-0053 C19-CB-0198 C19-CB-0199 C19-CB-0204 C19-CB-0214 
         57          92        1154         185         417          18 
> 
> table(meta_covid$donor, meta_covid$disease_stage)
             
              early late
  C19-CB-0001     8   37
  C19-CB-0002   530   95
  C19-CB-0003     0  108
  C19-CB-0005     0    4
  C19-CB-0008     0   70
  C19-CB-0009    73  198
  C19-CB-0011     0  105
  C19-CB-0012   164  457
  C19-CB-0013    39  203
  C19-CB-0016     0  612
  C19-CB-0020     0  697
  C19-CB-0021     0  238
  C19-CB-0052    57    0
  C19-CB-0053    92    0
  C19-CB-0198     0 1154
  C19-CB-0199   185    0
  C19-CB-0204     0  417
  C19-CB-0214    18    0
> 
> df_donor = as.data.frame(table(meta_covid$donor))
> donor2kp = df_donor$Var1[which(df_donor$Freq >= 10)]
> 
> meta2kp = meta_covid[which(meta_covid$donor %in% donor2kp),]
> dim(meta2kp)
[1] 5557   40
> table(meta2kp$donor)

C19-CB-0001 C19-CB-0002 C19-CB-0003 C19-CB-0008 C19-CB-0009 C19-CB-0011 
         45         625         108          70         271         105 
C19-CB-0012 C19-CB-0013 C19-CB-0016 C19-CB-0020 C19-CB-0021 C19-CB-0052 
        621         242         612         697         238          57 
C19-CB-0053 C19-CB-0198 C19-CB-0199 C19-CB-0204 C19-CB-0214 
         92        1154         185         417          18 
> length(unique(meta2kp$donor))
[1] 17
> 
> cell2kp_index = which(meta$cell %in% meta2kp$cell)
> 
> # select counts of the cells to keep
> dat1 = dat[, cell2kp_index]
> mean(colnames(dat1) == meta2kp$cell)
[1] 1
> 
> meta_ind = distinct(meta2kp[,c('donor', 'group_per_sample', 'sex')])
> table(meta_ind$group_per_sample, meta_ind$sex)
        
         female male
  mild        2    5
  severe      4    6
> 
> 
> # ------------------------------------------------------------------------
> # collect count data
> # ------------------------------------------------------------------------
> 
> trec1 = matrix(NA, nrow=nrow(dat1), ncol=nrow(meta_ind))
> colnames(trec1) = meta_ind$donor
> rownames(trec1) = rownames(dat1)
> dim(trec1)
[1] 10167    17
> trec1[1:2,1:3]
          C19-CB-0002 C19-CB-0003 C19-CB-0001
LINC00115          NA          NA          NA
NOC2L              NA          NA          NA
> 
> for(i in 1:ncol(trec1)){
+   wi = which(meta2kp$donor == meta_ind$donor[i])
+   trec1[,i] = rowSums(dat1[,wi])
+ }
> 
> dim(trec1)
[1] 10167    17
> trec1[1:2,1:3]
          C19-CB-0002 C19-CB-0003 C19-CB-0001
LINC00115          22           3           1
NOC2L             115          28          10
> 
> 
> 
> # find the row indexes to match those gene appearing in at least 90% of cells
> n.zeros = rowSums(dat1 == 0)
> summary(n.zeros)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    4302    4989    4572    5307    5557 
> w2kp = which(n.zeros < 0.9*ncol(dat1))
> length(w2kp)
[1] 5160
> 
> 
> 
> 
> # DESeq2 pvalues did not filter out genes with large proportion of zeros
> # need to repeat the filtering out genes step to get the genes we want
> pvals_1b     = fread(sprintf("res/1b_DESeq2_%s_logtotalrd_sex_age_mild_severe.tsv", grp))
> dim(pvals_1b)
[1] 10167     6
> pvals_1b$gene = full_genes
> pvals_1b[1:2, ]
    baseMean log2FoldChange     lfcSE        stat    pvalue      padj      gene
1:  6.911225   -0.478838555 0.4056708 -1.18036248 0.2378561        NA LINC00115
2: 46.197583    0.009872298 0.2117909  0.04661341 0.9628213 0.9830408     NOC2L
> 
> pvals_5d = fread(sprintf("res/5d_dca_direct_pvals_%s.tsv", grp))
> dim(pvals_5d)
[1] 5160    5
> pvals_5d[1:2, ]
    gene KR_dca_direct_Was KR_dca_direct_JSD PS_dca_direct_Was
1: NOC2L           0.64028           0.64976           0.55748
2: ISG15           0.01939           0.02905           0.01249
   PS_dca_direct_JSD
1:           0.58388
2:           0.01482
> 
> pvals_1b = pvals_1b[w2kp,]
> dim(pvals_1b)
[1] 5160    7
> 
> table(pvals_1b$gene == pvals_5d$gene)

TRUE 
5160 
> 
> table(full_genes[w2kp] == pvals_1b$gene)

TRUE 
5160 
> 
> pvals = data.frame(gene = pvals_1b$gene, 
+                    DESeq2 = pvals_1b$pvalue, 
+                    PS_dca_direct_Was = pvals_5d$PS_dca_direct_Was)
> 
> 
> # check the distribution of small pvalues
> df_dca_pvalue = as.data.frame(table(pvals$PS_dca_direct_Was))
> colnames(df_dca_pvalue) = c("pvalue", "count")
> df_dca_pvalue[1:6, ]
   pvalue count
1   5e-05    67
2   8e-05     3
3   1e-04    19
4 0.00011    41
5 0.00012     9
6 0.00013    77
> 
> write.csv(df_dca_pvalue, 
+           file = "res/5f_sorted_PS_dca_direct_Was_pvalue_table.csv",
+           row.names = FALSE)
> 
> 
> 
> 
> # move on to get the rescaled counts based on the 
> # description on page 14 of the DESeq2 paper
> func_K_iR <- function(input_vec){
+   if (min(input_vec) == 0){
+     return(0)
+   }
+   else{
+     log2_K_iR = mean(log2(input_vec))
+     return(2^log2_K_iR)
+   }
+ }
> 
> K_iR_vec = apply(trec1, 1, func_K_iR)
> K_iR_vec = as.numeric(unlist(K_iR_vec))
> 
> s_j_vec = rep(1, ncol(trec1))
> for (j in 1:ncol(trec1)){
+   K_j_by_K_iR = as.numeric(unlist(trec1[, j]))/K_iR_vec
+   # positive number divided by 0 will be Inf
+   # 0 divided by 0 will be NA
+   # remove the Inf and NAs to get the median
+   K_j_by_K_iR_pure = K_j_by_K_iR[!is.na(K_j_by_K_iR) & !is.infinite(K_j_by_K_iR)]
+   s_j_vec[j] = median(K_j_by_K_iR_pure)
+ }
> 
> 
> scaled_trec1 = matrix(NA, nrow=nrow(trec1), ncol=nrow(meta_ind))
> colnames(scaled_trec1) = colnames(trec1)
> rownames(scaled_trec1) = rownames(trec1)
> dim(scaled_trec1)
[1] 10167    17
> scaled_trec1[1:2, 1:3]
          C19-CB-0002 C19-CB-0003 C19-CB-0001
LINC00115          NA          NA          NA
NOC2L              NA          NA          NA
> 
> for (j in 1:ncol(trec1)){
+   scaled_trec1[, j] = trec1[, j]/s_j_vec[j]
+ }
> 
> 
> 
> # subset to match the genes considered for ideas_nb and ideas_dca_direct
> match_scaled_trec1 = scaled_trec1[w2kp, ]
> match_scaled_trec1[1:2, ]
      C19-CB-0002 C19-CB-0003 C19-CB-0001 C19-CB-0009 C19-CB-0012 C19-CB-0008
NOC2L    41.28306    40.93579    49.23574    42.88033    62.06141    56.37666
ISG15   198.51767   179.82509   403.73307   216.54569   100.19971   200.23434
      C19-CB-0011 C19-CB-0013 C19-CB-0020 C19-CB-0016 C19-CB-0021 C19-CB-0204
NOC2L    41.90254    42.45791     73.7928    47.15573    39.07604    48.60169
ISG15   107.37525   204.27861    138.7031   205.66237   110.84837   156.66898
      C19-CB-0198 C19-CB-0199 C19-CB-0053 C19-CB-0052 C19-CB-0214
NOC2L    48.03927    37.22048    47.19646    53.15513    13.98787
ISG15   168.98025   250.99963   310.94135   275.44022   643.44197
> 
> table(rownames(match_scaled_trec1) == pvals$gene)

TRUE 
5160 
> 
> 
> mean_match_scaled_trec1 = apply(match_scaled_trec1, 1, mean)
> mean_express_1 = as.numeric(mean_match_scaled_trec1)
> 
> # use the second way to do scaling to the trec1 matrix
> djs = as.numeric(apply(trec1, 2, sum))
> d_median = median(djs)
> ajs = d_median/djs
> 
> scaled_trec2 = t(t(trec1) * ajs)
> match_scaled_trec2 = scaled_trec2[w2kp, ]
> table(rownames(match_scaled_trec2) == pvals$gene)

TRUE 
5160 
> 
> mean_match_scaled_trec2 = apply(match_scaled_trec2, 1, mean)
> mean_express_2 = as.numeric(mean_match_scaled_trec2)
> 
> 
> df_combined = data.frame(DESeq2 = -log10(pvals$DESeq2), 
+                          dca_direct  = -log10(pvals$PS_dca_direct_Was), 
+                          paper = log10(mean_express_1), 
+                          email = log10(mean_express_2))
> 
> p1 = ggplot(df_combined, aes(x=email, y=DESeq2)) + 
+   geom_point(alpha = 0.5, size = 1.2) + 
+   xlab("log10(mean express) from email") + ylab("-log10(pval) DESeq2")
> 
> p2 = ggplot(df_combined, aes(x=email, y=dca_direct)) +
+   geom_point(alpha = 0.5, size = 1.2) + 
+   xlab("log10(mean express) from email") + ylab("-log10(pval) PS_dca_direct_Was") 
> 
> p3 = ggplot(df_combined, aes(x=paper, y=DESeq2)) + 
+   geom_point(alpha = 0.5, size = 1.2) + 
+   xlab("log10(mean express) from DESeq2") + ylab("-log10(pval) DESeq2")
> 
> p4 = ggplot(df_combined, aes(x=paper, y=dca_direct)) +
+   geom_point(alpha = 0.5, size = 1.2) +  
+   xlab("log10(mean express) from DESeq2") + ylab("-log10(pval) PS_dca_direct_Was") 
> 
> 
> pdf("figures/5f_neglogpval_vs_mean_express.pdf",
+     width=6, height=6)
> print(ggarrange(p1, p2, p3, p4, ncol = 2, nrow = 2))
> dev.off()
null device 
          1 
> 
> 
> df_scale_factors = data.frame("paper" = log10(s_j_vec),
+                               "email" = -log10(ajs))
> summary(df_scale_factors$paper - df_scale_factors$email)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.07070 0.08708 0.11058 0.12307 0.14815 0.22722 
> 
> p5 = ggplot(df_scale_factors, aes(x=paper, y=email)) +
+   geom_point(alpha = 0.5, size = 1.2) +  
+   xlab("log10(scale factor) from paper") + 
+   ylab("log10(scale factor) from email") + 
+   geom_abline()
> p6 = ggplot(df_combined, aes(x=paper, y=email)) +
+   geom_point(alpha = 0.5, size = 1.2) +  
+   xlab("log10(mean express) from paper") + 
+   ylab("log10(mean express) from email") + 
+   geom_abline()
> 
> pdf("figures/5f_log_mean_express_email_vs_paper.pdf",
+     width=6, height=3)
> print(ggarrange(p5, p6, ncol = 2, nrow = 1))
> dev.off()
null device 
          1 
> 
> 
> write.csv(df_combined, 
+           file = "res/5f_mean_expressions.csv", 
+           row.names = FALSE)
> 
> 
> gc()
           used  (Mb) gc trigger (Mb) limit (Mb)  max used   (Mb)
Ncells  2179933 116.5    3893087  208         NA   3893087  208.0
Vcells 49294111 376.1  161739261 1234      65536 139380913 1063.4
> 
> sessionInfo()
R version 4.1.0 (2021-05-18)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] grid      stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] gridExtra_2.3        ggpointdensity_0.1.0 ggpubr_0.4.0        
[4] ggplot2_3.3.5        transport_0.12-2     dplyr_1.0.7         
[7] data.table_1.14.0    Matrix_1.3-3         MASS_7.3-54         

loaded via a namespace (and not attached):
 [1] tidyselect_1.1.1 purrr_0.3.4      haven_2.4.1      lattice_0.20-44 
 [5] carData_3.0-4    colorspace_2.0-2 vctrs_0.3.8      generics_0.1.0  
 [9] utf8_1.2.1       rlang_0.4.11     pillar_1.6.1     foreign_0.8-81  
[13] glue_1.4.2       withr_2.4.2      DBI_1.1.1        readxl_1.3.1    
[17] lifecycle_1.0.0  munsell_0.5.0    ggsignif_0.6.2   gtable_0.3.0    
[21] cellranger_1.1.0 zip_2.2.0        labeling_0.4.2   rio_0.5.27      
[25] forcats_0.5.1    curl_4.3.2       fansi_0.5.0      broom_0.7.8     
[29] Rcpp_1.0.7       scales_1.1.1     backports_1.2.1  abind_1.4-5     
[33] farver_2.1.0     digest_0.6.27    hms_1.1.0        stringi_1.6.2   
[37] openxlsx_4.2.4   rstatix_0.7.0    cowplot_1.1.1    tools_4.1.0     
[41] magrittr_2.0.1   tibble_3.1.2     crayon_1.4.1     tidyr_1.1.3     
[45] car_3.0-11       pkgconfig_2.0.3  ellipsis_0.3.2   assertthat_0.2.1
[49] R6_2.5.0         compiler_4.1.0  
> q(save="no")
> proc.time()
   user  system elapsed 
  4.105   0.416   4.641 
