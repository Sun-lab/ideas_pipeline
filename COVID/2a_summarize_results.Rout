
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(ggcorrplot)
Loading required package: ggplot2
> library(data.table)
> library(ggpubr)
> library(ggrepel)
> library(reshape2)

Attaching package: ‘reshape2’

The following objects are masked from ‘package:data.table’:

    dcast, melt

> 
> theme_set(theme_classic())
> 
> # -------------------------------------------------------------------
> # read in cell type information
> # -------------------------------------------------------------------
> 
> # for now, CD8+Tcells_1 only
> cell_types = c("CD8+Tcells_1")
> 
> # -------------------------------------------------------------------
> # read p-values, draw histogram of p-values, and record 
> # fisher exact test to compare each pair of method
> # -------------------------------------------------------------------
> 
> methods = c("DESeq2", "rank_sum", "MAST_glm", "MAST_glmer", 
+             "PS_nb_Was", "PS_dca_direct_Was", "PS_saver_direct_Was")
> 
> pi0     = matrix(NA, nrow=length(cell_types), ncol=length(methods))
> ngenes  = rep(NA, length(cell_types))
> or_list = fp_list = pv_list = list()
> 
> pdf("figures/2_pval_hist.pdf", width=12, height=6)
> par(mfrow=c(2,4), bty="n", mar=c(5,4,3,1))
> 
> for(i in 1:length(cell_types)){
+   ct1 = cell_types[i]
+   p1  = fread(sprintf("res/1e_pvals_%s.tsv", ct1))
+   pv_list[[ct1]]= p1
+   ngenes[i] = nrow(p1)
+   
+   odds_ratio = fisher_pvl = matrix(NA, nrow=length(methods), 
+                                    ncol=length(methods))
+   
+   colnames(odds_ratio) = rownames(odds_ratio) = methods
+   colnames(fisher_pvl) = rownames(fisher_pvl) = methods
+   
+   j = 0
+   for(m1 in methods){
+     j = j + 1
+     hist(p1[[m1]], main=paste0(m1, "\n", ct1), xlab="p-value", breaks = 20)
+     pi0[i,j] = min(1, 2*mean(p1[[m1]] > 0.5, na.rm=TRUE))
+     
+     pj = p1[[m1]] < 0.05
+     if(sum(pj, na.rm=TRUE) == 0){ next }
+     
+     for(k1 in methods){
+       pk = p1[[k1]] < 0.05
+       if(sum(pk, na.rm=TRUE) == 0){ next }
+       
+       fjk = fisher.test(pj, pk)
+       odds_ratio[m1, k1] = fjk$estimate
+       fisher_pvl[m1, k1] = fjk$p.value
+     }
+   }
+   plot(0:1,0:1, type="n", xaxt="n", yaxt="n", bty="n", xlab="", ylab="")
+   or_list[[ct1]] = odds_ratio
+   fp_list[[ct1]] = fisher_pvl
+   
+ }
> 
> dev.off()
null device 
          1 
> 
> 
> df1 = data.frame(cell_type =  cell_types, n_genes = ngenes)
> df1$cell_type = factor(df1$cell_type, levels = df1$cell_type)
> 
> g2  = ggplot(data=df1, aes(x=cell_type, y=n_genes)) +
+   geom_bar(stat="identity", fill="gray") + 
+   ylab("number of genes") + xlab("") + 
+   coord_flip() + theme_classic() 
> 
> ggsave("figures/2_barplot_n_genes.pdf", g2, width=3, height=3.5)
> 
> pdf("figures/2_odds_ratio.pdf", width=6, height=6)
> par(mfrow=c(1,1), bty="n", mar=c(5,4,3,1))
> 
> for(ct1 in cell_types){
+   or1 = or_list[[ct1]]
+   or1[which(or1 > 10)] = 10
+   g1 = ggcorrplot(or1, tl.srt=90) + ggtitle(ct1) +
+     scale_fill_gradient2(limit = c(0,10), low = "blue", 
+                          high =  "red", mid = "white", 
+                          midpoint = 5)
+   print(g1)
+ }
Scale for 'fill' is already present. Adding another scale for 'fill', which
will replace the existing scale.
> dev.off()
null device 
          1 
> 
> # -------------------------------------------------------------------
> # summarize the proportion of non-nulls
> # -------------------------------------------------------------------
> 
> colnames(pi0) = methods
> rownames(pi0) = cell_types
> 
> pi1 = t(1 - pi0)
> 
> pi1
                    CD8+Tcells_1
DESeq2                 0.4490149
rank_sum               0.7372969
MAST_glm               0.9605945
MAST_glmer             0.9280526
PS_nb_Was              0.4607130
PS_dca_direct_Was      0.7870722
PS_saver_direct_Was    0.7428275
> 
> rownames(pi1) = gsub("PS_nb_Was", "IDEAS_NB", rownames(pi1))
> rownames(pi1) = gsub("PS_dca_direct_Was", "IDEAS_DCA", rownames(pi1))
> rownames(pi1) = gsub("PS_saver_direct_Was", "IDEAS_SAVER", rownames(pi1))
> 
> summary(c(pi1))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.4490  0.5990  0.7428  0.7237  0.8576  0.9606 
> 
> g1 = ggcorrplot(pi1, tl.srt=90)
> g1 = g1 + scale_fill_gradient2(limit = c(0,1), low = "blue", 
+                                high =  "red", mid = "white", 
+                                midpoint = 0.2)
Scale for 'fill' is already present. Adding another scale for 'fill', which
will replace the existing scale.
> 
> ggsave("figures/2_pi1_complete.pdf", g1, width=5, height=5)
> 
> pi1_sub = pi1[-(2:3),, drop = FALSE]
> summary(c(pi1_sub))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.4490  0.4607  0.7428  0.6735  0.7871  0.9281 
> rownames(pi1_sub) = rownames(pi1_sub)
> 
> g1 = ggcorrplot(pi1_sub, tl.srt=90)
> g1 = g1 + scale_fill_gradient2(limit = c(0,0.61), low = "blue", 
+                                high =  "red", mid = "white", 
+                                midpoint = 0.2)
Scale for 'fill' is already present. Adding another scale for 'fill', which
will replace the existing scale.
> 
> ggsave("figures/2_pi1_PS_Was.pdf", g1, width=4, height=5)
> 
> pi1_sub = as.data.frame(round(t(pi1_sub),3))
> table(df1$cell_type == rownames(pi1_sub))

TRUE 
   1 
> pi1_sub
             DESeq2 MAST_glmer IDEAS_NB IDEAS_DCA IDEAS_SAVER
CD8+Tcells_1  0.449      0.928    0.461     0.787       0.743
> df1 = cbind(df1, pi1_sub)
> df1
                cell_type n_genes DESeq2 MAST_glmer IDEAS_NB IDEAS_DCA
CD8+Tcells_1 CD8+Tcells_1    2893  0.449      0.928    0.461     0.787
             IDEAS_SAVER
CD8+Tcells_1       0.743
> 
> write.table(df1, file="res/Fig4A_n_genes.txt", sep="\t", quote=FALSE, 
+             row.names = FALSE)
> 
> 
> 
> 
> 
> 
> 
> 
> gc()
          used (Mb) gc trigger  (Mb) limit (Mb) max used (Mb)
Ncells  962839 51.5    1952220 104.3         NA  1263980 67.6
Vcells 1650744 12.6    8388608  64.0      65536  6650174 50.8
> 
> sessionInfo()
R version 4.1.0 (2021-05-18)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] reshape2_1.4.4    ggrepel_0.9.1     ggpubr_0.4.0      data.table_1.14.0
[5] ggcorrplot_0.1.3  ggplot2_3.3.5    

loaded via a namespace (and not attached):
 [1] zip_2.2.0        Rcpp_1.0.7       plyr_1.8.6       cellranger_1.1.0
 [5] pillar_1.6.1     compiler_4.1.0   tools_4.1.0      forcats_0.5.1   
 [9] digest_0.6.27    lifecycle_1.0.0  tibble_3.1.2     gtable_0.3.0    
[13] pkgconfig_2.0.3  rlang_0.4.11     openxlsx_4.2.4   curl_4.3.2      
[17] haven_2.4.1      rio_0.5.27       stringr_1.4.0    withr_2.4.2     
[21] dplyr_1.0.7      generics_0.1.0   vctrs_0.3.8      hms_1.1.0       
[25] grid_4.1.0       tidyselect_1.1.1 glue_1.4.2       R6_2.5.0        
[29] rstatix_0.7.0    fansi_0.5.0      readxl_1.3.1     foreign_0.8-81  
[33] carData_3.0-4    farver_2.1.0     purrr_0.3.4      tidyr_1.1.3     
[37] car_3.0-11       magrittr_2.0.1   scales_1.1.1     backports_1.2.1 
[41] ellipsis_0.3.2   abind_1.4-5      colorspace_2.0-2 ggsignif_0.6.2  
[45] labeling_0.4.2   utf8_1.2.1       stringi_1.6.2    munsell_0.5.0   
[49] broom_0.7.8      crayon_1.4.1    
> q(save="no")
> proc.time()
   user  system elapsed 
  1.036   0.100   1.128 
